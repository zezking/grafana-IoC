{"version":3,"file":"module.js","mappings":"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","sources":["webpack://enze-grafanaioc-app/external amd \"@emotion/css\"","webpack://enze-grafanaioc-app/external amd \"@grafana/data\"","webpack://enze-grafanaioc-app/external amd \"@grafana/runtime\"","webpack://enze-grafanaioc-app/external amd \"@grafana/ui\"","webpack://enze-grafanaioc-app/external amd \"react\"","webpack://enze-grafanaioc-app/external amd \"react-dom\"","webpack://enze-grafanaioc-app/external amd \"react-router\"","webpack://enze-grafanaioc-app/external amd \"rxjs\"","webpack://enze-grafanaioc-app/webpack/bootstrap","webpack://enze-grafanaioc-app/webpack/runtime/compat get default export","webpack://enze-grafanaioc-app/webpack/runtime/define property getters","webpack://enze-grafanaioc-app/webpack/runtime/hasOwnProperty shorthand","webpack://enze-grafanaioc-app/webpack/runtime/make namespace object","webpack://enze-grafanaioc-app/./constants.ts","webpack://enze-grafanaioc-app/./utils/utils.routing.ts","webpack://enze-grafanaioc-app/./components/testIds.ts","webpack://enze-grafanaioc-app/./pages/PageFour.tsx","webpack://enze-grafanaioc-app/./pages/PageOne.tsx","webpack://enze-grafanaioc-app/../node_modules/@remix-run/router/dist/router.js","webpack://enze-grafanaioc-app/../node_modules/react-router-dom/dist/index.js","webpack://enze-grafanaioc-app/./pages/PageThree.tsx","webpack://enze-grafanaioc-app/./pages/PageTwo.tsx","webpack://enze-grafanaioc-app/../../../node_modules/inversify/es/constants/literal_types.js","webpack://enze-grafanaioc-app/../../../node_modules/inversify/es/utils/id.js","webpack://enze-grafanaioc-app/../../../node_modules/inversify/es/bindings/binding.js","webpack://enze-grafanaioc-app/../../../node_modules/inversify/es/constants/error_msgs.js","webpack://enze-grafanaioc-app/../../../node_modules/inversify/es/constants/metadata_keys.js","webpack://enze-grafanaioc-app/../../../node_modules/inversify/es/planning/metadata_reader.js","webpack://enze-grafanaioc-app/../../../node_modules/inversify/es/bindings/binding_count.js","webpack://enze-grafanaioc-app/../../../node_modules/inversify/es/utils/exceptions.js","webpack://enze-grafanaioc-app/../../../node_modules/inversify/es/utils/serialization.js","webpack://enze-grafanaioc-app/../../../node_modules/inversify/es/planning/context.js","webpack://enze-grafanaioc-app/../../../node_modules/inversify/es/planning/metadata.js","webpack://enze-grafanaioc-app/../../../node_modules/inversify/es/planning/plan.js","webpack://enze-grafanaioc-app/../../../node_modules/inversify/es/annotation/lazy_service_identifier.js","webpack://enze-grafanaioc-app/../../../node_modules/inversify/es/planning/queryable_string.js","webpack://enze-grafanaioc-app/../../../node_modules/inversify/es/planning/target.js","webpack://enze-grafanaioc-app/../../../node_modules/inversify/es/planning/reflection_utils.js","webpack://enze-grafanaioc-app/../../../node_modules/inversify/es/planning/request.js","webpack://enze-grafanaioc-app/../../../node_modules/inversify/es/planning/planner.js","webpack://enze-grafanaioc-app/../../../node_modules/inversify/es/utils/async.js","webpack://enze-grafanaioc-app/../../../node_modules/inversify/es/scope/scope.js","webpack://enze-grafanaioc-app/../../../node_modules/inversify/es/utils/factory_type.js","webpack://enze-grafanaioc-app/../../../node_modules/inversify/es/resolution/instantiation.js","webpack://enze-grafanaioc-app/../../../node_modules/inversify/es/resolution/resolver.js","webpack://enze-grafanaioc-app/../../../node_modules/inversify/es/utils/binding_utils.js","webpack://enze-grafanaioc-app/../../../node_modules/inversify/es/syntax/constraint_helpers.js","webpack://enze-grafanaioc-app/../../../node_modules/inversify/es/syntax/binding_when_syntax.js","webpack://enze-grafanaioc-app/../../../node_modules/inversify/es/syntax/binding_on_syntax.js","webpack://enze-grafanaioc-app/../../../node_modules/inversify/es/syntax/binding_when_on_syntax.js","webpack://enze-grafanaioc-app/../../../node_modules/inversify/es/syntax/binding_in_syntax.js","webpack://enze-grafanaioc-app/../../../node_modules/inversify/es/syntax/binding_in_when_on_syntax.js","webpack://enze-grafanaioc-app/../../../node_modules/inversify/es/syntax/binding_to_syntax.js","webpack://enze-grafanaioc-app/../../../node_modules/inversify/es/container/container_snapshot.js","webpack://enze-grafanaioc-app/../../../node_modules/inversify/es/container/lookup.js","webpack://enze-grafanaioc-app/../../../node_modules/inversify/es/utils/clonable.js","webpack://enze-grafanaioc-app/../../../node_modules/inversify/es/container/module_activation_store.js","webpack://enze-grafanaioc-app/../../../node_modules/inversify/es/container/container.js","webpack://enze-grafanaioc-app/../../../node_modules/inversify/es/annotation/injectable.js","webpack://enze-grafanaioc-app/./ioc/default/index.ts","webpack://enze-grafanaioc-app/./components/LoginForm/LoginForm.tsx","webpack://enze-grafanaioc-app/./pages/PageIOC.tsx","webpack://enze-grafanaioc-app/./components/AppConfig/AppConfig.tsx","webpack://enze-grafanaioc-app/./module.ts","webpack://enze-grafanaioc-app/./components/App/App.tsx"],"sourcesContent":["module.exports = __WEBPACK_EXTERNAL_MODULE__696__;","module.exports = __WEBPACK_EXTERNAL_MODULE__744__;","module.exports = __WEBPACK_EXTERNAL_MODULE__622__;","module.exports = __WEBPACK_EXTERNAL_MODULE__187__;","module.exports = __WEBPACK_EXTERNAL_MODULE__10__;","module.exports = __WEBPACK_EXTERNAL_MODULE__528__;","module.exports = __WEBPACK_EXTERNAL_MODULE__64__;","module.exports = __WEBPACK_EXTERNAL_MODULE__464__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import pluginJson from './plugin.json';\n\nexport const PLUGIN_BASE_URL = `/a/${pluginJson.id}`;\n\nexport enum ROUTES {\n  One = 'one',\n  Two = 'two',\n  Three = 'three',\n  Four = 'four',\n  IOC = 'ioc',\n}\n","import { PLUGIN_BASE_URL } from '../constants';\n\n// Prefixes the route with the base URL of the plugin\nexport function prefixRoute(route: string): string {\n  return `${PLUGIN_BASE_URL}/${route}`;\n}\n","export const testIds = {\n  appConfig: {\n    container: 'data-testid ac-container',\n    apiKey: 'data-testid ac-api-key',\n    apiUrl: 'data-testid ac-api-url',\n    submit: 'data-testid ac-submit-form',\n  },\n  pageOne: {\n    container: 'data-testid pg-one-container',\n    navigateToFour: 'data-testid navigate-to-four',\n  },\n  pageTwo: {\n    container: 'data-testid pg-two-container',\n  },\n  pageThree: {\n    container: 'data-testid pg-three-container',\n  },\n  pageFour: {\n    container: 'data-testid pg-four-container',\n    navigateBack: 'data-testid navigate-back',\n  },\n};\n","import React from 'react';\nimport { css } from '@emotion/css';\nimport { GrafanaTheme2, PageLayoutType } from '@grafana/data';\nimport { LinkButton, useStyles2 } from '@grafana/ui';\nimport { ROUTES } from '../constants';\nimport { prefixRoute } from '../utils/utils.routing';\nimport { testIds } from '../components/testIds';\nimport { PluginPage } from '@grafana/runtime';\n\nexport function PageFour() {\n  const s = useStyles2(getStyles);\n\n  return (\n    <PluginPage layout={PageLayoutType.Canvas}>\n      <div className={s.page} data-testid={testIds.pageFour.container}>\n        <div className={s.container}>\n          <LinkButton data-testid={testIds.pageFour.navigateBack} icon=\"arrow-left\" href={prefixRoute(ROUTES.One)}>\n            Back\n          </LinkButton>\n          <div className={s.content}>This is a full-width page without a navigation bar.</div>\n        </div>\n      </div>\n    </PluginPage>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  page: css`\n    padding: ${theme.spacing(3)};\n    background-color: ${theme.colors.background.secondary};\n    display: flex;\n    justify-content: center;\n  `,\n  container: css`\n    width: 900px;\n    max-width: 100%;\n    min-height: 500px;\n  `,\n  content: css`\n    margin-top: ${theme.spacing(6)};\n  `,\n});\n","import React from 'react';\nimport { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { LinkButton, useStyles2 } from '@grafana/ui';\nimport { prefixRoute } from '../utils/utils.routing';\nimport { ROUTES } from '../constants';\nimport { testIds } from '../components/testIds';\nimport { PluginPage } from '@grafana/runtime';\n\nexport function PageOne() {\n  const s = useStyles2(getStyles);\n\n  return (\n    <PluginPage>\n      <div data-testid={testIds.pageOne.container}>\n        This is page one.\n        <div className={s.marginTop}>\n          <LinkButton data-testid={testIds.pageOne.navigateToFour} href={prefixRoute(ROUTES.Four)}>\n            Full-width page example\n          </LinkButton>\n        </div>\n      </div>\n    </PluginPage>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  marginTop: css`\n    margin-top: ${theme.spacing(2)};\n  `,\n});\n","/**\n * @remix-run/router v1.15.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Actions represent the type of change to a location value.\n */\nvar Action;\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\nconst PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    initialEntries = [\"/\"],\n    initialIndex,\n    v5Compat = false\n  } = options;\n  let entries; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) => createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined));\n  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  let action = Action.Pop;\n  let listener = null;\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation() {\n    return entries[index];\n  }\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n    let location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n  function createHref(to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  let history = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 1\n        });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 0\n        });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta\n        });\n      }\n    },\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createBrowserLocation(window, globalHistory) {\n    let {\n      pathname,\n      search,\n      hash\n    } = window.location;\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createHashLocation(window, globalHistory) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\"\n    } = parsePath(window.location.hash.substr(1));\n    // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createHashHref(window, to) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n  function validateHashLocation(location, to) {\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location, index) {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n  let location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nfunction createPath(_ref) {\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\"\n  } = _ref;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nfunction parsePath(path) {\n  let parsedPath = {};\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n  return parsedPath;\n}\nfunction getUrlBasedHistory(getLocation, createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    window = document.defaultView,\n    v5Compat = false\n  } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener = null;\n  let index = getIndex();\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState(_extends({}, globalHistory.state, {\n      idx: index\n    }), \"\");\n  }\n  function getIndex() {\n    let state = globalHistory.state || {\n      idx: null\n    };\n    return state.idx;\n  }\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({\n        action,\n        location: history.location,\n        delta\n      });\n    }\n  }\n  function push(to, state) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 1\n      });\n    }\n  }\n  function replace(to, state) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 0\n      });\n    }\n  }\n  function createURL(to) {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base = window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n    let href = typeof to === \"string\" ? to : createPath(to);\n    invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n    return new URL(href, base);\n  }\n  let history = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    }\n  };\n  return history;\n}\n//#endregion\n\nvar ResultType;\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\nconst immutableRouteKeys = new Set([\"lazy\", \"caseSensitive\", \"path\", \"id\", \"index\", \"children\"]);\nfunction isIndexRoute(route) {\n  return route.index === true;\n}\n// Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\nfunction convertRoutesToDataRoutes(routes, mapRouteProperties, parentPath, manifest) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n  if (manifest === void 0) {\n    manifest = {};\n  }\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!manifest[id], \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    if (isIndexRoute(route)) {\n      let indexRoute = _extends({}, route, mapRouteProperties(route), {\n        id\n      });\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute = _extends({}, route, mapRouteProperties(route), {\n        id,\n        children: undefined\n      });\n      manifest[id] = pathOrLayoutRoute;\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(route.children, mapRouteProperties, treePath, manifest);\n      }\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n  if (pathname == null) {\n    return null;\n  }\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i],\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    safelyDecodeURI(pathname));\n  }\n  return matches;\n}\nfunction convertRouteMatchToUiMatch(match, loaderData) {\n  let {\n    route,\n    pathname,\n    params\n  } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n  let flattenRoute = (route, index, relativePath) => {\n    let meta = {\n      relativePath: relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n    // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n      // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  };\n  routes.forEach((route, index) => {\n    var _route$path;\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !((_route$path = route.path) != null && _route$path.includes(\"?\"))) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n  return branches;\n}\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path) {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n  let [first, ...rest] = segments;\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  let result = [];\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(...restExploded.map(subpath => subpath === \"\" ? required : [required, subpath].join(\"/\")));\n  // Then, if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map(exploded => path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded);\n}\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\nconst paramRe = /^:[\\w-]+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = s => s === \"*\";\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ?\n  // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] :\n  // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\nfunction matchRouteBranch(branch, pathname) {\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    let route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route\n    });\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n  let path = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(false, \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n    path = path.replace(/\\*$/, \"/*\");\n  }\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n  const stringify = p => p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n  const segments = path.split(/\\/+/).map((segment, index, array) => {\n    const isLastSegment = index === array.length - 1;\n    // only apply the splat if it's the last segment\n    if (isLastSegment && segment === \"*\") {\n      const star = \"*\";\n      // Apply the splat\n      return stringify(params[star]);\n    }\n    const keyMatch = segment.match(/^:([\\w-]+)(\\??)$/);\n    if (keyMatch) {\n      const [, key, optional] = keyMatch;\n      let param = params[key];\n      invariant(optional === \"?\" || param != null, \"Missing \\\":\" + key + \"\\\" param\");\n      return stringify(param);\n    }\n    // Remove any optional markers from optional static segments\n    return segment.replace(/\\?$/g, \"\");\n  })\n  // Remove empty segments\n  .filter(segment => !!segment);\n  return prefix + segments.join(\"/\");\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n  let [matcher, compiledParams] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = compiledParams.reduce((memo, _ref, index) => {\n    let {\n      paramName,\n      isOptional\n    } = _ref;\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n    const value = captureGroups[index];\n    if (isOptional && !value) {\n      memo[paramName] = undefined;\n    } else {\n      memo[paramName] = safelyDecodeURIComponent(value || \"\", paramName);\n    }\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n  if (end === void 0) {\n    end = true;\n  }\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  let params = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^${}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/\\/:([\\w-]+)(\\?)?/g, (_, paramName, isOptional) => {\n    params.push({\n      paramName,\n      isOptional: isOptional != null\n    });\n    return isOptional ? \"/?([^\\\\/]+)?\" : \"/([^\\\\/]+)\";\n  });\n  if (path.endsWith(\"*\")) {\n    params.push({\n      paramName: \"*\"\n    });\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, params];\n}\nfunction safelyDecodeURI(value) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n  return pathname.slice(startIndex) || \"/\";\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nfunction getPathContributingMatches(matches) {\n  return matches.filter((match, index) => index === 0 || match.route.path && match.route.path.length > 0);\n}\n// Return the array of pathnames for the current route matches - used to\n// generate the routePathnames input for resolveTo()\nfunction getResolveToMatches(matches, v7_relativeSplatPath) {\n  let pathMatches = getPathContributingMatches(matches);\n  // When v7_relativeSplatPath is enabled, use the full pathname for the leaf\n  // match so we include splat values for \".\" links.  See:\n  // https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329\n  if (v7_relativeSplatPath) {\n    return pathMatches.map((match, idx) => idx === matches.length - 1 ? match.pathname : match.pathnameBase);\n  }\n  return pathMatches.map(match => match.pathnameBase);\n}\n/**\n * @private\n */\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n  let to;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n  let from;\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n    // With relative=\"route\" (the default), each leading .. segment means\n    // \"go up one route\" instead of \"go up one URL segment\".  This is a key\n    // difference from how <a href> works and a major reason we call this a\n    // \"to\" value instead of a \"href\".\n    if (!isPathRelative && toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n      to.pathname = toSegments.join(\"/\");\n    }\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n  let path = resolvePath(to, from);\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n  return path;\n}\n/**\n * @private\n */\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n/**\n * @private\n */\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n/**\n * @private\n */\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n/**\n * @private\n */\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nconst json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers\n  }));\n};\nclass AbortedDeferredError extends Error {}\nclass DeferredData {\n  constructor(data, responseInit) {\n    this.pendingKeysSet = new Set();\n    this.subscribers = new Set();\n    this.deferredKeys = [];\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\");\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject;\n    this.abortPromise = new Promise((_, r) => reject = r);\n    this.controller = new AbortController();\n    let onAbort = () => reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () => this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce((acc, _ref2) => {\n      let [key, value] = _ref2;\n      return Object.assign(acc, {\n        [key]: this.trackPromise(key, value)\n      });\n    }, {});\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n    this.init = responseInit;\n  }\n  trackPromise(key, value) {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise = Promise.race([value, this.abortPromise]).then(data => this.onSettle(promise, key, undefined, data), error => this.onSettle(promise, key, error));\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n    Object.defineProperty(promise, \"_tracked\", {\n      get: () => true\n    });\n    return promise;\n  }\n  onSettle(promise, key, error, data) {\n    if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      return Promise.reject(error);\n    }\n    this.pendingKeysSet.delete(key);\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n    // If the promise was resolved/rejected with undefined, we'll throw an error as you\n    // should always resolve with a value or null\n    if (error === undefined && data === undefined) {\n      let undefinedError = new Error(\"Deferred data for key \\\"\" + key + \"\\\" resolved/rejected with `undefined`, \" + \"you must resolve/reject with a value or `null`.\");\n      Object.defineProperty(promise, \"_error\", {\n        get: () => undefinedError\n      });\n      this.emit(false, key);\n      return Promise.reject(undefinedError);\n    }\n    if (data === undefined) {\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n    Object.defineProperty(promise, \"_data\", {\n      get: () => data\n    });\n    this.emit(false, key);\n    return data;\n  }\n  emit(aborted, settledKey) {\n    this.subscribers.forEach(subscriber => subscriber(aborted, settledKey));\n  }\n  subscribe(fn) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n  async resolveData(signal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise(resolve => {\n        this.subscribe(aborted => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n  get unwrappedData() {\n    invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n    return Object.entries(this.data).reduce((acc, _ref3) => {\n      let [key, value] = _ref3;\n      return Object.assign(acc, {\n        [key]: unwrapTrackedPromise(value)\n      });\n    }, {});\n  }\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\nconst defer = function defer(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  return new DeferredData(data, responseInit);\n};\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nconst redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers\n  }));\n};\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nconst redirectDocument = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n *\n * We don't export the class for public use since it's an implementation\n * detail, but we export the interface above so folks can build their own\n * abstractions around instances via isRouteErrorResponse()\n */\nclass ErrorResponseImpl {\n  constructor(status, statusText, data, internal) {\n    if (internal === void 0) {\n      internal = false;\n    }\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nfunction isRouteErrorResponse(error) {\n  return error != null && typeof error.status === \"number\" && typeof error.statusText === \"string\" && typeof error.internal === \"boolean\" && \"data\" in error;\n}\n\nconst validMutationMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nconst validMutationMethods = new Set(validMutationMethodsArr);\nconst validRequestMethodsArr = [\"get\", ...validMutationMethodsArr];\nconst validRequestMethods = new Set(validRequestMethodsArr);\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\nconst IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst IDLE_BLOCKER = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined\n};\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\nconst defaultMapRouteProperties = route => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary)\n});\nconst TRANSITIONS_STORAGE_KEY = \"remix-router-transitions\";\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a router and listen to history POP navigations\n */\nfunction createRouter(init) {\n  const routerWindow = init.window ? init.window : typeof window !== \"undefined\" ? window : undefined;\n  const isBrowser = typeof routerWindow !== \"undefined\" && typeof routerWindow.document !== \"undefined\" && typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  let mapRouteProperties;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Routes keyed by ID\n  let manifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(init.routes, mapRouteProperties, undefined, manifest);\n  let inFlightDataRoutes;\n  let basename = init.basename || \"/\";\n  // Config driven behavior flags\n  let future = _extends({\n    v7_fetcherPersist: false,\n    v7_normalizeFormMethod: false,\n    v7_partialHydration: false,\n    v7_prependBasename: false,\n    v7_relativeSplatPath: false\n  }, init.future);\n  // Cleanup function for history\n  let unlistenHistory = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors = null;\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = {\n      [route.id]: error\n    };\n  }\n  let initialized;\n  let hasLazyRoutes = initialMatches.some(m => m.route.lazy);\n  let hasLoaders = initialMatches.some(m => m.route.loader);\n  if (hasLazyRoutes) {\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    initialized = false;\n  } else if (!hasLoaders) {\n    // If we've got no loaders to run, then we're good to go\n    initialized = true;\n  } else if (future.v7_partialHydration) {\n    // If partial hydration is enabled, we're initialized so long as we were\n    // provided with hydrationData for every route with a loader, and no loaders\n    // were marked for explicit hydration\n    let loaderData = init.hydrationData ? init.hydrationData.loaderData : null;\n    let errors = init.hydrationData ? init.hydrationData.errors : null;\n    initialized = initialMatches.every(m => m.route.loader && m.route.loader.hydrate !== true && (loaderData && loaderData[m.route.id] !== undefined || errors && errors[m.route.id] !== undefined));\n  } else {\n    // Without partial hydration - we're initialized if we were provided any\n    // hydrationData - which is expected to be complete\n    initialized = init.hydrationData != null;\n  }\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map()\n  };\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction = Action.Pop;\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n  // AbortController for the active navigation\n  let pendingNavigationController;\n  // Should the current navigation enable document.startViewTransition?\n  let pendingViewTransitionEnabled = false;\n  // Store applied view transitions so we can apply them on POP\n  let appliedViewTransitions = new Map();\n  // Cleanup function for persisting applied transitions to sessionStorage\n  let removePageHideEventListener = null;\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes = [];\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads = [];\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map();\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map();\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set();\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map();\n  // Ref-count mounted fetchers so we know when it's ok to clean them up\n  let activeFetchers = new Map();\n  // Fetchers that have requested a delete when using v7_fetcherPersist,\n  // they'll be officially removed after they return to idle\n  let deletedFetchers = new Set();\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map();\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map();\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let ignoreNextHistoryUpdate = false;\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(_ref => {\n      let {\n        action: historyAction,\n        location,\n        delta\n      } = _ref;\n      // Ignore this event if it was just us resetting the URL from a\n      // blocked POP navigation\n      if (ignoreNextHistoryUpdate) {\n        ignoreNextHistoryUpdate = false;\n        return;\n      }\n      warning(blockerFunctions.size === 0 || delta != null, \"You are trying to use a blocker on a POP navigation to a location \" + \"that was not created by @remix-run/router. This will fail silently in \" + \"production. This can happen if you are navigating outside the router \" + \"via `window.history.pushState`/`window.location.hash` instead of using \" + \"router navigation APIs.  This can also happen if you are using \" + \"createHashRouter and the user manually changes the URL.\");\n      let blockerKey = shouldBlockNavigation({\n        currentLocation: state.location,\n        nextLocation: location,\n        historyAction\n      });\n      if (blockerKey && delta != null) {\n        // Restore the URL to match the current UI, but don't update router state\n        ignoreNextHistoryUpdate = true;\n        init.history.go(delta * -1);\n        // Put the blocker into a blocked state\n        updateBlocker(blockerKey, {\n          state: \"blocked\",\n          location,\n          proceed() {\n            updateBlocker(blockerKey, {\n              state: \"proceeding\",\n              proceed: undefined,\n              reset: undefined,\n              location\n            });\n            // Re-do the same POP navigation we just blocked\n            init.history.go(delta);\n          },\n          reset() {\n            let blockers = new Map(state.blockers);\n            blockers.set(blockerKey, IDLE_BLOCKER);\n            updateState({\n              blockers\n            });\n          }\n        });\n        return;\n      }\n      return startNavigation(historyAction, location);\n    });\n    if (isBrowser) {\n      // FIXME: This feels gross.  How can we cleanup the lines between\n      // scrollRestoration/appliedTransitions persistance?\n      restoreAppliedTransitions(routerWindow, appliedViewTransitions);\n      let _saveAppliedTransitions = () => persistAppliedTransitions(routerWindow, appliedViewTransitions);\n      routerWindow.addEventListener(\"pagehide\", _saveAppliedTransitions);\n      removePageHideEventListener = () => routerWindow.removeEventListener(\"pagehide\", _saveAppliedTransitions);\n    }\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location, {\n        initialHydration: true\n      });\n    }\n    return router;\n  }\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    if (removePageHideEventListener) {\n      removePageHideEventListener();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n  // Subscribe to state updates for the router\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n  // Update our state and notify the calling context of the change\n  function updateState(newState, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    state = _extends({}, state, newState);\n    // Prep fetcher cleanup so we can tell the UI which fetcher data entries\n    // can be removed\n    let completedFetchers = [];\n    let deletedFetchersKeys = [];\n    if (future.v7_fetcherPersist) {\n      state.fetchers.forEach((fetcher, key) => {\n        if (fetcher.state === \"idle\") {\n          if (deletedFetchers.has(key)) {\n            // Unmounted from the UI and can be totally removed\n            deletedFetchersKeys.push(key);\n          } else {\n            // Returned to idle but still mounted in the UI, so semi-remains for\n            // revalidations and such\n            completedFetchers.push(key);\n          }\n        }\n      });\n    }\n    // Iterate over a local copy so that if flushSync is used and we end up\n    // removing and adding a new subscriber due to the useCallback dependencies,\n    // we don't get ourselves into a loop calling the new subscriber immediately\n    [...subscribers].forEach(subscriber => subscriber(state, {\n      deletedFetchers: deletedFetchersKeys,\n      unstable_viewTransitionOpts: opts.viewTransitionOpts,\n      unstable_flushSync: opts.flushSync === true\n    }));\n    // Remove idle fetchers from state since we only care about in-flight fetchers.\n    if (future.v7_fetcherPersist) {\n      completedFetchers.forEach(key => state.fetchers.delete(key));\n      deletedFetchersKeys.forEach(key => deleteFetcher(key));\n    }\n  }\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(location, newState, _temp) {\n    var _location$state, _location$state2;\n    let {\n      flushSync\n    } = _temp === void 0 ? {} : _temp;\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === \"loading\" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;\n    let actionData;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData;\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    let blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    }\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n    if (isUninterruptedRevalidation) ; else if (pendingAction === Action.Pop) ; else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    }\n    let viewTransitionOpts;\n    // On POP, enable transitions if they were enabled on the original navigation\n    if (pendingAction === Action.Pop) {\n      // Forward takes precedence so they behave like the original navigation\n      let priorPaths = appliedViewTransitions.get(state.location.pathname);\n      if (priorPaths && priorPaths.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: state.location,\n          nextLocation: location\n        };\n      } else if (appliedViewTransitions.has(location.pathname)) {\n        // If we don't have a previous forward nav, assume we're popping back to\n        // the new location and enable if that location previously enabled\n        viewTransitionOpts = {\n          currentLocation: location,\n          nextLocation: state.location\n        };\n      }\n    } else if (pendingViewTransitionEnabled) {\n      // Store the applied transition on PUSH/REPLACE\n      let toPaths = appliedViewTransitions.get(state.location.pathname);\n      if (toPaths) {\n        toPaths.add(location.pathname);\n      } else {\n        toPaths = new Set([location.pathname]);\n        appliedViewTransitions.set(state.location.pathname, toPaths);\n      }\n      viewTransitionOpts = {\n        currentLocation: state.location,\n        nextLocation: location\n      };\n    }\n    updateState(_extends({}, newState, {\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset,\n      blockers\n    }), {\n      viewTransitionOpts,\n      flushSync: flushSync === true\n    });\n    // Reset stateful navigation vars\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    pendingViewTransitionEnabled = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(to, opts) {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, to, future.v7_relativeSplatPath, opts == null ? void 0 : opts.fromRouteId, opts == null ? void 0 : opts.relative);\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, false, normalizedPath, opts);\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = _extends({}, nextLocation, init.history.encodeLocation(nextLocation));\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n    let historyAction = Action.Push;\n    if (userReplace === true) {\n      historyAction = Action.Replace;\n    } else if (userReplace === false) ; else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = Action.Replace;\n    }\n    let preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction\n    });\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey, IDLE_BLOCKER);\n          updateState({\n            blockers\n          });\n        }\n      });\n      return;\n    }\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n      enableViewTransition: opts && opts.unstable_viewTransition,\n      flushSync\n    });\n  }\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    });\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    }\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  }\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(historyAction, location, opts) {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true;\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n    let flushSync = (opts && opts.flushSync) === true;\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(routesToUse);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error\n        }\n      }, {\n        flushSync\n      });\n      return;\n    }\n    // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial load will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n    if (state.initialized && !isRevalidationRequired && isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {\n      completeNavigation(location, {\n        matches\n      }, {\n        flushSync\n      });\n      return;\n    }\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);\n    let pendingActionData;\n    let pendingError;\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError\n      };\n    } else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(request, location, opts.submission, matches, {\n        replace: opts.replace,\n        flushSync\n      });\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n      flushSync = false;\n      // Create a GET request for the loaders\n      request = new Request(request.url, {\n        signal: request.signal\n      });\n    }\n    // Call loaders\n    let {\n      shortCircuited,\n      loaderData,\n      errors\n    } = await handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.fetcherSubmission, opts && opts.replace, opts && opts.initialHydration === true, flushSync, pendingActionData, pendingError);\n    if (shortCircuited) {\n      return;\n    }\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n    completeNavigation(location, _extends({\n      matches\n    }, pendingActionData ? {\n      actionData: pendingActionData\n    } : {}, {\n      loaderData,\n      errors\n    }));\n  }\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(request, location, submission, matches, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    interruptActiveLoads();\n    // Put us in a submitting state\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({\n      navigation\n    }, {\n      flushSync: opts.flushSync === true\n    });\n    // Call our action and get the result\n    let result;\n    let actionMatch = getTargetMatch(matches, location);\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id\n        })\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath);\n      if (request.signal.aborted) {\n        return {\n          shortCircuited: true\n        };\n      }\n    }\n    if (isRedirectResult(result)) {\n      let replace;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace = result.location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(state, result, {\n        submission,\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = Action.Push;\n      }\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: {\n          [boundaryMatch.route.id]: result.error\n        }\n      };\n    }\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n    return {\n      pendingActionData: {\n        [actionMatch.route.id]: result.data\n      }\n    };\n  }\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(request, location, matches, overrideNavigation, submission, fetcherSubmission, replace, initialHydration, flushSync, pendingActionData, pendingError) {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation || getLoadingNavigation(location, submission);\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission = submission || fetcherSubmission || getSubmissionFromNavigation(loadingNavigation);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, activeSubmission, location, future.v7_partialHydration && initialHydration === true, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionData, pendingError);\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(routeId => !(matches && matches.some(m => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some(m => m.route.id === routeId));\n    pendingNavigationLoadId = ++incrementingLoadId;\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(location, _extends({\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null\n      }, pendingActionData ? {\n        actionData: pendingActionData\n      } : {}, updatedFetchers ? {\n        fetchers: new Map(state.fetchers)\n      } : {}), {\n        flushSync\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    // If we have partialHydration enabled, then don't update the state for the\n    // initial data load since iot's not a \"navigation\"\n    if (!isUninterruptedRevalidation && (!future.v7_partialHydration || !initialHydration)) {\n      revalidatingFetchers.forEach(rf => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher = getLoadingFetcher(undefined, fetcher ? fetcher.data : undefined);\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState(_extends({\n        navigation: loadingNavigation\n      }, actionData ? Object.keys(actionData).length === 0 ? {\n        actionData: null\n      } : {\n        actionData\n      } : {}, revalidatingFetchers.length > 0 ? {\n        fetchers: new Map(state.fetchers)\n      } : {}), {\n        flushSync\n      });\n    }\n    revalidatingFetchers.forEach(rf => {\n      if (fetchControllers.has(rf.key)) {\n        abortFetcher(rf.key);\n      }\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(f => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);\n    if (request.signal.aborted) {\n      return {\n        shortCircuited: true\n      };\n    }\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n    revalidatingFetchers.forEach(rf => fetchControllers.delete(rf.key));\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey = revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      await startRedirectNavigation(state, redirect.result, {\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    // Process and commit output from loaders\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds);\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe(aborted => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers = updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n    return _extends({\n      loaderData,\n      errors\n    }, shouldUpdateFetchers ? {\n      fetchers: new Map(state.fetchers)\n    } : {});\n  }\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, href, future.v7_relativeSplatPath, routeId, opts == null ? void 0 : opts.relative);\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: normalizedPath\n      }), {\n        flushSync\n      });\n      return;\n    }\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, true, normalizedPath, opts);\n    if (error) {\n      setFetcherError(key, routeId, error, {\n        flushSync\n      });\n      return;\n    }\n    let match = getTargetMatch(matches, path);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, flushSync, submission);\n      return;\n    }\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, {\n      routeId,\n      path\n    });\n    handleFetcherLoader(key, routeId, path, match, matches, flushSync, submission);\n  }\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(key, routeId, path, match, requestMatches, flushSync, submission) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n    if (!match.route.action && !match.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId\n      });\n      setFetcherError(key, routeId, error, {\n        flushSync\n      });\n      return;\n    }\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {\n      flushSync\n    });\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let actionResult = await callLoaderOrAction(\"action\", fetchRequest, match, requestMatches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath);\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n    // When using v7_fetcherPersist, we don't want errors bubbling up to the UI\n    // or redirects processed for unmounted fetchers so we just revert them to\n    // idle\n    if (future.v7_fetcherPersist && deletedFetchers.has(key)) {\n      if (isRedirectResult(actionResult) || isErrorResult(actionResult)) {\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      }\n      // Let SuccessResult's fall through for revalidation\n    } else {\n      if (isRedirectResult(actionResult)) {\n        fetchControllers.delete(key);\n        if (pendingNavigationLoadId > originatingLoadId) {\n          // A new navigation was kicked off after our action started, so that\n          // should take precedence over this redirect navigation.  We already\n          // set isRevalidationRequired so all loaders for the new route should\n          // fire unless opted out via shouldRevalidate\n          updateFetcherState(key, getDoneFetcher(undefined));\n          return;\n        } else {\n          fetchRedirectIds.add(key);\n          updateFetcherState(key, getLoadingFetcher(submission));\n          return startRedirectNavigation(state, actionResult, {\n            fetcherSubmission: submission\n          });\n        }\n      }\n      // Process any non-redirect errors thrown\n      if (isErrorResult(actionResult)) {\n        setFetcherError(key, routeId, actionResult.error);\n        return;\n      }\n    }\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches = state.navigation.state !== \"idle\" ? matchRoutes(routesToUse, state.navigation.location, basename) : state.matches;\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, submission, nextLocation, false, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, {\n      [match.route.id]: actionResult.data\n    }, undefined // No need to send through errors since we short circuit above\n    );\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers.filter(rf => rf.key !== key).forEach(rf => {\n      let staleKey = rf.key;\n      let existingFetcher = state.fetchers.get(staleKey);\n      let revalidatingFetcher = getLoadingFetcher(undefined, existingFetcher ? existingFetcher.data : undefined);\n      state.fetchers.set(staleKey, revalidatingFetcher);\n      if (fetchControllers.has(staleKey)) {\n        abortFetcher(staleKey);\n      }\n      if (rf.controller) {\n        fetchControllers.set(staleKey, rf.controller);\n      }\n    });\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(rf => abortFetcher(rf.key));\n    abortController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n    if (abortController.signal.aborted) {\n      return;\n    }\n    abortController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(r => fetchControllers.delete(r.key));\n    let redirect = findRedirect(results);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey = revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      return startRedirectNavigation(state, redirect.result);\n    }\n    // Process and commit output from loaders\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds);\n    // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n    abortStaleFetchLoads(loadId);\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors),\n        fetchers: new Map(state.fetchers)\n      });\n      isRevalidationRequired = false;\n    }\n  }\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(key, routeId, path, match, matches, flushSync, submission) {\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getLoadingFetcher(submission, existingFetcher ? existingFetcher.data : undefined), {\n      flushSync\n    });\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let result = await callLoaderOrAction(\"loader\", fetchRequest, match, matches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath);\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result = (await resolveDeferredData(result, fetchRequest.signal, true)) || result;\n    }\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n    // We don't want errors bubbling up or redirects followed for unmounted\n    // fetchers, so short circuit here if it was removed from the UI\n    if (deletedFetchers.has(key)) {\n      updateFetcherState(key, getDoneFetcher(undefined));\n      return;\n    }\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our loader started, so that\n        // should take precedence over this redirect navigation\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(state, result);\n        return;\n      }\n    }\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      setFetcherError(key, routeId, result.error);\n      return;\n    }\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n    // Put the fetcher back into an idle state\n    updateFetcherState(key, getDoneFetcher(result.data));\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(state, redirect, _temp2) {\n    let {\n      submission,\n      fetcherSubmission,\n      replace\n    } = _temp2 === void 0 ? {} : _temp2;\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n    let redirectLocation = createLocation(state.location, redirect.location, {\n      _isRedirect: true\n    });\n    invariant(redirectLocation, \"Expected a location on the redirect navigation\");\n    if (isBrowser) {\n      let isDocumentReload = false;\n      if (redirect.reloadDocument) {\n        // Hard reload if the response contained X-Remix-Reload-Document\n        isDocumentReload = true;\n      } else if (ABSOLUTE_URL_REGEX.test(redirect.location)) {\n        const url = init.history.createURL(redirect.location);\n        isDocumentReload =\n        // Hard reload if it's an absolute URL to a new origin\n        url.origin !== routerWindow.location.origin ||\n        // Hard reload if it's an absolute URL that does not match our basename\n        stripBasename(url.pathname, basename) == null;\n      }\n      if (isDocumentReload) {\n        if (replace) {\n          routerWindow.location.replace(redirect.location);\n        } else {\n          routerWindow.location.assign(redirect.location);\n        }\n        return;\n      }\n    }\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n    let redirectHistoryAction = replace === true ? Action.Replace : Action.Push;\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let {\n      formMethod,\n      formAction,\n      formEncType\n    } = state.navigation;\n    if (!submission && !fetcherSubmission && formMethod && formAction && formEncType) {\n      submission = getSubmissionFromNavigation(state.navigation);\n    }\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    let activeSubmission = submission || fetcherSubmission;\n    if (redirectPreserveMethodStatusCodes.has(redirect.status) && activeSubmission && isMutationMethod(activeSubmission.formMethod)) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: _extends({}, activeSubmission, {\n          formAction: redirect.location\n        }),\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    } else {\n      // If we have a navigation submission, we will preserve it through the\n      // redirect navigation\n      let overrideNavigation = getLoadingNavigation(redirectLocation, submission);\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Send fetcher submissions through for shouldRevalidate\n        fetcherSubmission,\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    }\n  }\n  async function callLoadersAndMaybeResolveData(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath)), ...fetchersToLoad.map(f => {\n      if (f.matches && f.match && f.controller) {\n        return callLoaderOrAction(\"loader\", createClientSideRequest(init.history, f.path, f.controller.signal), f.match, f.matches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath);\n      } else {\n        let error = {\n          type: ResultType.error,\n          error: getInternalRouterError(404, {\n            pathname: f.path\n          })\n        };\n        return error;\n      }\n    })]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n    await Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, loaderResults.map(() => request.signal), false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(f => f.match), fetcherResults, fetchersToLoad.map(f => f.controller ? f.controller.signal : null), true)]);\n    return {\n      results,\n      loaderResults,\n      fetcherResults\n    };\n  }\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n  function updateFetcherState(key, fetcher, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }, {\n      flushSync: (opts && opts.flushSync) === true\n    });\n  }\n  function setFetcherError(key, routeId, error, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error\n      },\n      fetchers: new Map(state.fetchers)\n    }, {\n      flushSync: (opts && opts.flushSync) === true\n    });\n  }\n  function getFetcher(key) {\n    if (future.v7_fetcherPersist) {\n      activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);\n      // If this fetcher was previously marked for deletion, unmark it since we\n      // have a new instance\n      if (deletedFetchers.has(key)) {\n        deletedFetchers.delete(key);\n      }\n    }\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n  function deleteFetcher(key) {\n    let fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (fetchControllers.has(key) && !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    deletedFetchers.delete(key);\n    state.fetchers.delete(key);\n  }\n  function deleteFetcherAndUpdateState(key) {\n    if (future.v7_fetcherPersist) {\n      let count = (activeFetchers.get(key) || 0) - 1;\n      if (count <= 0) {\n        activeFetchers.delete(key);\n        deletedFetchers.add(key);\n      } else {\n        activeFetchers.set(key, count);\n      }\n    } else {\n      deleteFetcher(key);\n    }\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, \"Expected fetcher: \" + key);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n  function getBlocker(key, fn) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n    return blocker;\n  }\n  function deleteBlocker(key) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key, newBlocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(blocker.state === \"unblocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"proceeding\" || blocker.state === \"blocked\" && newBlocker.state === \"unblocked\" || blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\", \"Invalid blocker state transition: \" + blocker.state + \" -> \" + newBlocker.state);\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({\n      blockers\n    });\n  }\n  function shouldBlockNavigation(_ref2) {\n    let {\n      currentLocation,\n      nextLocation,\n      historyAction\n    } = _ref2;\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({\n      currentLocation,\n      nextLocation,\n      historyAction\n    })) {\n      return blockerKey;\n    }\n  }\n  function cancelActiveDeferreds(predicate) {\n    let cancelledRouteIds = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null;\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n  function getScrollKey(location, matches) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(location, matches.map(m => convertRouteMatchToUiMatch(m, state.loaderData)));\n      return key || location.key;\n    }\n    return location.key;\n  }\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n  function _internalSetRoutes(newRoutes) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(newRoutes, mapRouteProperties, undefined, manifest);\n  }\n  router = {\n    get basename() {\n      return basename;\n    },\n    get future() {\n      return future;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    get window() {\n      return routerWindow;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: to => init.history.createHref(to),\n    encodeLocation: to => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher: deleteFetcherAndUpdateState,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes\n  };\n  return router;\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\nconst UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\nfunction createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to createStaticHandler\");\n  let manifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties;\n  if (opts != null && opts.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts != null && opts.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Config driven behavior flags\n  let future = _extends({\n    v7_relativeSplatPath: false,\n    v7_throwAbortReason: false\n  }, opts ? opts.future : null);\n  let dataRoutes = convertRoutesToDataRoutes(routes, mapRouteProperties, undefined, manifest);\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  async function query(request, _temp3) {\n    let {\n      requestContext\n    } = _temp3 === void 0 ? {} : _temp3;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, {\n        method\n      });\n      let {\n        matches: methodNotAllowedMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    let result = await queryImpl(request, location, matches, requestContext);\n    if (isResponse(result)) {\n      return result;\n    }\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return _extends({\n      location,\n      basename\n    }, result);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n  async function queryRoute(request, _temp4) {\n    let {\n      routeId,\n      requestContext\n    } = _temp4 === void 0 ? {} : _temp4;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, {\n        method\n      });\n    } else if (!matches) {\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let match = routeId ? matches.find(m => m.route.id === routeId) : getTargetMatch(matches, location);\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let result = await queryImpl(request, location, matches, requestContext, match);\n    if (isResponse(result)) {\n      return result;\n    }\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n    if (result.loaderData) {\n      var _result$activeDeferre;\n      let data = Object.values(result.loaderData)[0];\n      if ((_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n    return undefined;\n  }\n  async function queryImpl(request, location, matches, requestContext, routeMatch) {\n    invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, routeMatch != null);\n        return result;\n      }\n      let result = await loadRouteData(request, matches, requestContext, routeMatch);\n      return isResponse(result) ? result : _extends({}, result, {\n        actionData: null,\n        actionHeaders: {}\n      });\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error) {\n          throw e.response;\n        }\n        return e.response;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n  async function submit(request, matches, actionMatch, requestContext, isRouteRequest) {\n    let result;\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath, {\n        isStaticRequest: true,\n        isRouteRequest,\n        requestContext\n      });\n      if (request.signal.aborted) {\n        throwStaticHandlerAbortedError(request, isRouteRequest, future);\n      }\n    }\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location\n        }\n      });\n    }\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error\n      };\n    }\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: {\n          [actionMatch.route.id]: result.data\n        },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(request, matches, requestContext, undefined, {\n        [boundaryMatch.route.id]: result.error\n      });\n      // action status codes take precedence over loader status codes\n      return _extends({}, context, {\n        statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,\n        actionData: null,\n        actionHeaders: _extends({}, result.headers ? {\n          [actionMatch.route.id]: result.headers\n        } : {})\n      });\n    }\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n    return _extends({}, context, result.statusCode ? {\n      statusCode: result.statusCode\n    } : {}, {\n      actionData: {\n        [actionMatch.route.id]: result.data\n      },\n      actionHeaders: _extends({}, result.headers ? {\n        [actionMatch.route.id]: result.headers\n      } : {})\n    });\n  }\n  async function loadRouteData(request, matches, requestContext, routeMatch, pendingActionError) {\n    let isRouteRequest = routeMatch != null;\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (isRouteRequest && !(routeMatch != null && routeMatch.route.loader) && !(routeMatch != null && routeMatch.route.lazy)) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch == null ? void 0 : routeMatch.route.id\n      });\n    }\n    let requestMatches = routeMatch ? [routeMatch] : getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]);\n    let matchesToLoad = requestMatches.filter(m => m.route.loader || m.route.lazy);\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce((acc, m) => Object.assign(acc, {\n          [m.route.id]: null\n        }), {}),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath, {\n      isStaticRequest: true,\n      isRouteRequest,\n      requestContext\n    }))]);\n    if (request.signal.aborted) {\n      throwStaticHandlerAbortedError(request, isRouteRequest, future);\n    }\n    // Process and commit output from loaders\n    let activeDeferreds = new Map();\n    let context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError, activeDeferreds);\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set(matchesToLoad.map(match => match.route.id));\n    matches.forEach(match => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n    return _extends({}, context, {\n      matches,\n      activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null\n    });\n  }\n  return {\n    dataRoutes,\n    query,\n    queryRoute\n  };\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nfunction getStaticContextFromError(routes, context, error) {\n  let newContext = _extends({}, context, {\n    statusCode: isRouteErrorResponse(error) ? error.status : 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error\n    }\n  });\n  return newContext;\n}\nfunction throwStaticHandlerAbortedError(request, isRouteRequest, future) {\n  if (future.v7_throwAbortReason && request.signal.reason !== undefined) {\n    throw request.signal.reason;\n  }\n  let method = isRouteRequest ? \"queryRoute\" : \"query\";\n  throw new Error(method + \"() call aborted: \" + request.method + \" \" + request.url);\n}\nfunction isSubmissionNavigation(opts) {\n  return opts != null && (\"formData\" in opts && opts.formData != null || \"body\" in opts && opts.body !== undefined);\n}\nfunction normalizeTo(location, matches, basename, prependBasename, to, v7_relativeSplatPath, fromRouteId, relative) {\n  let contextualMatches;\n  let activeRouteMatch;\n  if (fromRouteId) {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n  // Resolve the relative path\n  let path = resolveTo(to ? to : \".\", getResolveToMatches(contextualMatches, v7_relativeSplatPath), stripBasename(location.pathname, basename) || location.pathname, relative === \"path\");\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n  // Add an ?index param for matched index routes if we don't already have one\n  if ((to == null || to === \"\" || to === \".\") && activeRouteMatch && activeRouteMatch.route.index && !hasNakedIndexQuery(path.search)) {\n    path.search = path.search ? path.search.replace(/^\\?/, \"?index&\") : \"?index\";\n  }\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n  return createPath(path);\n}\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(normalizeFormMethod, isFetcher, path, opts) {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path\n    };\n  }\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  }\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, {\n      type: \"invalid-body\"\n    })\n  });\n  // Create a Submission on non-GET navigations\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod ? rawFormMethod.toUpperCase() : rawFormMethod.toLowerCase();\n  let formAction = stripHashFromPath(path);\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      let text = typeof opts.body === \"string\" ? opts.body : opts.body instanceof FormData || opts.body instanceof URLSearchParams ?\n      // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n      Array.from(opts.body.entries()).reduce((acc, _ref3) => {\n        let [name, value] = _ref3;\n        return \"\" + acc + name + \"=\" + value + \"\\n\";\n      }, \"\") : String(opts.body);\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text\n        }\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      try {\n        let json = typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined\n          }\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n  invariant(typeof FormData === \"function\", \"FormData is not available in this environment\");\n  let searchParams;\n  let formData;\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n  let submission = {\n    formMethod,\n    formAction,\n    formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined\n  };\n  if (isMutationMethod(submission.formMethod)) {\n    return {\n      path,\n      submission\n    };\n  }\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = \"?\" + searchParams;\n  return {\n    path: createPath(parsedPath),\n    submission\n  };\n}\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex(m => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\nfunction getMatchesToLoad(history, state, matches, submission, location, isInitialLoad, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionData, pendingError) {\n  let actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    let {\n      route\n    } = match;\n    if (route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n    if (route.loader == null) {\n      return false;\n    }\n    if (isInitialLoad) {\n      if (route.loader.hydrate) {\n        return true;\n      }\n      return state.loaderData[route.id] === undefined && (\n      // Don't re-run if the loader ran and threw an error\n      !state.errors || state.errors[route.id] === undefined);\n    }\n    // Always call the loader on new route instances and pending defer cancellations\n    if (isNewLoader(state.loaderData, state.matches[index], match) || cancelledDeferredRoutes.some(id => id === match.route.id)) {\n      return true;\n    }\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n    return shouldRevalidateLoader(match, _extends({\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params\n    }, submission, {\n      actionResult,\n      defaultShouldRevalidate:\n      // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n      isRevalidationRequired ||\n      // Clicked the same link, resubmitted a GET form\n      currentUrl.pathname + currentUrl.search === nextUrl.pathname + nextUrl.search ||\n      // Search params affect all loaders\n      currentUrl.search !== nextUrl.search || isNewRouteInstance(currentRouteMatch, nextRouteMatch)\n    }));\n  });\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate:\n    //  - on initial load (shouldn't be any fetchers then anyway)\n    //  - if fetcher won't be present in the subsequent render\n    //    - no longer matches the URL (v7_fetcherPersist=false)\n    //    - was unmounted but persisted due to v7_fetcherPersist=true\n    if (isInitialLoad || !matches.some(m => m.route.id === f.routeId) || deletedFetchers.has(key)) {\n      return;\n    }\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null\n      });\n      return;\n    }\n    // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n    let fetcher = state.fetchers.get(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n    let shouldRevalidate = false;\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.includes(key)) {\n      // Always revalidate if the fetcher was cancelled\n      shouldRevalidate = true;\n    } else if (fetcher && fetcher.state !== \"idle\" && fetcher.data === undefined) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, _extends({\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params\n      }, submission, {\n        actionResult,\n        defaultShouldRevalidate: isRevalidationRequired\n      }));\n    }\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController()\n      });\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew =\n  // [a] -> [a, b]\n  !currentMatch ||\n  // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id;\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\nfunction isNewRouteInstance(currentMatch, match) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath != null && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\nfunction shouldRevalidateLoader(loaderMatch, arg) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n  return arg.defaultShouldRevalidate;\n}\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(route, mapRouteProperties, manifest) {\n  if (!route.lazy) {\n    return;\n  }\n  let lazyRoute = await route.lazy();\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue = routeToUpdate[lazyRouteProperty];\n    let isPropertyStaticallyDefined = staticRouteValue !== undefined &&\n    // This property isn't static since it should always be updated based\n    // on the route updates\n    lazyRouteProperty !== \"hasErrorBoundary\";\n    warning(!isPropertyStaticallyDefined, \"Route \\\"\" + routeToUpdate.id + \"\\\" has a static property \\\"\" + lazyRouteProperty + \"\\\" \" + \"defined but its lazy function is also returning a value for this property. \" + (\"The lazy route property \\\"\" + lazyRouteProperty + \"\\\" will be ignored.\"));\n    if (!isPropertyStaticallyDefined && !immutableRouteKeys.has(lazyRouteProperty)) {\n      routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty];\n    }\n  }\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, _extends({}, mapRouteProperties(routeToUpdate), {\n    lazy: undefined\n  }));\n}\nasync function callLoaderOrAction(type, request, match, matches, manifest, mapRouteProperties, basename, v7_relativeSplatPath, opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n  let resultType;\n  let result;\n  let onReject;\n  let runHandler = handler => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject;\n    let abortPromise = new Promise((_, r) => reject = r);\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n    return Promise.race([handler({\n      request,\n      params: match.params,\n      context: opts.requestContext\n    }), abortPromise]);\n  };\n  try {\n    let handler = match.route[type];\n    if (match.route.lazy) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let handlerError;\n        let values = await Promise.all([\n        // If the handler throws, don't let it immediately bubble out,\n        // since we need to let the lazy() execution finish so we know if this\n        // route has a boundary that can handle the error\n        runHandler(handler).catch(e => {\n          handlerError = e;\n        }), loadLazyRouteModule(match.route, mapRouteProperties, manifest)]);\n        if (handlerError) {\n          throw handlerError;\n        }\n        result = values[0];\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadLazyRouteModule(match.route, mapRouteProperties, manifest);\n        handler = match.route[type];\n        if (handler) {\n          // Handler still run even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return {\n            type: ResultType.data,\n            data: undefined\n          };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n    invariant(result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n  if (isResponse(result)) {\n    let status = result.status;\n    // Process redirects\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\");\n      // Support relative routing in internal redirects\n      if (!ABSOLUTE_URL_REGEX.test(location)) {\n        location = normalizeTo(new URL(request.url), matches.slice(0, matches.indexOf(match) + 1), basename, true, location, v7_relativeSplatPath);\n      } else if (!opts.isStaticRequest) {\n        // Strip off the protocol+origin for same-origin + same-basename absolute\n        // redirects. If this is a static request, we can let it go back to the\n        // browser as-is\n        let currentUrl = new URL(request.url);\n        let url = location.startsWith(\"//\") ? new URL(currentUrl.protocol + location) : new URL(location);\n        let isSameBasename = stripBasename(url.pathname, basename) != null;\n        if (url.origin === currentUrl.origin && isSameBasename) {\n          location = url.pathname + url.search + url.hash;\n        }\n      }\n      // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n      if (opts.isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n        reloadDocument: result.headers.get(\"X-Remix-Reload-Document\") !== null\n      };\n    }\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n    if (opts.isRouteRequest) {\n      let queryRouteResponse = {\n        type: resultType === ResultType.error ? ResultType.error : ResultType.data,\n        response: result\n      };\n      throw queryRouteResponse;\n    }\n    let data;\n    try {\n      let contentType = result.headers.get(\"Content-Type\");\n      // Check between word boundaries instead of startsWith() due to the last\n      // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n      if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n        if (result.body == null) {\n          data = null;\n        } else {\n          data = await result.json();\n        }\n      } else {\n        data = await result.text();\n      }\n    } catch (e) {\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponseImpl(status, result.statusText, data),\n        headers: result.headers\n      };\n    }\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers\n    };\n  }\n  if (resultType === ResultType.error) {\n    return {\n      type: resultType,\n      error: result\n    };\n  }\n  if (isDeferredData(result)) {\n    var _result$init, _result$init2;\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status,\n      headers: ((_result$init2 = result.init) == null ? void 0 : _result$init2.headers) && new Headers(result.init.headers)\n    };\n  }\n  return {\n    type: ResultType.data,\n    data: result\n  };\n}\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(history, location, signal, submission) {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init = {\n    signal\n  };\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let {\n      formMethod,\n      formEncType\n    } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({\n        \"Content-Type\": formEncType\n      });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (formEncType === \"application/x-www-form-urlencoded\" && submission.formData) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n  return new Request(url, init);\n}\nfunction convertFormDataToSearchParams(formData) {\n  let searchParams = new URLSearchParams();\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n  return searchParams;\n}\nfunction convertSearchParamsToFormData(searchParams) {\n  let formData = new FormData();\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n  return formData;\n}\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {\n  // Fill in loaderData/errors from our loaders\n  let loaderData = {};\n  let errors = null;\n  let statusCode;\n  let foundError = false;\n  let loaderHeaders = {};\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n      errors = errors || {};\n      // Prefer higher error values if lower errors bubble to the same boundary\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      }\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      }\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders\n  };\n}\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  let {\n    loaderData,\n    errors\n  } = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds);\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let {\n      key,\n      match,\n      controller\n    } = revalidatingFetchers[index];\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    let result = fetcherResults[index];\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      continue;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match == null ? void 0 : match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, {\n          [boundaryMatch.route.id]: result.error\n        });\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  return {\n    loaderData,\n    errors\n  };\n}\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  let mergedLoaderData = _extends({}, newLoaderData);\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find(m => m.route.hasErrorBoundary === true) || matches[0];\n}\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.length === 1 ? routes[0] : routes.find(r => r.index || !r.path || r.path === \"/\") || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route\n    }],\n    route\n  };\n}\nfunction getInternalRouterError(status, _temp5) {\n  let {\n    pathname,\n    routeId,\n    method,\n    type\n  } = _temp5 === void 0 ? {} : _temp5;\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n  return new ErrorResponseImpl(status || 500, statusText, new Error(errorMessage), true);\n}\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results) {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return {\n        result,\n        idx: i\n      };\n    }\n  }\n}\nfunction stripHashFromPath(path) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\nfunction isHashChangeOnly(a, b) {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\nfunction isDeferredData(value) {\n  let deferred = value;\n  return deferred && typeof deferred === \"object\" && typeof deferred.data === \"object\" && typeof deferred.subscribe === \"function\" && typeof deferred.cancel === \"function\" && typeof deferred.resolveData === \"function\";\n}\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\nfunction isQueryRouteResponse(obj) {\n  return obj && isResponse(obj.response) && (obj.type === ResultType.data || obj.type === ResultType.error);\n}\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method.toLowerCase());\n}\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method.toLowerCase());\n}\nasync function resolveDeferredResults(currentMatches, matchesToLoad, results, signals, isFetcher, currentLoaderData) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n    let currentMatch = currentMatches.find(m => m.route.id === match.route.id);\n    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      let signal = signals[index];\n      invariant(signal, \"Expected an AbortSignal for revalidating fetcher deferred result\");\n      await resolveDeferredData(result, signal, isFetcher).then(result => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\nasync function resolveDeferredData(result, signal, unwrap) {\n  if (unwrap === void 0) {\n    unwrap = false;\n  }\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n  }\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data\n  };\n}\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(v => v === \"\");\n}\nfunction getTargetMatch(matches, location) {\n  let search = typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\nfunction getSubmissionFromNavigation(navigation) {\n  let {\n    formMethod,\n    formAction,\n    formEncType,\n    text,\n    formData,\n    json\n  } = navigation;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined\n    };\n  }\n}\nfunction getLoadingNavigation(location, submission) {\n  if (submission) {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text\n    };\n    return navigation;\n  } else {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined\n    };\n    return navigation;\n  }\n}\nfunction getSubmittingNavigation(location, submission) {\n  let navigation = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text\n  };\n  return navigation;\n}\nfunction getLoadingFetcher(submission, data) {\n  if (submission) {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data\n    };\n    return fetcher;\n  } else {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data\n    };\n    return fetcher;\n  }\n}\nfunction getSubmittingFetcher(submission, existingFetcher) {\n  let fetcher = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined\n  };\n  return fetcher;\n}\nfunction getDoneFetcher(data) {\n  let fetcher = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data\n  };\n  return fetcher;\n}\nfunction restoreAppliedTransitions(_window, transitions) {\n  try {\n    let sessionPositions = _window.sessionStorage.getItem(TRANSITIONS_STORAGE_KEY);\n    if (sessionPositions) {\n      let json = JSON.parse(sessionPositions);\n      for (let [k, v] of Object.entries(json || {})) {\n        if (v && Array.isArray(v)) {\n          transitions.set(k, new Set(v || []));\n        }\n      }\n    }\n  } catch (e) {\n    // no-op, use default empty object\n  }\n}\nfunction persistAppliedTransitions(_window, transitions) {\n  if (transitions.size > 0) {\n    let json = {};\n    for (let [k, v] of transitions) {\n      json[k] = [...v];\n    }\n    try {\n      _window.sessionStorage.setItem(TRANSITIONS_STORAGE_KEY, JSON.stringify(json));\n    } catch (error) {\n      warning(false, \"Failed to save applied view transitions in sessionStorage (\" + error + \").\");\n    }\n  }\n}\n//#endregion\n\nexport { AbortedDeferredError, Action, IDLE_BLOCKER, IDLE_FETCHER, IDLE_NAVIGATION, UNSAFE_DEFERRED_SYMBOL, DeferredData as UNSAFE_DeferredData, ErrorResponseImpl as UNSAFE_ErrorResponseImpl, convertRouteMatchToUiMatch as UNSAFE_convertRouteMatchToUiMatch, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, getResolveToMatches as UNSAFE_getResolveToMatches, invariant as UNSAFE_invariant, warning as UNSAFE_warning, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, createStaticHandler, defer, generatePath, getStaticContextFromError, getToPathname, isDeferredData, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, redirectDocument, resolvePath, resolveTo, stripBasename };\n//# sourceMappingURL=router.js.map\n","/**\n * React Router DOM v6.22.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { UNSAFE_mapRouteProperties, UNSAFE_DataRouterContext, UNSAFE_DataRouterStateContext, Router, UNSAFE_useRoutesImpl, UNSAFE_NavigationContext, useHref, useResolvedPath, useLocation, useNavigate, createPath, UNSAFE_useRouteId, UNSAFE_RouteContext, useMatches, useNavigation, useBlocker } from 'react-router';\nexport { AbortedDeferredError, Await, MemoryRouter, Navigate, NavigationType, Outlet, Route, Router, Routes, UNSAFE_DataRouterContext, UNSAFE_DataRouterStateContext, UNSAFE_LocationContext, UNSAFE_NavigationContext, UNSAFE_RouteContext, UNSAFE_useRouteId, createMemoryRouter, createPath, createRoutesFromChildren, createRoutesFromElements, defer, generatePath, isRouteErrorResponse, json, matchPath, matchRoutes, parsePath, redirect, redirectDocument, renderMatches, resolvePath, useActionData, useAsyncError, useAsyncValue, useBlocker, useHref, useInRouterContext, useLoaderData, useLocation, useMatch, useMatches, useNavigate, useNavigation, useNavigationType, useOutlet, useOutletContext, useParams, useResolvedPath, useRevalidator, useRouteError, useRouteLoaderData, useRoutes } from 'react-router';\nimport { stripBasename, UNSAFE_warning, createRouter, createBrowserHistory, createHashHistory, UNSAFE_ErrorResponseImpl, UNSAFE_invariant, joinPaths, IDLE_FETCHER, matchPath } from '@remix-run/router';\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\n\nconst defaultMethod = \"get\";\nconst defaultEncType = \"application/x-www-form-urlencoded\";\nfunction isHtmlElement(object) {\n  return object != null && typeof object.tagName === \"string\";\n}\nfunction isButtonElement(object) {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"button\";\n}\nfunction isFormElement(object) {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"form\";\n}\nfunction isInputElement(object) {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"input\";\n}\nfunction isModifiedEvent(event) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\nfunction shouldProcessLinkClick(event, target) {\n  return event.button === 0 && (\n  // Ignore everything but left clicks\n  !target || target === \"_self\") &&\n  // Let browser handle \"target=_blank\" etc.\n  !isModifiedEvent(event) // Ignore clicks with modifier keys\n  ;\n}\n/**\n * Creates a URLSearchParams object using the given initializer.\n *\n * This is identical to `new URLSearchParams(init)` except it also\n * supports arrays as values in the object form of the initializer\n * instead of just strings. This is convenient when you need multiple\n * values for a given key, but don't want to use an array initializer.\n *\n * For example, instead of:\n *\n *   let searchParams = new URLSearchParams([\n *     ['sort', 'name'],\n *     ['sort', 'price']\n *   ]);\n *\n * you can do:\n *\n *   let searchParams = createSearchParams({\n *     sort: ['name', 'price']\n *   });\n */\nfunction createSearchParams(init) {\n  if (init === void 0) {\n    init = \"\";\n  }\n  return new URLSearchParams(typeof init === \"string\" || Array.isArray(init) || init instanceof URLSearchParams ? init : Object.keys(init).reduce((memo, key) => {\n    let value = init[key];\n    return memo.concat(Array.isArray(value) ? value.map(v => [key, v]) : [[key, value]]);\n  }, []));\n}\nfunction getSearchParamsForLocation(locationSearch, defaultSearchParams) {\n  let searchParams = createSearchParams(locationSearch);\n  if (defaultSearchParams) {\n    // Use `defaultSearchParams.forEach(...)` here instead of iterating of\n    // `defaultSearchParams.keys()` to work-around a bug in Firefox related to\n    // web extensions. Relevant Bugzilla tickets:\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1414602\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1023984\n    defaultSearchParams.forEach((_, key) => {\n      if (!searchParams.has(key)) {\n        defaultSearchParams.getAll(key).forEach(value => {\n          searchParams.append(key, value);\n        });\n      }\n    });\n  }\n  return searchParams;\n}\n// One-time check for submitter support\nlet _formDataSupportsSubmitter = null;\nfunction isFormDataSubmitterSupported() {\n  if (_formDataSupportsSubmitter === null) {\n    try {\n      new FormData(document.createElement(\"form\"),\n      // @ts-expect-error if FormData supports the submitter parameter, this will throw\n      0);\n      _formDataSupportsSubmitter = false;\n    } catch (e) {\n      _formDataSupportsSubmitter = true;\n    }\n  }\n  return _formDataSupportsSubmitter;\n}\nconst supportedFormEncTypes = new Set([\"application/x-www-form-urlencoded\", \"multipart/form-data\", \"text/plain\"]);\nfunction getFormEncType(encType) {\n  if (encType != null && !supportedFormEncTypes.has(encType)) {\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, \"\\\"\" + encType + \"\\\" is not a valid `encType` for `<Form>`/`<fetcher.Form>` \" + (\"and will default to \\\"\" + defaultEncType + \"\\\"\")) : void 0;\n    return null;\n  }\n  return encType;\n}\nfunction getFormSubmissionInfo(target, basename) {\n  let method;\n  let action;\n  let encType;\n  let formData;\n  let body;\n  if (isFormElement(target)) {\n    // When grabbing the action from the element, it will have had the basename\n    // prefixed to ensure non-JS scenarios work, so strip it since we'll\n    // re-prefix in the router\n    let attr = target.getAttribute(\"action\");\n    action = attr ? stripBasename(attr, basename) : null;\n    method = target.getAttribute(\"method\") || defaultMethod;\n    encType = getFormEncType(target.getAttribute(\"enctype\")) || defaultEncType;\n    formData = new FormData(target);\n  } else if (isButtonElement(target) || isInputElement(target) && (target.type === \"submit\" || target.type === \"image\")) {\n    let form = target.form;\n    if (form == null) {\n      throw new Error(\"Cannot submit a <button> or <input type=\\\"submit\\\"> without a <form>\");\n    }\n    // <button>/<input type=\"submit\"> may override attributes of <form>\n    // When grabbing the action from the element, it will have had the basename\n    // prefixed to ensure non-JS scenarios work, so strip it since we'll\n    // re-prefix in the router\n    let attr = target.getAttribute(\"formaction\") || form.getAttribute(\"action\");\n    action = attr ? stripBasename(attr, basename) : null;\n    method = target.getAttribute(\"formmethod\") || form.getAttribute(\"method\") || defaultMethod;\n    encType = getFormEncType(target.getAttribute(\"formenctype\")) || getFormEncType(form.getAttribute(\"enctype\")) || defaultEncType;\n    // Build a FormData object populated from a form and submitter\n    formData = new FormData(form, target);\n    // If this browser doesn't support the `FormData(el, submitter)` format,\n    // then tack on the submitter value at the end.  This is a lightweight\n    // solution that is not 100% spec compliant.  For complete support in older\n    // browsers, consider using the `formdata-submitter-polyfill` package\n    if (!isFormDataSubmitterSupported()) {\n      let {\n        name,\n        type,\n        value\n      } = target;\n      if (type === \"image\") {\n        let prefix = name ? name + \".\" : \"\";\n        formData.append(prefix + \"x\", \"0\");\n        formData.append(prefix + \"y\", \"0\");\n      } else if (name) {\n        formData.append(name, value);\n      }\n    }\n  } else if (isHtmlElement(target)) {\n    throw new Error(\"Cannot submit element that is not <form>, <button>, or \" + \"<input type=\\\"submit|image\\\">\");\n  } else {\n    method = defaultMethod;\n    action = null;\n    encType = defaultEncType;\n    body = target;\n  }\n  // Send body for <Form encType=\"text/plain\" so we encode it into text\n  if (formData && encType === \"text/plain\") {\n    body = formData;\n    formData = undefined;\n  }\n  return {\n    action,\n    method: method.toLowerCase(),\n    encType,\n    formData,\n    body\n  };\n}\n\nconst _excluded = [\"onClick\", \"relative\", \"reloadDocument\", \"replace\", \"state\", \"target\", \"to\", \"preventScrollReset\", \"unstable_viewTransition\"],\n  _excluded2 = [\"aria-current\", \"caseSensitive\", \"className\", \"end\", \"style\", \"to\", \"unstable_viewTransition\", \"children\"],\n  _excluded3 = [\"fetcherKey\", \"navigate\", \"reloadDocument\", \"replace\", \"state\", \"method\", \"action\", \"onSubmit\", \"relative\", \"preventScrollReset\", \"unstable_viewTransition\"];\n// HEY YOU! DON'T TOUCH THIS VARIABLE!\n//\n// It is replaced with the proper version at build time via a babel plugin in\n// the rollup config.\n//\n// Export a global property onto the window for React Router detection by the\n// Core Web Vitals Technology Report.  This way they can configure the `wappalyzer`\n// to detect and properly classify live websites as being built with React Router:\n// https://github.com/HTTPArchive/wappalyzer/blob/main/src/technologies/r.json\nconst REACT_ROUTER_VERSION = \"6\";\ntry {\n  window.__reactRouterVersion = REACT_ROUTER_VERSION;\n} catch (e) {\n  // no-op\n}\nfunction createBrowserRouter(routes, opts) {\n  return createRouter({\n    basename: opts == null ? void 0 : opts.basename,\n    future: _extends({}, opts == null ? void 0 : opts.future, {\n      v7_prependBasename: true\n    }),\n    history: createBrowserHistory({\n      window: opts == null ? void 0 : opts.window\n    }),\n    hydrationData: (opts == null ? void 0 : opts.hydrationData) || parseHydrationData(),\n    routes,\n    mapRouteProperties: UNSAFE_mapRouteProperties,\n    window: opts == null ? void 0 : opts.window\n  }).initialize();\n}\nfunction createHashRouter(routes, opts) {\n  return createRouter({\n    basename: opts == null ? void 0 : opts.basename,\n    future: _extends({}, opts == null ? void 0 : opts.future, {\n      v7_prependBasename: true\n    }),\n    history: createHashHistory({\n      window: opts == null ? void 0 : opts.window\n    }),\n    hydrationData: (opts == null ? void 0 : opts.hydrationData) || parseHydrationData(),\n    routes,\n    mapRouteProperties: UNSAFE_mapRouteProperties,\n    window: opts == null ? void 0 : opts.window\n  }).initialize();\n}\nfunction parseHydrationData() {\n  var _window;\n  let state = (_window = window) == null ? void 0 : _window.__staticRouterHydrationData;\n  if (state && state.errors) {\n    state = _extends({}, state, {\n      errors: deserializeErrors(state.errors)\n    });\n  }\n  return state;\n}\nfunction deserializeErrors(errors) {\n  if (!errors) return null;\n  let entries = Object.entries(errors);\n  let serialized = {};\n  for (let [key, val] of entries) {\n    // Hey you!  If you change this, please change the corresponding logic in\n    // serializeErrors in react-router-dom/server.tsx :)\n    if (val && val.__type === \"RouteErrorResponse\") {\n      serialized[key] = new UNSAFE_ErrorResponseImpl(val.status, val.statusText, val.data, val.internal === true);\n    } else if (val && val.__type === \"Error\") {\n      // Attempt to reconstruct the right type of Error (i.e., ReferenceError)\n      if (val.__subType) {\n        let ErrorConstructor = window[val.__subType];\n        if (typeof ErrorConstructor === \"function\") {\n          try {\n            // @ts-expect-error\n            let error = new ErrorConstructor(val.message);\n            // Wipe away the client-side stack trace.  Nothing to fill it in with\n            // because we don't serialize SSR stack traces for security reasons\n            error.stack = \"\";\n            serialized[key] = error;\n          } catch (e) {\n            // no-op - fall through and create a normal Error\n          }\n        }\n      }\n      if (serialized[key] == null) {\n        let error = new Error(val.message);\n        // Wipe away the client-side stack trace.  Nothing to fill it in with\n        // because we don't serialize SSR stack traces for security reasons\n        error.stack = \"\";\n        serialized[key] = error;\n      }\n    } else {\n      serialized[key] = val;\n    }\n  }\n  return serialized;\n}\nconst ViewTransitionContext = /*#__PURE__*/React.createContext({\n  isTransitioning: false\n});\nif (process.env.NODE_ENV !== \"production\") {\n  ViewTransitionContext.displayName = \"ViewTransition\";\n}\nconst FetchersContext = /*#__PURE__*/React.createContext(new Map());\nif (process.env.NODE_ENV !== \"production\") {\n  FetchersContext.displayName = \"Fetchers\";\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Components\n////////////////////////////////////////////////////////////////////////////////\n/**\n  Webpack + React 17 fails to compile on any of the following because webpack\n  complains that `startTransition` doesn't exist in `React`:\n  * import { startTransition } from \"react\"\n  * import * as React from from \"react\";\n    \"startTransition\" in React ? React.startTransition(() => setState()) : setState()\n  * import * as React from from \"react\";\n    \"startTransition\" in React ? React[\"startTransition\"](() => setState()) : setState()\n\n  Moving it to a constant such as the following solves the Webpack/React 17 issue:\n  * import * as React from from \"react\";\n    const START_TRANSITION = \"startTransition\";\n    START_TRANSITION in React ? React[START_TRANSITION](() => setState()) : setState()\n\n  However, that introduces webpack/terser minification issues in production builds\n  in React 18 where minification/obfuscation ends up removing the call of\n  React.startTransition entirely from the first half of the ternary.  Grabbing\n  this exported reference once up front resolves that issue.\n\n  See https://github.com/remix-run/react-router/issues/10579\n*/\nconst START_TRANSITION = \"startTransition\";\nconst startTransitionImpl = React[START_TRANSITION];\nconst FLUSH_SYNC = \"flushSync\";\nconst flushSyncImpl = ReactDOM[FLUSH_SYNC];\nconst USE_ID = \"useId\";\nconst useIdImpl = React[USE_ID];\nfunction startTransitionSafe(cb) {\n  if (startTransitionImpl) {\n    startTransitionImpl(cb);\n  } else {\n    cb();\n  }\n}\nfunction flushSyncSafe(cb) {\n  if (flushSyncImpl) {\n    flushSyncImpl(cb);\n  } else {\n    cb();\n  }\n}\nclass Deferred {\n  constructor() {\n    this.status = \"pending\";\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = value => {\n        if (this.status === \"pending\") {\n          this.status = \"resolved\";\n          resolve(value);\n        }\n      };\n      this.reject = reason => {\n        if (this.status === \"pending\") {\n          this.status = \"rejected\";\n          reject(reason);\n        }\n      };\n    });\n  }\n}\n/**\n * Given a Remix Router instance, render the appropriate UI\n */\nfunction RouterProvider(_ref) {\n  let {\n    fallbackElement,\n    router,\n    future\n  } = _ref;\n  let [state, setStateImpl] = React.useState(router.state);\n  let [pendingState, setPendingState] = React.useState();\n  let [vtContext, setVtContext] = React.useState({\n    isTransitioning: false\n  });\n  let [renderDfd, setRenderDfd] = React.useState();\n  let [transition, setTransition] = React.useState();\n  let [interruption, setInterruption] = React.useState();\n  let fetcherData = React.useRef(new Map());\n  let {\n    v7_startTransition\n  } = future || {};\n  let optInStartTransition = React.useCallback(cb => {\n    if (v7_startTransition) {\n      startTransitionSafe(cb);\n    } else {\n      cb();\n    }\n  }, [v7_startTransition]);\n  let setState = React.useCallback((newState, _ref2) => {\n    let {\n      deletedFetchers,\n      unstable_flushSync: flushSync,\n      unstable_viewTransitionOpts: viewTransitionOpts\n    } = _ref2;\n    deletedFetchers.forEach(key => fetcherData.current.delete(key));\n    newState.fetchers.forEach((fetcher, key) => {\n      if (fetcher.data !== undefined) {\n        fetcherData.current.set(key, fetcher.data);\n      }\n    });\n    let isViewTransitionUnavailable = router.window == null || typeof router.window.document.startViewTransition !== \"function\";\n    // If this isn't a view transition or it's not available in this browser,\n    // just update and be done with it\n    if (!viewTransitionOpts || isViewTransitionUnavailable) {\n      if (flushSync) {\n        flushSyncSafe(() => setStateImpl(newState));\n      } else {\n        optInStartTransition(() => setStateImpl(newState));\n      }\n      return;\n    }\n    // flushSync + startViewTransition\n    if (flushSync) {\n      // Flush through the context to mark DOM elements as transition=ing\n      flushSyncSafe(() => {\n        // Cancel any pending transitions\n        if (transition) {\n          renderDfd && renderDfd.resolve();\n          transition.skipTransition();\n        }\n        setVtContext({\n          isTransitioning: true,\n          flushSync: true,\n          currentLocation: viewTransitionOpts.currentLocation,\n          nextLocation: viewTransitionOpts.nextLocation\n        });\n      });\n      // Update the DOM\n      let t = router.window.document.startViewTransition(() => {\n        flushSyncSafe(() => setStateImpl(newState));\n      });\n      // Clean up after the animation completes\n      t.finished.finally(() => {\n        flushSyncSafe(() => {\n          setRenderDfd(undefined);\n          setTransition(undefined);\n          setPendingState(undefined);\n          setVtContext({\n            isTransitioning: false\n          });\n        });\n      });\n      flushSyncSafe(() => setTransition(t));\n      return;\n    }\n    // startTransition + startViewTransition\n    if (transition) {\n      // Interrupting an in-progress transition, cancel and let everything flush\n      // out, and then kick off a new transition from the interruption state\n      renderDfd && renderDfd.resolve();\n      transition.skipTransition();\n      setInterruption({\n        state: newState,\n        currentLocation: viewTransitionOpts.currentLocation,\n        nextLocation: viewTransitionOpts.nextLocation\n      });\n    } else {\n      // Completed navigation update with opted-in view transitions, let 'er rip\n      setPendingState(newState);\n      setVtContext({\n        isTransitioning: true,\n        flushSync: false,\n        currentLocation: viewTransitionOpts.currentLocation,\n        nextLocation: viewTransitionOpts.nextLocation\n      });\n    }\n  }, [router.window, transition, renderDfd, fetcherData, optInStartTransition]);\n  // Need to use a layout effect here so we are subscribed early enough to\n  // pick up on any render-driven redirects/navigations (useEffect/<Navigate>)\n  React.useLayoutEffect(() => router.subscribe(setState), [router, setState]);\n  // When we start a view transition, create a Deferred we can use for the\n  // eventual \"completed\" render\n  React.useEffect(() => {\n    if (vtContext.isTransitioning && !vtContext.flushSync) {\n      setRenderDfd(new Deferred());\n    }\n  }, [vtContext]);\n  // Once the deferred is created, kick off startViewTransition() to update the\n  // DOM and then wait on the Deferred to resolve (indicating the DOM update has\n  // happened)\n  React.useEffect(() => {\n    if (renderDfd && pendingState && router.window) {\n      let newState = pendingState;\n      let renderPromise = renderDfd.promise;\n      let transition = router.window.document.startViewTransition(async () => {\n        optInStartTransition(() => setStateImpl(newState));\n        await renderPromise;\n      });\n      transition.finished.finally(() => {\n        setRenderDfd(undefined);\n        setTransition(undefined);\n        setPendingState(undefined);\n        setVtContext({\n          isTransitioning: false\n        });\n      });\n      setTransition(transition);\n    }\n  }, [optInStartTransition, pendingState, renderDfd, router.window]);\n  // When the new location finally renders and is committed to the DOM, this\n  // effect will run to resolve the transition\n  React.useEffect(() => {\n    if (renderDfd && pendingState && state.location.key === pendingState.location.key) {\n      renderDfd.resolve();\n    }\n  }, [renderDfd, transition, state.location, pendingState]);\n  // If we get interrupted with a new navigation during a transition, we skip\n  // the active transition, let it cleanup, then kick it off again here\n  React.useEffect(() => {\n    if (!vtContext.isTransitioning && interruption) {\n      setPendingState(interruption.state);\n      setVtContext({\n        isTransitioning: true,\n        flushSync: false,\n        currentLocation: interruption.currentLocation,\n        nextLocation: interruption.nextLocation\n      });\n      setInterruption(undefined);\n    }\n  }, [vtContext.isTransitioning, interruption]);\n  React.useEffect(() => {\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(fallbackElement == null || !router.future.v7_partialHydration, \"`<RouterProvider fallbackElement>` is deprecated when using \" + \"`v7_partialHydration`, use a `HydrateFallback` component instead\") : void 0;\n    // Only log this once on initial mount\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  let navigator = React.useMemo(() => {\n    return {\n      createHref: router.createHref,\n      encodeLocation: router.encodeLocation,\n      go: n => router.navigate(n),\n      push: (to, state, opts) => router.navigate(to, {\n        state,\n        preventScrollReset: opts == null ? void 0 : opts.preventScrollReset\n      }),\n      replace: (to, state, opts) => router.navigate(to, {\n        replace: true,\n        state,\n        preventScrollReset: opts == null ? void 0 : opts.preventScrollReset\n      })\n    };\n  }, [router]);\n  let basename = router.basename || \"/\";\n  let dataRouterContext = React.useMemo(() => ({\n    router,\n    navigator,\n    static: false,\n    basename\n  }), [router, navigator, basename]);\n  // The fragment and {null} here are important!  We need them to keep React 18's\n  // useId happy when we are server-rendering since we may have a <script> here\n  // containing the hydrated server-side staticContext (from StaticRouterProvider).\n  // useId relies on the component tree structure to generate deterministic id's\n  // so we need to ensure it remains the same on the client even though\n  // we don't need the <script> tag\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(UNSAFE_DataRouterContext.Provider, {\n    value: dataRouterContext\n  }, /*#__PURE__*/React.createElement(UNSAFE_DataRouterStateContext.Provider, {\n    value: state\n  }, /*#__PURE__*/React.createElement(FetchersContext.Provider, {\n    value: fetcherData.current\n  }, /*#__PURE__*/React.createElement(ViewTransitionContext.Provider, {\n    value: vtContext\n  }, /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    location: state.location,\n    navigationType: state.historyAction,\n    navigator: navigator,\n    future: {\n      v7_relativeSplatPath: router.future.v7_relativeSplatPath\n    }\n  }, state.initialized || router.future.v7_partialHydration ? /*#__PURE__*/React.createElement(DataRoutes, {\n    routes: router.routes,\n    future: router.future,\n    state: state\n  }) : fallbackElement))))), null);\n}\nfunction DataRoutes(_ref3) {\n  let {\n    routes,\n    future,\n    state\n  } = _ref3;\n  return UNSAFE_useRoutesImpl(routes, undefined, state, future);\n}\n/**\n * A `<Router>` for use in web browsers. Provides the cleanest URLs.\n */\nfunction BrowserRouter(_ref4) {\n  let {\n    basename,\n    children,\n    future,\n    window\n  } = _ref4;\n  let historyRef = React.useRef();\n  if (historyRef.current == null) {\n    historyRef.current = createBrowserHistory({\n      window,\n      v5Compat: true\n    });\n  }\n  let history = historyRef.current;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location\n  });\n  let {\n    v7_startTransition\n  } = future || {};\n  let setState = React.useCallback(newState => {\n    v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);\n  }, [setStateImpl, v7_startTransition]);\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n  return /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history,\n    future: future\n  });\n}\n/**\n * A `<Router>` for use in web browsers. Stores the location in the hash\n * portion of the URL so it is not sent to the server.\n */\nfunction HashRouter(_ref5) {\n  let {\n    basename,\n    children,\n    future,\n    window\n  } = _ref5;\n  let historyRef = React.useRef();\n  if (historyRef.current == null) {\n    historyRef.current = createHashHistory({\n      window,\n      v5Compat: true\n    });\n  }\n  let history = historyRef.current;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location\n  });\n  let {\n    v7_startTransition\n  } = future || {};\n  let setState = React.useCallback(newState => {\n    v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);\n  }, [setStateImpl, v7_startTransition]);\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n  return /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history,\n    future: future\n  });\n}\n/**\n * A `<Router>` that accepts a pre-instantiated history object. It's important\n * to note that using your own history object is highly discouraged and may add\n * two versions of the history library to your bundles unless you use the same\n * version of the history library that React Router uses internally.\n */\nfunction HistoryRouter(_ref6) {\n  let {\n    basename,\n    children,\n    future,\n    history\n  } = _ref6;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location\n  });\n  let {\n    v7_startTransition\n  } = future || {};\n  let setState = React.useCallback(newState => {\n    v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);\n  }, [setStateImpl, v7_startTransition]);\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n  return /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history,\n    future: future\n  });\n}\nif (process.env.NODE_ENV !== \"production\") {\n  HistoryRouter.displayName = \"unstable_HistoryRouter\";\n}\nconst isBrowser = typeof window !== \"undefined\" && typeof window.document !== \"undefined\" && typeof window.document.createElement !== \"undefined\";\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n/**\n * The public API for rendering a history-aware `<a>`.\n */\nconst Link = /*#__PURE__*/React.forwardRef(function LinkWithRef(_ref7, ref) {\n  let {\n      onClick,\n      relative,\n      reloadDocument,\n      replace,\n      state,\n      target,\n      to,\n      preventScrollReset,\n      unstable_viewTransition\n    } = _ref7,\n    rest = _objectWithoutPropertiesLoose(_ref7, _excluded);\n  let {\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  // Rendered into <a href> for absolute URLs\n  let absoluteHref;\n  let isExternal = false;\n  if (typeof to === \"string\" && ABSOLUTE_URL_REGEX.test(to)) {\n    // Render the absolute href server- and client-side\n    absoluteHref = to;\n    // Only check for external origins client-side\n    if (isBrowser) {\n      try {\n        let currentUrl = new URL(window.location.href);\n        let targetUrl = to.startsWith(\"//\") ? new URL(currentUrl.protocol + to) : new URL(to);\n        let path = stripBasename(targetUrl.pathname, basename);\n        if (targetUrl.origin === currentUrl.origin && path != null) {\n          // Strip the protocol/origin/basename for same-origin absolute URLs\n          to = path + targetUrl.search + targetUrl.hash;\n        } else {\n          isExternal = true;\n        }\n      } catch (e) {\n        // We can't do external URL detection without a valid URL\n        process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, \"<Link to=\\\"\" + to + \"\\\"> contains an invalid URL which will probably break \" + \"when clicked - please update to a valid URL path.\") : void 0;\n      }\n    }\n  }\n  // Rendered into <a href> for relative URLs\n  let href = useHref(to, {\n    relative\n  });\n  let internalOnClick = useLinkClickHandler(to, {\n    replace,\n    state,\n    target,\n    preventScrollReset,\n    relative,\n    unstable_viewTransition\n  });\n  function handleClick(event) {\n    if (onClick) onClick(event);\n    if (!event.defaultPrevented) {\n      internalOnClick(event);\n    }\n  }\n  return (\n    /*#__PURE__*/\n    // eslint-disable-next-line jsx-a11y/anchor-has-content\n    React.createElement(\"a\", _extends({}, rest, {\n      href: absoluteHref || href,\n      onClick: isExternal || reloadDocument ? onClick : handleClick,\n      ref: ref,\n      target: target\n    }))\n  );\n});\nif (process.env.NODE_ENV !== \"production\") {\n  Link.displayName = \"Link\";\n}\n/**\n * A `<Link>` wrapper that knows if it's \"active\" or not.\n */\nconst NavLink = /*#__PURE__*/React.forwardRef(function NavLinkWithRef(_ref8, ref) {\n  let {\n      \"aria-current\": ariaCurrentProp = \"page\",\n      caseSensitive = false,\n      className: classNameProp = \"\",\n      end = false,\n      style: styleProp,\n      to,\n      unstable_viewTransition,\n      children\n    } = _ref8,\n    rest = _objectWithoutPropertiesLoose(_ref8, _excluded2);\n  let path = useResolvedPath(to, {\n    relative: rest.relative\n  });\n  let location = useLocation();\n  let routerState = React.useContext(UNSAFE_DataRouterStateContext);\n  let {\n    navigator,\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  let isTransitioning = routerState != null &&\n  // Conditional usage is OK here because the usage of a data router is static\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  useViewTransitionState(path) && unstable_viewTransition === true;\n  let toPathname = navigator.encodeLocation ? navigator.encodeLocation(path).pathname : path.pathname;\n  let locationPathname = location.pathname;\n  let nextLocationPathname = routerState && routerState.navigation && routerState.navigation.location ? routerState.navigation.location.pathname : null;\n  if (!caseSensitive) {\n    locationPathname = locationPathname.toLowerCase();\n    nextLocationPathname = nextLocationPathname ? nextLocationPathname.toLowerCase() : null;\n    toPathname = toPathname.toLowerCase();\n  }\n  if (nextLocationPathname && basename) {\n    nextLocationPathname = stripBasename(nextLocationPathname, basename) || nextLocationPathname;\n  }\n  // If the `to` has a trailing slash, look at that exact spot.  Otherwise,\n  // we're looking for a slash _after_ what's in `to`.  For example:\n  //\n  // <NavLink to=\"/users\"> and <NavLink to=\"/users/\">\n  // both want to look for a / at index 6 to match URL `/users/matt`\n  const endSlashPosition = toPathname !== \"/\" && toPathname.endsWith(\"/\") ? toPathname.length - 1 : toPathname.length;\n  let isActive = locationPathname === toPathname || !end && locationPathname.startsWith(toPathname) && locationPathname.charAt(endSlashPosition) === \"/\";\n  let isPending = nextLocationPathname != null && (nextLocationPathname === toPathname || !end && nextLocationPathname.startsWith(toPathname) && nextLocationPathname.charAt(toPathname.length) === \"/\");\n  let renderProps = {\n    isActive,\n    isPending,\n    isTransitioning\n  };\n  let ariaCurrent = isActive ? ariaCurrentProp : undefined;\n  let className;\n  if (typeof classNameProp === \"function\") {\n    className = classNameProp(renderProps);\n  } else {\n    // If the className prop is not a function, we use a default `active`\n    // class for <NavLink />s that are active. In v5 `active` was the default\n    // value for `activeClassName`, but we are removing that API and can still\n    // use the old default behavior for a cleaner upgrade path and keep the\n    // simple styling rules working as they currently do.\n    className = [classNameProp, isActive ? \"active\" : null, isPending ? \"pending\" : null, isTransitioning ? \"transitioning\" : null].filter(Boolean).join(\" \");\n  }\n  let style = typeof styleProp === \"function\" ? styleProp(renderProps) : styleProp;\n  return /*#__PURE__*/React.createElement(Link, _extends({}, rest, {\n    \"aria-current\": ariaCurrent,\n    className: className,\n    ref: ref,\n    style: style,\n    to: to,\n    unstable_viewTransition: unstable_viewTransition\n  }), typeof children === \"function\" ? children(renderProps) : children);\n});\nif (process.env.NODE_ENV !== \"production\") {\n  NavLink.displayName = \"NavLink\";\n}\n/**\n * A `@remix-run/router`-aware `<form>`. It behaves like a normal form except\n * that the interaction with the server is with `fetch` instead of new document\n * requests, allowing components to add nicer UX to the page as the form is\n * submitted and returns with data.\n */\nconst Form = /*#__PURE__*/React.forwardRef((_ref9, forwardedRef) => {\n  let {\n      fetcherKey,\n      navigate,\n      reloadDocument,\n      replace,\n      state,\n      method = defaultMethod,\n      action,\n      onSubmit,\n      relative,\n      preventScrollReset,\n      unstable_viewTransition\n    } = _ref9,\n    props = _objectWithoutPropertiesLoose(_ref9, _excluded3);\n  let submit = useSubmit();\n  let formAction = useFormAction(action, {\n    relative\n  });\n  let formMethod = method.toLowerCase() === \"get\" ? \"get\" : \"post\";\n  let submitHandler = event => {\n    onSubmit && onSubmit(event);\n    if (event.defaultPrevented) return;\n    event.preventDefault();\n    let submitter = event.nativeEvent.submitter;\n    let submitMethod = (submitter == null ? void 0 : submitter.getAttribute(\"formmethod\")) || method;\n    submit(submitter || event.currentTarget, {\n      fetcherKey,\n      method: submitMethod,\n      navigate,\n      replace,\n      state,\n      relative,\n      preventScrollReset,\n      unstable_viewTransition\n    });\n  };\n  return /*#__PURE__*/React.createElement(\"form\", _extends({\n    ref: forwardedRef,\n    method: formMethod,\n    action: formAction,\n    onSubmit: reloadDocument ? onSubmit : submitHandler\n  }, props));\n});\nif (process.env.NODE_ENV !== \"production\") {\n  Form.displayName = \"Form\";\n}\n/**\n * This component will emulate the browser's scroll restoration on location\n * changes.\n */\nfunction ScrollRestoration(_ref10) {\n  let {\n    getKey,\n    storageKey\n  } = _ref10;\n  useScrollRestoration({\n    getKey,\n    storageKey\n  });\n  return null;\n}\nif (process.env.NODE_ENV !== \"production\") {\n  ScrollRestoration.displayName = \"ScrollRestoration\";\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Hooks\n////////////////////////////////////////////////////////////////////////////////\nvar DataRouterHook;\n(function (DataRouterHook) {\n  DataRouterHook[\"UseScrollRestoration\"] = \"useScrollRestoration\";\n  DataRouterHook[\"UseSubmit\"] = \"useSubmit\";\n  DataRouterHook[\"UseSubmitFetcher\"] = \"useSubmitFetcher\";\n  DataRouterHook[\"UseFetcher\"] = \"useFetcher\";\n  DataRouterHook[\"useViewTransitionState\"] = \"useViewTransitionState\";\n})(DataRouterHook || (DataRouterHook = {}));\nvar DataRouterStateHook;\n(function (DataRouterStateHook) {\n  DataRouterStateHook[\"UseFetcher\"] = \"useFetcher\";\n  DataRouterStateHook[\"UseFetchers\"] = \"useFetchers\";\n  DataRouterStateHook[\"UseScrollRestoration\"] = \"useScrollRestoration\";\n})(DataRouterStateHook || (DataRouterStateHook = {}));\n// Internal hooks\nfunction getDataRouterConsoleError(hookName) {\n  return hookName + \" must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.\";\n}\nfunction useDataRouterContext(hookName) {\n  let ctx = React.useContext(UNSAFE_DataRouterContext);\n  !ctx ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : UNSAFE_invariant(false) : void 0;\n  return ctx;\n}\nfunction useDataRouterState(hookName) {\n  let state = React.useContext(UNSAFE_DataRouterStateContext);\n  !state ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : UNSAFE_invariant(false) : void 0;\n  return state;\n}\n// External hooks\n/**\n * Handles the click behavior for router `<Link>` components. This is useful if\n * you need to create custom `<Link>` components with the same click behavior we\n * use in our exported `<Link>`.\n */\nfunction useLinkClickHandler(to, _temp) {\n  let {\n    target,\n    replace: replaceProp,\n    state,\n    preventScrollReset,\n    relative,\n    unstable_viewTransition\n  } = _temp === void 0 ? {} : _temp;\n  let navigate = useNavigate();\n  let location = useLocation();\n  let path = useResolvedPath(to, {\n    relative\n  });\n  return React.useCallback(event => {\n    if (shouldProcessLinkClick(event, target)) {\n      event.preventDefault();\n      // If the URL hasn't changed, a regular <a> will do a replace instead of\n      // a push, so do the same here unless the replace prop is explicitly set\n      let replace = replaceProp !== undefined ? replaceProp : createPath(location) === createPath(path);\n      navigate(to, {\n        replace,\n        state,\n        preventScrollReset,\n        relative,\n        unstable_viewTransition\n      });\n    }\n  }, [location, navigate, path, replaceProp, state, target, to, preventScrollReset, relative, unstable_viewTransition]);\n}\n/**\n * A convenient wrapper for reading and writing search parameters via the\n * URLSearchParams interface.\n */\nfunction useSearchParams(defaultInit) {\n  process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(typeof URLSearchParams !== \"undefined\", \"You cannot use the `useSearchParams` hook in a browser that does not \" + \"support the URLSearchParams API. If you need to support Internet \" + \"Explorer 11, we recommend you load a polyfill such as \" + \"https://github.com/ungap/url-search-params\\n\\n\" + \"If you're unsure how to load polyfills, we recommend you check out \" + \"https://polyfill.io/v3/ which provides some recommendations about how \" + \"to load polyfills only for users that need them, instead of for every \" + \"user.\") : void 0;\n  let defaultSearchParamsRef = React.useRef(createSearchParams(defaultInit));\n  let hasSetSearchParamsRef = React.useRef(false);\n  let location = useLocation();\n  let searchParams = React.useMemo(() =>\n  // Only merge in the defaults if we haven't yet called setSearchParams.\n  // Once we call that we want those to take precedence, otherwise you can't\n  // remove a param with setSearchParams({}) if it has an initial value\n  getSearchParamsForLocation(location.search, hasSetSearchParamsRef.current ? null : defaultSearchParamsRef.current), [location.search]);\n  let navigate = useNavigate();\n  let setSearchParams = React.useCallback((nextInit, navigateOptions) => {\n    const newSearchParams = createSearchParams(typeof nextInit === \"function\" ? nextInit(searchParams) : nextInit);\n    hasSetSearchParamsRef.current = true;\n    navigate(\"?\" + newSearchParams, navigateOptions);\n  }, [navigate, searchParams]);\n  return [searchParams, setSearchParams];\n}\nfunction validateClientSideSubmission() {\n  if (typeof document === \"undefined\") {\n    throw new Error(\"You are calling submit during the server render. \" + \"Try calling submit within a `useEffect` or callback instead.\");\n  }\n}\nlet fetcherId = 0;\nlet getUniqueFetcherId = () => \"__\" + String(++fetcherId) + \"__\";\n/**\n * Returns a function that may be used to programmatically submit a form (or\n * some arbitrary data) to the server.\n */\nfunction useSubmit() {\n  let {\n    router\n  } = useDataRouterContext(DataRouterHook.UseSubmit);\n  let {\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  let currentRouteId = UNSAFE_useRouteId();\n  return React.useCallback(function (target, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    validateClientSideSubmission();\n    let {\n      action,\n      method,\n      encType,\n      formData,\n      body\n    } = getFormSubmissionInfo(target, basename);\n    if (options.navigate === false) {\n      let key = options.fetcherKey || getUniqueFetcherId();\n      router.fetch(key, currentRouteId, options.action || action, {\n        preventScrollReset: options.preventScrollReset,\n        formData,\n        body,\n        formMethod: options.method || method,\n        formEncType: options.encType || encType,\n        unstable_flushSync: options.unstable_flushSync\n      });\n    } else {\n      router.navigate(options.action || action, {\n        preventScrollReset: options.preventScrollReset,\n        formData,\n        body,\n        formMethod: options.method || method,\n        formEncType: options.encType || encType,\n        replace: options.replace,\n        state: options.state,\n        fromRouteId: currentRouteId,\n        unstable_flushSync: options.unstable_flushSync,\n        unstable_viewTransition: options.unstable_viewTransition\n      });\n    }\n  }, [router, basename, currentRouteId]);\n}\n// v7: Eventually we should deprecate this entirely in favor of using the\n// router method directly?\nfunction useFormAction(action, _temp2) {\n  let {\n    relative\n  } = _temp2 === void 0 ? {} : _temp2;\n  let {\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  let routeContext = React.useContext(UNSAFE_RouteContext);\n  !routeContext ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"useFormAction must be used inside a RouteContext\") : UNSAFE_invariant(false) : void 0;\n  let [match] = routeContext.matches.slice(-1);\n  // Shallow clone path so we can modify it below, otherwise we modify the\n  // object referenced by useMemo inside useResolvedPath\n  let path = _extends({}, useResolvedPath(action ? action : \".\", {\n    relative\n  }));\n  // If no action was specified, browsers will persist current search params\n  // when determining the path, so match that behavior\n  // https://github.com/remix-run/remix/issues/927\n  let location = useLocation();\n  if (action == null) {\n    // Safe to write to this directly here since if action was undefined, we\n    // would have called useResolvedPath(\".\") which will never include a search\n    path.search = location.search;\n    // When grabbing search params from the URL, remove any included ?index param\n    // since it might not apply to our contextual route.  We add it back based\n    // on match.route.index below\n    let params = new URLSearchParams(path.search);\n    if (params.has(\"index\") && params.get(\"index\") === \"\") {\n      params.delete(\"index\");\n      path.search = params.toString() ? \"?\" + params.toString() : \"\";\n    }\n  }\n  if ((!action || action === \".\") && match.route.index) {\n    path.search = path.search ? path.search.replace(/^\\?/, \"?index&\") : \"?index\";\n  }\n  // If we're operating within a basename, prepend it to the pathname prior\n  // to creating the form action.  If this is a root navigation, then just use\n  // the raw basename which allows the basename to have full control over the\n  // presence of a trailing slash on root actions\n  if (basename !== \"/\") {\n    path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n  return createPath(path);\n}\n// TODO: (v7) Change the useFetcher generic default from `any` to `unknown`\n/**\n * Interacts with route loaders and actions without causing a navigation. Great\n * for any interaction that stays on the same page.\n */\nfunction useFetcher(_temp3) {\n  var _route$matches;\n  let {\n    key\n  } = _temp3 === void 0 ? {} : _temp3;\n  let {\n    router\n  } = useDataRouterContext(DataRouterHook.UseFetcher);\n  let state = useDataRouterState(DataRouterStateHook.UseFetcher);\n  let fetcherData = React.useContext(FetchersContext);\n  let route = React.useContext(UNSAFE_RouteContext);\n  let routeId = (_route$matches = route.matches[route.matches.length - 1]) == null ? void 0 : _route$matches.route.id;\n  !fetcherData ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"useFetcher must be used inside a FetchersContext\") : UNSAFE_invariant(false) : void 0;\n  !route ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"useFetcher must be used inside a RouteContext\") : UNSAFE_invariant(false) : void 0;\n  !(routeId != null) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"useFetcher can only be used on routes that contain a unique \\\"id\\\"\") : UNSAFE_invariant(false) : void 0;\n  // Fetcher key handling\n  // OK to call conditionally to feature detect `useId`\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  let defaultKey = useIdImpl ? useIdImpl() : \"\";\n  let [fetcherKey, setFetcherKey] = React.useState(key || defaultKey);\n  if (key && key !== fetcherKey) {\n    setFetcherKey(key);\n  } else if (!fetcherKey) {\n    // We will only fall through here when `useId` is not available\n    setFetcherKey(getUniqueFetcherId());\n  }\n  // Registration/cleanup\n  React.useEffect(() => {\n    router.getFetcher(fetcherKey);\n    return () => {\n      // Tell the router we've unmounted - if v7_fetcherPersist is enabled this\n      // will not delete immediately but instead queue up a delete after the\n      // fetcher returns to an `idle` state\n      router.deleteFetcher(fetcherKey);\n    };\n  }, [router, fetcherKey]);\n  // Fetcher additions\n  let load = React.useCallback((href, opts) => {\n    !routeId ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"No routeId available for fetcher.load()\") : UNSAFE_invariant(false) : void 0;\n    router.fetch(fetcherKey, routeId, href, opts);\n  }, [fetcherKey, routeId, router]);\n  let submitImpl = useSubmit();\n  let submit = React.useCallback((target, opts) => {\n    submitImpl(target, _extends({}, opts, {\n      navigate: false,\n      fetcherKey\n    }));\n  }, [fetcherKey, submitImpl]);\n  let FetcherForm = React.useMemo(() => {\n    let FetcherForm = /*#__PURE__*/React.forwardRef((props, ref) => {\n      return /*#__PURE__*/React.createElement(Form, _extends({}, props, {\n        navigate: false,\n        fetcherKey: fetcherKey,\n        ref: ref\n      }));\n    });\n    if (process.env.NODE_ENV !== \"production\") {\n      FetcherForm.displayName = \"fetcher.Form\";\n    }\n    return FetcherForm;\n  }, [fetcherKey]);\n  // Exposed FetcherWithComponents\n  let fetcher = state.fetchers.get(fetcherKey) || IDLE_FETCHER;\n  let data = fetcherData.get(fetcherKey);\n  let fetcherWithComponents = React.useMemo(() => _extends({\n    Form: FetcherForm,\n    submit,\n    load\n  }, fetcher, {\n    data\n  }), [FetcherForm, submit, load, fetcher, data]);\n  return fetcherWithComponents;\n}\n/**\n * Provides all fetchers currently on the page. Useful for layouts and parent\n * routes that need to provide pending/optimistic UI regarding the fetch.\n */\nfunction useFetchers() {\n  let state = useDataRouterState(DataRouterStateHook.UseFetchers);\n  return Array.from(state.fetchers.entries()).map(_ref11 => {\n    let [key, fetcher] = _ref11;\n    return _extends({}, fetcher, {\n      key\n    });\n  });\n}\nconst SCROLL_RESTORATION_STORAGE_KEY = \"react-router-scroll-positions\";\nlet savedScrollPositions = {};\n/**\n * When rendered inside a RouterProvider, will restore scroll positions on navigations\n */\nfunction useScrollRestoration(_temp4) {\n  let {\n    getKey,\n    storageKey\n  } = _temp4 === void 0 ? {} : _temp4;\n  let {\n    router\n  } = useDataRouterContext(DataRouterHook.UseScrollRestoration);\n  let {\n    restoreScrollPosition,\n    preventScrollReset\n  } = useDataRouterState(DataRouterStateHook.UseScrollRestoration);\n  let {\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  let location = useLocation();\n  let matches = useMatches();\n  let navigation = useNavigation();\n  // Trigger manual scroll restoration while we're active\n  React.useEffect(() => {\n    window.history.scrollRestoration = \"manual\";\n    return () => {\n      window.history.scrollRestoration = \"auto\";\n    };\n  }, []);\n  // Save positions on pagehide\n  usePageHide(React.useCallback(() => {\n    if (navigation.state === \"idle\") {\n      let key = (getKey ? getKey(location, matches) : null) || location.key;\n      savedScrollPositions[key] = window.scrollY;\n    }\n    try {\n      sessionStorage.setItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY, JSON.stringify(savedScrollPositions));\n    } catch (error) {\n      process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, \"Failed to save scroll positions in sessionStorage, <ScrollRestoration /> will not work properly (\" + error + \").\") : void 0;\n    }\n    window.history.scrollRestoration = \"auto\";\n  }, [storageKey, getKey, navigation.state, location, matches]));\n  // Read in any saved scroll locations\n  if (typeof document !== \"undefined\") {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      try {\n        let sessionPositions = sessionStorage.getItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY);\n        if (sessionPositions) {\n          savedScrollPositions = JSON.parse(sessionPositions);\n        }\n      } catch (e) {\n        // no-op, use default empty object\n      }\n    }, [storageKey]);\n    // Enable scroll restoration in the router\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      let getKeyWithoutBasename = getKey && basename !== \"/\" ? (location, matches) => getKey( // Strip the basename to match useLocation()\n      _extends({}, location, {\n        pathname: stripBasename(location.pathname, basename) || location.pathname\n      }), matches) : getKey;\n      let disableScrollRestoration = router == null ? void 0 : router.enableScrollRestoration(savedScrollPositions, () => window.scrollY, getKeyWithoutBasename);\n      return () => disableScrollRestoration && disableScrollRestoration();\n    }, [router, basename, getKey]);\n    // Restore scrolling when state.restoreScrollPosition changes\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      // Explicit false means don't do anything (used for submissions)\n      if (restoreScrollPosition === false) {\n        return;\n      }\n      // been here before, scroll to it\n      if (typeof restoreScrollPosition === \"number\") {\n        window.scrollTo(0, restoreScrollPosition);\n        return;\n      }\n      // try to scroll to the hash\n      if (location.hash) {\n        let el = document.getElementById(decodeURIComponent(location.hash.slice(1)));\n        if (el) {\n          el.scrollIntoView();\n          return;\n        }\n      }\n      // Don't reset if this navigation opted out\n      if (preventScrollReset === true) {\n        return;\n      }\n      // otherwise go to the top on new locations\n      window.scrollTo(0, 0);\n    }, [location, restoreScrollPosition, preventScrollReset]);\n  }\n}\n/**\n * Setup a callback to be fired on the window's `beforeunload` event. This is\n * useful for saving some data to `window.localStorage` just before the page\n * refreshes.\n *\n * Note: The `callback` argument should be a function created with\n * `React.useCallback()`.\n */\nfunction useBeforeUnload(callback, options) {\n  let {\n    capture\n  } = options || {};\n  React.useEffect(() => {\n    let opts = capture != null ? {\n      capture\n    } : undefined;\n    window.addEventListener(\"beforeunload\", callback, opts);\n    return () => {\n      window.removeEventListener(\"beforeunload\", callback, opts);\n    };\n  }, [callback, capture]);\n}\n/**\n * Setup a callback to be fired on the window's `pagehide` event. This is\n * useful for saving some data to `window.localStorage` just before the page\n * refreshes.  This event is better supported than beforeunload across browsers.\n *\n * Note: The `callback` argument should be a function created with\n * `React.useCallback()`.\n */\nfunction usePageHide(callback, options) {\n  let {\n    capture\n  } = options || {};\n  React.useEffect(() => {\n    let opts = capture != null ? {\n      capture\n    } : undefined;\n    window.addEventListener(\"pagehide\", callback, opts);\n    return () => {\n      window.removeEventListener(\"pagehide\", callback, opts);\n    };\n  }, [callback, capture]);\n}\n/**\n * Wrapper around useBlocker to show a window.confirm prompt to users instead\n * of building a custom UI with useBlocker.\n *\n * Warning: This has *a lot of rough edges* and behaves very differently (and\n * very incorrectly in some cases) across browsers if user click addition\n * back/forward navigations while the confirm is open.  Use at your own risk.\n */\nfunction usePrompt(_ref12) {\n  let {\n    when,\n    message\n  } = _ref12;\n  let blocker = useBlocker(when);\n  React.useEffect(() => {\n    if (blocker.state === \"blocked\") {\n      let proceed = window.confirm(message);\n      if (proceed) {\n        // This timeout is needed to avoid a weird \"race\" on POP navigations\n        // between the `window.history` revert navigation and the result of\n        // `window.confirm`\n        setTimeout(blocker.proceed, 0);\n      } else {\n        blocker.reset();\n      }\n    }\n  }, [blocker, message]);\n  React.useEffect(() => {\n    if (blocker.state === \"blocked\" && !when) {\n      blocker.reset();\n    }\n  }, [blocker, when]);\n}\n/**\n * Return a boolean indicating if there is an active view transition to the\n * given href.  You can use this value to render CSS classes or viewTransitionName\n * styles onto your elements\n *\n * @param href The destination href\n * @param [opts.relative] Relative routing type (\"route\" | \"path\")\n */\nfunction useViewTransitionState(to, opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n  let vtContext = React.useContext(ViewTransitionContext);\n  !(vtContext != null) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"`unstable_useViewTransitionState` must be used within `react-router-dom`'s `RouterProvider`.  \" + \"Did you accidentally import `RouterProvider` from `react-router`?\") : UNSAFE_invariant(false) : void 0;\n  let {\n    basename\n  } = useDataRouterContext(DataRouterHook.useViewTransitionState);\n  let path = useResolvedPath(to, {\n    relative: opts.relative\n  });\n  if (!vtContext.isTransitioning) {\n    return false;\n  }\n  let currentPath = stripBasename(vtContext.currentLocation.pathname, basename) || vtContext.currentLocation.pathname;\n  let nextPath = stripBasename(vtContext.nextLocation.pathname, basename) || vtContext.nextLocation.pathname;\n  // Transition is active if we're going to or coming from the indicated\n  // destination.  This ensures that other PUSH navigations that reverse\n  // an indicated transition apply.  I.e., on the list view you have:\n  //\n  //   <NavLink to=\"/details/1\" unstable_viewTransition>\n  //\n  // If you click the breadcrumb back to the list view:\n  //\n  //   <NavLink to=\"/list\" unstable_viewTransition>\n  //\n  // We should apply the transition because it's indicated as active going\n  // from /list -> /details/1 and therefore should be active on the reverse\n  // (even though this isn't strictly a POP reverse)\n  return matchPath(path.pathname, nextPath) != null || matchPath(path.pathname, currentPath) != null;\n}\n//#endregion\n\nexport { BrowserRouter, Form, HashRouter, Link, NavLink, RouterProvider, ScrollRestoration, FetchersContext as UNSAFE_FetchersContext, ViewTransitionContext as UNSAFE_ViewTransitionContext, useScrollRestoration as UNSAFE_useScrollRestoration, createBrowserRouter, createHashRouter, createSearchParams, HistoryRouter as unstable_HistoryRouter, usePrompt as unstable_usePrompt, useViewTransitionState as unstable_useViewTransitionState, useBeforeUnload, useFetcher, useFetchers, useFormAction, useLinkClickHandler, useSearchParams, useSubmit };\n//# sourceMappingURL=index.js.map\n","import React from 'react';\nimport { css } from '@emotion/css';\nimport { useParams, Link } from 'react-router-dom';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { prefixRoute } from '../utils/utils.routing';\nimport { ROUTES } from '../constants';\nimport { testIds } from '../components/testIds';\nimport { PluginPage } from '@grafana/runtime';\n\nexport function PageThree() {\n  const s = useStyles2(getStyles);\n  const { id } = useParams<{ id: string }>();\n\n  return (\n    <PluginPage>\n      <div data-testid={testIds.pageThree.container}>\n        This is page three.\n        <br />\n        <br />\n        {/* The ID parameter is set */}\n        {id && (\n          <>\n            <strong>ID:</strong> {id}\n          </>\n        )}\n        {/* No ID parameter */}\n        {!id && (\n          <>\n            <strong>No id parameter is set in the URL.</strong> <br />\n            Try the following link: <br />\n            <Link className={s.link} to={prefixRoute(`${ROUTES.Three}/123456789`)}>\n              {prefixRoute(`${ROUTES.Three}/123456789`)}\n            </Link>\n          </>\n        )}\n      </div>\n    </PluginPage>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  link: css`\n    color: ${theme.colors.text.link};\n    text-decoration: underline;\n  `,\n});\n","import React from 'react';\nimport { testIds } from '../components/testIds';\nimport { PluginPage } from '@grafana/runtime';\n\nexport function PageTwo() {\n  return (\n    <PluginPage>\n      <div data-testid={testIds.pageTwo.container}>\n        <p>This is page two.</p>\n      </div>\n    </PluginPage>\n  );\n}\n","var BindingScopeEnum = {\r\n    Request: 'Request',\r\n    Singleton: 'Singleton',\r\n    Transient: 'Transient'\r\n};\r\nvar BindingTypeEnum = {\r\n    ConstantValue: 'ConstantValue',\r\n    Constructor: 'Constructor',\r\n    DynamicValue: 'DynamicValue',\r\n    Factory: 'Factory',\r\n    Function: 'Function',\r\n    Instance: 'Instance',\r\n    Invalid: 'Invalid',\r\n    Provider: 'Provider'\r\n};\r\nvar TargetTypeEnum = {\r\n    ClassProperty: 'ClassProperty',\r\n    ConstructorArgument: 'ConstructorArgument',\r\n    Variable: 'Variable'\r\n};\r\nexport { BindingScopeEnum, BindingTypeEnum, TargetTypeEnum };\r\n","var idCounter = 0;\r\nfunction id() {\r\n    return idCounter++;\r\n}\r\nexport { id };\r\n","import { BindingScopeEnum, BindingTypeEnum } from '../constants/literal_types';\r\nimport { id } from '../utils/id';\r\nvar Binding = (function () {\r\n    function Binding(serviceIdentifier, scope) {\r\n        this.id = id();\r\n        this.activated = false;\r\n        this.serviceIdentifier = serviceIdentifier;\r\n        this.scope = scope;\r\n        this.type = BindingTypeEnum.Invalid;\r\n        this.constraint = function (request) { return true; };\r\n        this.implementationType = null;\r\n        this.cache = null;\r\n        this.factory = null;\r\n        this.provider = null;\r\n        this.onActivation = null;\r\n        this.onDeactivation = null;\r\n        this.dynamicValue = null;\r\n    }\r\n    Binding.prototype.clone = function () {\r\n        var clone = new Binding(this.serviceIdentifier, this.scope);\r\n        clone.activated = (clone.scope === BindingScopeEnum.Singleton) ? this.activated : false;\r\n        clone.implementationType = this.implementationType;\r\n        clone.dynamicValue = this.dynamicValue;\r\n        clone.scope = this.scope;\r\n        clone.type = this.type;\r\n        clone.factory = this.factory;\r\n        clone.provider = this.provider;\r\n        clone.constraint = this.constraint;\r\n        clone.onActivation = this.onActivation;\r\n        clone.onDeactivation = this.onDeactivation;\r\n        clone.cache = this.cache;\r\n        return clone;\r\n    };\r\n    return Binding;\r\n}());\r\nexport { Binding };\r\n","export var DUPLICATED_INJECTABLE_DECORATOR = 'Cannot apply @injectable decorator multiple times.';\r\nexport var DUPLICATED_METADATA = 'Metadata key was used more than once in a parameter:';\r\nexport var NULL_ARGUMENT = 'NULL argument';\r\nexport var KEY_NOT_FOUND = 'Key Not Found';\r\nexport var AMBIGUOUS_MATCH = 'Ambiguous match found for serviceIdentifier:';\r\nexport var CANNOT_UNBIND = 'Could not unbind serviceIdentifier:';\r\nexport var NOT_REGISTERED = 'No matching bindings found for serviceIdentifier:';\r\nexport var MISSING_INJECTABLE_ANNOTATION = 'Missing required @injectable annotation in:';\r\nexport var MISSING_INJECT_ANNOTATION = 'Missing required @inject or @multiInject annotation in:';\r\nexport var UNDEFINED_INJECT_ANNOTATION = function (name) {\r\n    return \"@inject called with undefined this could mean that the class \" + name + \" has \" +\r\n        'a circular dependency problem. You can use a LazyServiceIdentifier to  ' +\r\n        'overcome this limitation.';\r\n};\r\nexport var CIRCULAR_DEPENDENCY = 'Circular dependency found:';\r\nexport var NOT_IMPLEMENTED = 'Sorry, this feature is not fully implemented yet.';\r\nexport var INVALID_BINDING_TYPE = 'Invalid binding type:';\r\nexport var NO_MORE_SNAPSHOTS_AVAILABLE = 'No snapshot available to restore.';\r\nexport var INVALID_MIDDLEWARE_RETURN = 'Invalid return type in middleware. Middleware must return!';\r\nexport var INVALID_FUNCTION_BINDING = 'Value provided to function binding must be a function!';\r\nexport var LAZY_IN_SYNC = function (key) { return \"You are attempting to construct '\" + key + \"' in a synchronous way\\n but it has asynchronous dependencies.\"; };\r\nexport var INVALID_TO_SELF_VALUE = 'The toSelf function can only be applied when a constructor is ' +\r\n    'used as service identifier';\r\nexport var INVALID_DECORATOR_OPERATION = 'The @inject @multiInject @tagged and @named decorators ' +\r\n    'must be applied to the parameters of a class constructor or a class property.';\r\nexport var ARGUMENTS_LENGTH_MISMATCH = function () {\r\n    var values = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        values[_i] = arguments[_i];\r\n    }\r\n    return 'The number of constructor arguments in the derived class ' +\r\n        (values[0] + \" must be >= than the number of constructor arguments of its base class.\");\r\n};\r\nexport var CONTAINER_OPTIONS_MUST_BE_AN_OBJECT = 'Invalid Container constructor argument. Container options ' +\r\n    'must be an object.';\r\nexport var CONTAINER_OPTIONS_INVALID_DEFAULT_SCOPE = 'Invalid Container option. Default scope must ' +\r\n    'be a string (\"singleton\" or \"transient\").';\r\nexport var CONTAINER_OPTIONS_INVALID_AUTO_BIND_INJECTABLE = 'Invalid Container option. Auto bind injectable must ' +\r\n    'be a boolean';\r\nexport var CONTAINER_OPTIONS_INVALID_SKIP_BASE_CHECK = 'Invalid Container option. Skip base check must ' +\r\n    'be a boolean';\r\nexport var MULTIPLE_PRE_DESTROY_METHODS = 'Cannot apply @preDestroy decorator multiple times in the same class';\r\nexport var MULTIPLE_POST_CONSTRUCT_METHODS = 'Cannot apply @postConstruct decorator multiple times in the same class';\r\nexport var ASYNC_UNBIND_REQUIRED = 'Attempting to unbind dependency with asynchronous destruction (@preDestroy or onDeactivation)';\r\nexport var POST_CONSTRUCT_ERROR = function (clazz, errorMessage) { return \"@postConstruct error in class \" + clazz + \": \" + errorMessage; };\r\nexport var PRE_DESTROY_ERROR = function (clazz, errorMessage) { return \"@preDestroy error in class \" + clazz + \": \" + errorMessage; };\r\nexport var ON_DEACTIVATION_ERROR = function (clazz, errorMessage) { return \"onDeactivation() error in class \" + clazz + \": \" + errorMessage; };\r\nexport var CIRCULAR_DEPENDENCY_IN_FACTORY = function (factoryType, serviceIdentifier) {\r\n    return \"It looks like there is a circular dependency in one of the '\" + factoryType + \"' bindings. Please investigate bindings with \" +\r\n        (\"service identifier '\" + serviceIdentifier + \"'.\");\r\n};\r\nexport var STACK_OVERFLOW = 'Maximum call stack size exceeded';\r\n","export var NAMED_TAG = 'named';\r\nexport var NAME_TAG = 'name';\r\nexport var UNMANAGED_TAG = 'unmanaged';\r\nexport var OPTIONAL_TAG = 'optional';\r\nexport var INJECT_TAG = 'inject';\r\nexport var MULTI_INJECT_TAG = 'multi_inject';\r\nexport var TAGGED = 'inversify:tagged';\r\nexport var TAGGED_PROP = 'inversify:tagged_props';\r\nexport var PARAM_TYPES = 'inversify:paramtypes';\r\nexport var DESIGN_PARAM_TYPES = 'design:paramtypes';\r\nexport var POST_CONSTRUCT = 'post_construct';\r\nexport var PRE_DESTROY = 'pre_destroy';\r\nfunction getNonCustomTagKeys() {\r\n    return [\r\n        INJECT_TAG,\r\n        MULTI_INJECT_TAG,\r\n        NAME_TAG,\r\n        UNMANAGED_TAG,\r\n        NAMED_TAG,\r\n        OPTIONAL_TAG,\r\n    ];\r\n}\r\nexport var NON_CUSTOM_TAG_KEYS = getNonCustomTagKeys();\r\n","import * as METADATA_KEY from '../constants/metadata_keys';\r\nvar MetadataReader = (function () {\r\n    function MetadataReader() {\r\n    }\r\n    MetadataReader.prototype.getConstructorMetadata = function (constructorFunc) {\r\n        var compilerGeneratedMetadata = Reflect.getMetadata(METADATA_KEY.PARAM_TYPES, constructorFunc);\r\n        var userGeneratedMetadata = Reflect.getMetadata(METADATA_KEY.TAGGED, constructorFunc);\r\n        return {\r\n            compilerGeneratedMetadata: compilerGeneratedMetadata,\r\n            userGeneratedMetadata: userGeneratedMetadata || {}\r\n        };\r\n    };\r\n    MetadataReader.prototype.getPropertiesMetadata = function (constructorFunc) {\r\n        var userGeneratedMetadata = Reflect.getMetadata(METADATA_KEY.TAGGED_PROP, constructorFunc) || [];\r\n        return userGeneratedMetadata;\r\n    };\r\n    return MetadataReader;\r\n}());\r\nexport { MetadataReader };\r\n","export var BindingCount = {\r\n    MultipleBindingsAvailable: 2,\r\n    NoBindingsAvailable: 0,\r\n    OnlyOneBindingAvailable: 1\r\n};\r\n","import * as ERROR_MSGS from '../constants/error_msgs';\r\nexport function isStackOverflowExeption(error) {\r\n    return (error instanceof RangeError ||\r\n        error.message === ERROR_MSGS.STACK_OVERFLOW);\r\n}\r\nexport var tryAndThrowErrorIfStackOverflow = function (fn, errorCallback) {\r\n    try {\r\n        return fn();\r\n    }\r\n    catch (error) {\r\n        if (isStackOverflowExeption(error)) {\r\n            error = errorCallback();\r\n        }\r\n        throw error;\r\n    }\r\n};\r\n","import * as ERROR_MSGS from '../constants/error_msgs';\r\nfunction getServiceIdentifierAsString(serviceIdentifier) {\r\n    if (typeof serviceIdentifier === 'function') {\r\n        var _serviceIdentifier = serviceIdentifier;\r\n        return _serviceIdentifier.name;\r\n    }\r\n    else if (typeof serviceIdentifier === 'symbol') {\r\n        return serviceIdentifier.toString();\r\n    }\r\n    else {\r\n        var _serviceIdentifier = serviceIdentifier;\r\n        return _serviceIdentifier;\r\n    }\r\n}\r\nfunction listRegisteredBindingsForServiceIdentifier(container, serviceIdentifier, getBindings) {\r\n    var registeredBindingsList = '';\r\n    var registeredBindings = getBindings(container, serviceIdentifier);\r\n    if (registeredBindings.length !== 0) {\r\n        registeredBindingsList = '\\nRegistered bindings:';\r\n        registeredBindings.forEach(function (binding) {\r\n            var name = 'Object';\r\n            if (binding.implementationType !== null) {\r\n                name = getFunctionName(binding.implementationType);\r\n            }\r\n            registeredBindingsList = registeredBindingsList + \"\\n \" + name;\r\n            if (binding.constraint.metaData) {\r\n                registeredBindingsList = registeredBindingsList + \" - \" + binding.constraint.metaData;\r\n            }\r\n        });\r\n    }\r\n    return registeredBindingsList;\r\n}\r\nfunction alreadyDependencyChain(request, serviceIdentifier) {\r\n    if (request.parentRequest === null) {\r\n        return false;\r\n    }\r\n    else if (request.parentRequest.serviceIdentifier === serviceIdentifier) {\r\n        return true;\r\n    }\r\n    else {\r\n        return alreadyDependencyChain(request.parentRequest, serviceIdentifier);\r\n    }\r\n}\r\nfunction dependencyChainToString(request) {\r\n    function _createStringArr(req, result) {\r\n        if (result === void 0) { result = []; }\r\n        var serviceIdentifier = getServiceIdentifierAsString(req.serviceIdentifier);\r\n        result.push(serviceIdentifier);\r\n        if (req.parentRequest !== null) {\r\n            return _createStringArr(req.parentRequest, result);\r\n        }\r\n        return result;\r\n    }\r\n    var stringArr = _createStringArr(request);\r\n    return stringArr.reverse().join(' --> ');\r\n}\r\nfunction circularDependencyToException(request) {\r\n    request.childRequests.forEach(function (childRequest) {\r\n        if (alreadyDependencyChain(childRequest, childRequest.serviceIdentifier)) {\r\n            var services = dependencyChainToString(childRequest);\r\n            throw new Error(ERROR_MSGS.CIRCULAR_DEPENDENCY + \" \" + services);\r\n        }\r\n        else {\r\n            circularDependencyToException(childRequest);\r\n        }\r\n    });\r\n}\r\nfunction listMetadataForTarget(serviceIdentifierString, target) {\r\n    if (target.isTagged() || target.isNamed()) {\r\n        var m_1 = '';\r\n        var namedTag = target.getNamedTag();\r\n        var otherTags = target.getCustomTags();\r\n        if (namedTag !== null) {\r\n            m_1 += namedTag.toString() + '\\n';\r\n        }\r\n        if (otherTags !== null) {\r\n            otherTags.forEach(function (tag) {\r\n                m_1 += tag.toString() + '\\n';\r\n            });\r\n        }\r\n        return \" \" + serviceIdentifierString + \"\\n \" + serviceIdentifierString + \" - \" + m_1;\r\n    }\r\n    else {\r\n        return \" \" + serviceIdentifierString;\r\n    }\r\n}\r\nfunction getFunctionName(func) {\r\n    if (func.name) {\r\n        return func.name;\r\n    }\r\n    else {\r\n        var name_1 = func.toString();\r\n        var match = name_1.match(/^function\\s*([^\\s(]+)/);\r\n        return match ? match[1] : \"Anonymous function: \" + name_1;\r\n    }\r\n}\r\nfunction getSymbolDescription(symbol) {\r\n    return symbol.toString().slice(7, -1);\r\n}\r\nexport { getFunctionName, getServiceIdentifierAsString, listRegisteredBindingsForServiceIdentifier, listMetadataForTarget, circularDependencyToException, getSymbolDescription };\r\n","import { id } from '../utils/id';\r\nvar Context = (function () {\r\n    function Context(container) {\r\n        this.id = id();\r\n        this.container = container;\r\n    }\r\n    Context.prototype.addPlan = function (plan) {\r\n        this.plan = plan;\r\n    };\r\n    Context.prototype.setCurrentRequest = function (currentRequest) {\r\n        this.currentRequest = currentRequest;\r\n    };\r\n    return Context;\r\n}());\r\nexport { Context };\r\n","import * as METADATA_KEY from '../constants/metadata_keys';\r\nvar Metadata = (function () {\r\n    function Metadata(key, value) {\r\n        this.key = key;\r\n        this.value = value;\r\n    }\r\n    Metadata.prototype.toString = function () {\r\n        if (this.key === METADATA_KEY.NAMED_TAG) {\r\n            return \"named: \" + String(this.value).toString() + \" \";\r\n        }\r\n        else {\r\n            return \"tagged: { key:\" + this.key.toString() + \", value: \" + String(this.value) + \" }\";\r\n        }\r\n    };\r\n    return Metadata;\r\n}());\r\nexport { Metadata };\r\n","var Plan = (function () {\r\n    function Plan(parentContext, rootRequest) {\r\n        this.parentContext = parentContext;\r\n        this.rootRequest = rootRequest;\r\n    }\r\n    return Plan;\r\n}());\r\nexport { Plan };\r\n","var LazyServiceIdentifier = (function () {\r\n    function LazyServiceIdentifier(cb) {\r\n        this._cb = cb;\r\n    }\r\n    LazyServiceIdentifier.prototype.unwrap = function () {\r\n        return this._cb();\r\n    };\r\n    return LazyServiceIdentifier;\r\n}());\r\nexport { LazyServiceIdentifier };\r\n","var QueryableString = (function () {\r\n    function QueryableString(str) {\r\n        this.str = str;\r\n    }\r\n    QueryableString.prototype.startsWith = function (searchString) {\r\n        return this.str.indexOf(searchString) === 0;\r\n    };\r\n    QueryableString.prototype.endsWith = function (searchString) {\r\n        var reverseString = '';\r\n        var reverseSearchString = searchString.split('').reverse().join('');\r\n        reverseString = this.str.split('').reverse().join('');\r\n        return this.startsWith.call({ str: reverseString }, reverseSearchString);\r\n    };\r\n    QueryableString.prototype.contains = function (searchString) {\r\n        return (this.str.indexOf(searchString) !== -1);\r\n    };\r\n    QueryableString.prototype.equals = function (compareString) {\r\n        return this.str === compareString;\r\n    };\r\n    QueryableString.prototype.value = function () {\r\n        return this.str;\r\n    };\r\n    return QueryableString;\r\n}());\r\nexport { QueryableString };\r\n","import * as METADATA_KEY from '../constants/metadata_keys';\r\nimport { id } from '../utils/id';\r\nimport { getSymbolDescription } from '../utils/serialization';\r\nimport { Metadata } from './metadata';\r\nimport { QueryableString } from './queryable_string';\r\nvar Target = (function () {\r\n    function Target(type, identifier, serviceIdentifier, namedOrTagged) {\r\n        this.id = id();\r\n        this.type = type;\r\n        this.serviceIdentifier = serviceIdentifier;\r\n        var queryableName = typeof identifier === 'symbol' ? getSymbolDescription(identifier) : identifier;\r\n        this.name = new QueryableString(queryableName || '');\r\n        this.identifier = identifier;\r\n        this.metadata = new Array();\r\n        var metadataItem = null;\r\n        if (typeof namedOrTagged === 'string') {\r\n            metadataItem = new Metadata(METADATA_KEY.NAMED_TAG, namedOrTagged);\r\n        }\r\n        else if (namedOrTagged instanceof Metadata) {\r\n            metadataItem = namedOrTagged;\r\n        }\r\n        if (metadataItem !== null) {\r\n            this.metadata.push(metadataItem);\r\n        }\r\n    }\r\n    Target.prototype.hasTag = function (key) {\r\n        for (var _i = 0, _a = this.metadata; _i < _a.length; _i++) {\r\n            var m = _a[_i];\r\n            if (m.key === key) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    Target.prototype.isArray = function () {\r\n        return this.hasTag(METADATA_KEY.MULTI_INJECT_TAG);\r\n    };\r\n    Target.prototype.matchesArray = function (name) {\r\n        return this.matchesTag(METADATA_KEY.MULTI_INJECT_TAG)(name);\r\n    };\r\n    Target.prototype.isNamed = function () {\r\n        return this.hasTag(METADATA_KEY.NAMED_TAG);\r\n    };\r\n    Target.prototype.isTagged = function () {\r\n        return this.metadata.some(function (metadata) { return METADATA_KEY.NON_CUSTOM_TAG_KEYS.every(function (key) { return metadata.key !== key; }); });\r\n    };\r\n    Target.prototype.isOptional = function () {\r\n        return this.matchesTag(METADATA_KEY.OPTIONAL_TAG)(true);\r\n    };\r\n    Target.prototype.getNamedTag = function () {\r\n        if (this.isNamed()) {\r\n            return this.metadata.filter(function (m) { return m.key === METADATA_KEY.NAMED_TAG; })[0];\r\n        }\r\n        return null;\r\n    };\r\n    Target.prototype.getCustomTags = function () {\r\n        if (this.isTagged()) {\r\n            return this.metadata.filter(function (metadata) { return METADATA_KEY.NON_CUSTOM_TAG_KEYS.every(function (key) { return metadata.key !== key; }); });\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    Target.prototype.matchesNamedTag = function (name) {\r\n        return this.matchesTag(METADATA_KEY.NAMED_TAG)(name);\r\n    };\r\n    Target.prototype.matchesTag = function (key) {\r\n        var _this = this;\r\n        return function (value) {\r\n            for (var _i = 0, _a = _this.metadata; _i < _a.length; _i++) {\r\n                var m = _a[_i];\r\n                if (m.key === key && m.value === value) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        };\r\n    };\r\n    return Target;\r\n}());\r\nexport { Target };\r\n","var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n};\r\nimport { LazyServiceIdentifier } from '../annotation/lazy_service_identifier';\r\nimport * as ERROR_MSGS from '../constants/error_msgs';\r\nimport { TargetTypeEnum } from '../constants/literal_types';\r\nimport * as METADATA_KEY from '../constants/metadata_keys';\r\nimport { getFunctionName } from '../utils/serialization';\r\nimport { Target } from './target';\r\nfunction getDependencies(metadataReader, func) {\r\n    var constructorName = getFunctionName(func);\r\n    return getTargets(metadataReader, constructorName, func, false);\r\n}\r\nfunction getTargets(metadataReader, constructorName, func, isBaseClass) {\r\n    var metadata = metadataReader.getConstructorMetadata(func);\r\n    var serviceIdentifiers = metadata.compilerGeneratedMetadata;\r\n    if (serviceIdentifiers === undefined) {\r\n        var msg = ERROR_MSGS.MISSING_INJECTABLE_ANNOTATION + \" \" + constructorName + \".\";\r\n        throw new Error(msg);\r\n    }\r\n    var constructorArgsMetadata = metadata.userGeneratedMetadata;\r\n    var keys = Object.keys(constructorArgsMetadata);\r\n    var hasUserDeclaredUnknownInjections = (func.length === 0 && keys.length > 0);\r\n    var hasOptionalParameters = keys.length > func.length;\r\n    var iterations = (hasUserDeclaredUnknownInjections || hasOptionalParameters) ? keys.length : func.length;\r\n    var constructorTargets = getConstructorArgsAsTargets(isBaseClass, constructorName, serviceIdentifiers, constructorArgsMetadata, iterations);\r\n    var propertyTargets = getClassPropsAsTargets(metadataReader, func, constructorName);\r\n    var targets = __spreadArray(__spreadArray([], constructorTargets, true), propertyTargets, true);\r\n    return targets;\r\n}\r\nfunction getConstructorArgsAsTarget(index, isBaseClass, constructorName, serviceIdentifiers, constructorArgsMetadata) {\r\n    var targetMetadata = constructorArgsMetadata[index.toString()] || [];\r\n    var metadata = formatTargetMetadata(targetMetadata);\r\n    var isManaged = metadata.unmanaged !== true;\r\n    var serviceIdentifier = serviceIdentifiers[index];\r\n    var injectIdentifier = metadata.inject || metadata.multiInject;\r\n    serviceIdentifier = (injectIdentifier ? injectIdentifier : serviceIdentifier);\r\n    if (serviceIdentifier instanceof LazyServiceIdentifier) {\r\n        serviceIdentifier = serviceIdentifier.unwrap();\r\n    }\r\n    if (isManaged) {\r\n        var isObject = serviceIdentifier === Object;\r\n        var isFunction = serviceIdentifier === Function;\r\n        var isUndefined = serviceIdentifier === undefined;\r\n        var isUnknownType = isObject || isFunction || isUndefined;\r\n        if (!isBaseClass && isUnknownType) {\r\n            var msg = ERROR_MSGS.MISSING_INJECT_ANNOTATION + \" argument \" + index + \" in class \" + constructorName + \".\";\r\n            throw new Error(msg);\r\n        }\r\n        var target = new Target(TargetTypeEnum.ConstructorArgument, metadata.targetName, serviceIdentifier);\r\n        target.metadata = targetMetadata;\r\n        return target;\r\n    }\r\n    return null;\r\n}\r\nfunction getConstructorArgsAsTargets(isBaseClass, constructorName, serviceIdentifiers, constructorArgsMetadata, iterations) {\r\n    var targets = [];\r\n    for (var i = 0; i < iterations; i++) {\r\n        var index = i;\r\n        var target = getConstructorArgsAsTarget(index, isBaseClass, constructorName, serviceIdentifiers, constructorArgsMetadata);\r\n        if (target !== null) {\r\n            targets.push(target);\r\n        }\r\n    }\r\n    return targets;\r\n}\r\nfunction _getServiceIdentifierForProperty(inject, multiInject, propertyName, className) {\r\n    var serviceIdentifier = (inject || multiInject);\r\n    if (serviceIdentifier === undefined) {\r\n        var msg = ERROR_MSGS.MISSING_INJECTABLE_ANNOTATION + \" for property \" + String(propertyName) + \" in class \" + className + \".\";\r\n        throw new Error(msg);\r\n    }\r\n    return serviceIdentifier;\r\n}\r\nfunction getClassPropsAsTargets(metadataReader, constructorFunc, constructorName) {\r\n    var classPropsMetadata = metadataReader.getPropertiesMetadata(constructorFunc);\r\n    var targets = [];\r\n    var symbolKeys = Object.getOwnPropertySymbols(classPropsMetadata);\r\n    var stringKeys = Object.keys(classPropsMetadata);\r\n    var keys = stringKeys.concat(symbolKeys);\r\n    for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\r\n        var key = keys_1[_i];\r\n        var targetMetadata = classPropsMetadata[key];\r\n        var metadata = formatTargetMetadata(targetMetadata);\r\n        var identifier = metadata.targetName || key;\r\n        var serviceIdentifier = _getServiceIdentifierForProperty(metadata.inject, metadata.multiInject, key, constructorName);\r\n        var target = new Target(TargetTypeEnum.ClassProperty, identifier, serviceIdentifier);\r\n        target.metadata = targetMetadata;\r\n        targets.push(target);\r\n    }\r\n    var baseConstructor = Object.getPrototypeOf(constructorFunc.prototype).constructor;\r\n    if (baseConstructor !== Object) {\r\n        var baseTargets = getClassPropsAsTargets(metadataReader, baseConstructor, constructorName);\r\n        targets = __spreadArray(__spreadArray([], targets, true), baseTargets, true);\r\n    }\r\n    return targets;\r\n}\r\nfunction getBaseClassDependencyCount(metadataReader, func) {\r\n    var baseConstructor = Object.getPrototypeOf(func.prototype).constructor;\r\n    if (baseConstructor !== Object) {\r\n        var baseConstructorName = getFunctionName(baseConstructor);\r\n        var targets = getTargets(metadataReader, baseConstructorName, baseConstructor, true);\r\n        var metadata = targets.map(function (t) { return t.metadata.filter(function (m) { return m.key === METADATA_KEY.UNMANAGED_TAG; }); });\r\n        var unmanagedCount = [].concat.apply([], metadata).length;\r\n        var dependencyCount = targets.length - unmanagedCount;\r\n        if (dependencyCount > 0) {\r\n            return dependencyCount;\r\n        }\r\n        else {\r\n            return getBaseClassDependencyCount(metadataReader, baseConstructor);\r\n        }\r\n    }\r\n    else {\r\n        return 0;\r\n    }\r\n}\r\nfunction formatTargetMetadata(targetMetadata) {\r\n    var targetMetadataMap = {};\r\n    targetMetadata.forEach(function (m) {\r\n        targetMetadataMap[m.key.toString()] = m.value;\r\n    });\r\n    return {\r\n        inject: targetMetadataMap[METADATA_KEY.INJECT_TAG],\r\n        multiInject: targetMetadataMap[METADATA_KEY.MULTI_INJECT_TAG],\r\n        targetName: targetMetadataMap[METADATA_KEY.NAME_TAG],\r\n        unmanaged: targetMetadataMap[METADATA_KEY.UNMANAGED_TAG]\r\n    };\r\n}\r\nexport { getDependencies, getBaseClassDependencyCount, getFunctionName };\r\n","import { id } from '../utils/id';\r\nvar Request = (function () {\r\n    function Request(serviceIdentifier, parentContext, parentRequest, bindings, target) {\r\n        this.id = id();\r\n        this.serviceIdentifier = serviceIdentifier;\r\n        this.parentContext = parentContext;\r\n        this.parentRequest = parentRequest;\r\n        this.target = target;\r\n        this.childRequests = [];\r\n        this.bindings = (Array.isArray(bindings) ? bindings : [bindings]);\r\n        this.requestScope = parentRequest === null\r\n            ? new Map()\r\n            : null;\r\n    }\r\n    Request.prototype.addChildRequest = function (serviceIdentifier, bindings, target) {\r\n        var child = new Request(serviceIdentifier, this.parentContext, this, bindings, target);\r\n        this.childRequests.push(child);\r\n        return child;\r\n    };\r\n    return Request;\r\n}());\r\nexport { Request };\r\n","import { BindingCount } from '../bindings/binding_count';\r\nimport * as ERROR_MSGS from '../constants/error_msgs';\r\nimport { BindingTypeEnum, TargetTypeEnum } from '../constants/literal_types';\r\nimport * as METADATA_KEY from '../constants/metadata_keys';\r\nimport { isStackOverflowExeption } from '../utils/exceptions';\r\nimport { circularDependencyToException, getServiceIdentifierAsString, listMetadataForTarget, listRegisteredBindingsForServiceIdentifier } from '../utils/serialization';\r\nimport { Context } from './context';\r\nimport { Metadata } from './metadata';\r\nimport { Plan } from './plan';\r\nimport { getBaseClassDependencyCount, getDependencies, getFunctionName } from './reflection_utils';\r\nimport { Request } from './request';\r\nimport { Target } from './target';\r\nfunction getBindingDictionary(cntnr) {\r\n    return cntnr._bindingDictionary;\r\n}\r\nfunction _createTarget(isMultiInject, targetType, serviceIdentifier, name, key, value) {\r\n    var metadataKey = isMultiInject ? METADATA_KEY.MULTI_INJECT_TAG : METADATA_KEY.INJECT_TAG;\r\n    var injectMetadata = new Metadata(metadataKey, serviceIdentifier);\r\n    var target = new Target(targetType, name, serviceIdentifier, injectMetadata);\r\n    if (key !== undefined) {\r\n        var tagMetadata = new Metadata(key, value);\r\n        target.metadata.push(tagMetadata);\r\n    }\r\n    return target;\r\n}\r\nfunction _getActiveBindings(metadataReader, avoidConstraints, context, parentRequest, target) {\r\n    var bindings = getBindings(context.container, target.serviceIdentifier);\r\n    var activeBindings = [];\r\n    if (bindings.length === BindingCount.NoBindingsAvailable &&\r\n        context.container.options.autoBindInjectable &&\r\n        typeof target.serviceIdentifier === 'function' &&\r\n        metadataReader.getConstructorMetadata(target.serviceIdentifier).compilerGeneratedMetadata) {\r\n        context.container.bind(target.serviceIdentifier).toSelf();\r\n        bindings = getBindings(context.container, target.serviceIdentifier);\r\n    }\r\n    if (!avoidConstraints) {\r\n        activeBindings = bindings.filter(function (binding) {\r\n            var request = new Request(binding.serviceIdentifier, context, parentRequest, binding, target);\r\n            return binding.constraint(request);\r\n        });\r\n    }\r\n    else {\r\n        activeBindings = bindings;\r\n    }\r\n    _validateActiveBindingCount(target.serviceIdentifier, activeBindings, target, context.container);\r\n    return activeBindings;\r\n}\r\nfunction _validateActiveBindingCount(serviceIdentifier, bindings, target, container) {\r\n    switch (bindings.length) {\r\n        case BindingCount.NoBindingsAvailable:\r\n            if (target.isOptional()) {\r\n                return bindings;\r\n            }\r\n            else {\r\n                var serviceIdentifierString = getServiceIdentifierAsString(serviceIdentifier);\r\n                var msg = ERROR_MSGS.NOT_REGISTERED;\r\n                msg += listMetadataForTarget(serviceIdentifierString, target);\r\n                msg += listRegisteredBindingsForServiceIdentifier(container, serviceIdentifierString, getBindings);\r\n                throw new Error(msg);\r\n            }\r\n        case BindingCount.OnlyOneBindingAvailable:\r\n            return bindings;\r\n        case BindingCount.MultipleBindingsAvailable:\r\n        default:\r\n            if (!target.isArray()) {\r\n                var serviceIdentifierString = getServiceIdentifierAsString(serviceIdentifier);\r\n                var msg = ERROR_MSGS.AMBIGUOUS_MATCH + \" \" + serviceIdentifierString;\r\n                msg += listRegisteredBindingsForServiceIdentifier(container, serviceIdentifierString, getBindings);\r\n                throw new Error(msg);\r\n            }\r\n            else {\r\n                return bindings;\r\n            }\r\n    }\r\n}\r\nfunction _createSubRequests(metadataReader, avoidConstraints, serviceIdentifier, context, parentRequest, target) {\r\n    var activeBindings;\r\n    var childRequest;\r\n    if (parentRequest === null) {\r\n        activeBindings = _getActiveBindings(metadataReader, avoidConstraints, context, null, target);\r\n        childRequest = new Request(serviceIdentifier, context, null, activeBindings, target);\r\n        var thePlan = new Plan(context, childRequest);\r\n        context.addPlan(thePlan);\r\n    }\r\n    else {\r\n        activeBindings = _getActiveBindings(metadataReader, avoidConstraints, context, parentRequest, target);\r\n        childRequest = parentRequest.addChildRequest(target.serviceIdentifier, activeBindings, target);\r\n    }\r\n    activeBindings.forEach(function (binding) {\r\n        var subChildRequest = null;\r\n        if (target.isArray()) {\r\n            subChildRequest = childRequest.addChildRequest(binding.serviceIdentifier, binding, target);\r\n        }\r\n        else {\r\n            if (binding.cache) {\r\n                return;\r\n            }\r\n            subChildRequest = childRequest;\r\n        }\r\n        if (binding.type === BindingTypeEnum.Instance && binding.implementationType !== null) {\r\n            var dependencies = getDependencies(metadataReader, binding.implementationType);\r\n            if (!context.container.options.skipBaseClassChecks) {\r\n                var baseClassDependencyCount = getBaseClassDependencyCount(metadataReader, binding.implementationType);\r\n                if (dependencies.length < baseClassDependencyCount) {\r\n                    var error = ERROR_MSGS.ARGUMENTS_LENGTH_MISMATCH(getFunctionName(binding.implementationType));\r\n                    throw new Error(error);\r\n                }\r\n            }\r\n            dependencies.forEach(function (dependency) {\r\n                _createSubRequests(metadataReader, false, dependency.serviceIdentifier, context, subChildRequest, dependency);\r\n            });\r\n        }\r\n    });\r\n}\r\nfunction getBindings(container, serviceIdentifier) {\r\n    var bindings = [];\r\n    var bindingDictionary = getBindingDictionary(container);\r\n    if (bindingDictionary.hasKey(serviceIdentifier)) {\r\n        bindings = bindingDictionary.get(serviceIdentifier);\r\n    }\r\n    else if (container.parent !== null) {\r\n        bindings = getBindings(container.parent, serviceIdentifier);\r\n    }\r\n    return bindings;\r\n}\r\nfunction plan(metadataReader, container, isMultiInject, targetType, serviceIdentifier, key, value, avoidConstraints) {\r\n    if (avoidConstraints === void 0) { avoidConstraints = false; }\r\n    var context = new Context(container);\r\n    var target = _createTarget(isMultiInject, targetType, serviceIdentifier, '', key, value);\r\n    try {\r\n        _createSubRequests(metadataReader, avoidConstraints, serviceIdentifier, context, null, target);\r\n        return context;\r\n    }\r\n    catch (error) {\r\n        if (isStackOverflowExeption(error)) {\r\n            circularDependencyToException(context.plan.rootRequest);\r\n        }\r\n        throw error;\r\n    }\r\n}\r\nfunction createMockRequest(container, serviceIdentifier, key, value) {\r\n    var target = new Target(TargetTypeEnum.Variable, '', serviceIdentifier, new Metadata(key, value));\r\n    var context = new Context(container);\r\n    var request = new Request(serviceIdentifier, context, null, [], target);\r\n    return request;\r\n}\r\nexport { plan, createMockRequest, getBindingDictionary };\r\n","function isPromise(object) {\r\n    var isObjectOrFunction = (typeof object === 'object' && object !== null) || typeof object === 'function';\r\n    return isObjectOrFunction && typeof object.then === \"function\";\r\n}\r\nfunction isPromiseOrContainsPromise(object) {\r\n    if (isPromise(object)) {\r\n        return true;\r\n    }\r\n    return Array.isArray(object) && object.some(isPromise);\r\n}\r\nexport { isPromise, isPromiseOrContainsPromise };\r\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nimport { BindingScopeEnum } from '../constants/literal_types';\r\nimport { isPromise } from '../utils/async';\r\nexport var tryGetFromScope = function (requestScope, binding) {\r\n    if ((binding.scope === BindingScopeEnum.Singleton) && binding.activated) {\r\n        return binding.cache;\r\n    }\r\n    if (binding.scope === BindingScopeEnum.Request &&\r\n        requestScope.has(binding.id)) {\r\n        return requestScope.get(binding.id);\r\n    }\r\n    return null;\r\n};\r\nexport var saveToScope = function (requestScope, binding, result) {\r\n    if (binding.scope === BindingScopeEnum.Singleton) {\r\n        _saveToSingletonScope(binding, result);\r\n    }\r\n    if (binding.scope === BindingScopeEnum.Request) {\r\n        _saveToRequestScope(requestScope, binding, result);\r\n    }\r\n};\r\nvar _saveToRequestScope = function (requestScope, binding, result) {\r\n    if (!requestScope.has(binding.id)) {\r\n        requestScope.set(binding.id, result);\r\n    }\r\n};\r\nvar _saveToSingletonScope = function (binding, result) {\r\n    binding.cache = result;\r\n    binding.activated = true;\r\n    if (isPromise(result)) {\r\n        void _saveAsyncResultToSingletonScope(binding, result);\r\n    }\r\n};\r\nvar _saveAsyncResultToSingletonScope = function (binding, asyncResult) { return __awaiter(void 0, void 0, void 0, function () {\r\n    var result, ex_1;\r\n    return __generator(this, function (_a) {\r\n        switch (_a.label) {\r\n            case 0:\r\n                _a.trys.push([0, 2, , 3]);\r\n                return [4, asyncResult];\r\n            case 1:\r\n                result = _a.sent();\r\n                binding.cache = result;\r\n                return [3, 3];\r\n            case 2:\r\n                ex_1 = _a.sent();\r\n                binding.cache = null;\r\n                binding.activated = false;\r\n                throw ex_1;\r\n            case 3: return [2];\r\n        }\r\n    });\r\n}); };\r\n","export var FactoryType;\r\n(function (FactoryType) {\r\n    FactoryType[\"DynamicValue\"] = \"toDynamicValue\";\r\n    FactoryType[\"Factory\"] = \"toFactory\";\r\n    FactoryType[\"Provider\"] = \"toProvider\";\r\n})(FactoryType || (FactoryType = {}));\r\n","var __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n};\r\nimport { ON_DEACTIVATION_ERROR, POST_CONSTRUCT_ERROR, PRE_DESTROY_ERROR } from '../constants/error_msgs';\r\nimport { BindingScopeEnum, TargetTypeEnum } from '../constants/literal_types';\r\nimport * as METADATA_KEY from '../constants/metadata_keys';\r\nimport { isPromise, isPromiseOrContainsPromise } from '../utils/async';\r\nfunction _resolveRequests(childRequests, resolveRequest) {\r\n    return childRequests.reduce(function (resolvedRequests, childRequest) {\r\n        var injection = resolveRequest(childRequest);\r\n        var targetType = childRequest.target.type;\r\n        if (targetType === TargetTypeEnum.ConstructorArgument) {\r\n            resolvedRequests.constructorInjections.push(injection);\r\n        }\r\n        else {\r\n            resolvedRequests.propertyRequests.push(childRequest);\r\n            resolvedRequests.propertyInjections.push(injection);\r\n        }\r\n        if (!resolvedRequests.isAsync) {\r\n            resolvedRequests.isAsync = isPromiseOrContainsPromise(injection);\r\n        }\r\n        return resolvedRequests;\r\n    }, { constructorInjections: [], propertyInjections: [], propertyRequests: [], isAsync: false });\r\n}\r\nfunction _createInstance(constr, childRequests, resolveRequest) {\r\n    var result;\r\n    if (childRequests.length > 0) {\r\n        var resolved = _resolveRequests(childRequests, resolveRequest);\r\n        var createInstanceWithInjectionsArg = __assign(__assign({}, resolved), { constr: constr });\r\n        if (resolved.isAsync) {\r\n            result = createInstanceWithInjectionsAsync(createInstanceWithInjectionsArg);\r\n        }\r\n        else {\r\n            result = createInstanceWithInjections(createInstanceWithInjectionsArg);\r\n        }\r\n    }\r\n    else {\r\n        result = new constr();\r\n    }\r\n    return result;\r\n}\r\nfunction createInstanceWithInjections(args) {\r\n    var _a;\r\n    var instance = new ((_a = args.constr).bind.apply(_a, __spreadArray([void 0], args.constructorInjections, false)))();\r\n    args.propertyRequests.forEach(function (r, index) {\r\n        var property = r.target.identifier;\r\n        var injection = args.propertyInjections[index];\r\n        if (!r.target.isOptional() || injection !== undefined) {\r\n            instance[property] = injection;\r\n        }\r\n    });\r\n    return instance;\r\n}\r\nfunction createInstanceWithInjectionsAsync(args) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var constructorInjections, propertyInjections;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0: return [4, possiblyWaitInjections(args.constructorInjections)];\r\n                case 1:\r\n                    constructorInjections = _a.sent();\r\n                    return [4, possiblyWaitInjections(args.propertyInjections)];\r\n                case 2:\r\n                    propertyInjections = _a.sent();\r\n                    return [2, createInstanceWithInjections(__assign(__assign({}, args), { constructorInjections: constructorInjections, propertyInjections: propertyInjections }))];\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction possiblyWaitInjections(possiblePromiseinjections) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var injections, _i, possiblePromiseinjections_1, injection;\r\n        return __generator(this, function (_a) {\r\n            injections = [];\r\n            for (_i = 0, possiblePromiseinjections_1 = possiblePromiseinjections; _i < possiblePromiseinjections_1.length; _i++) {\r\n                injection = possiblePromiseinjections_1[_i];\r\n                if (Array.isArray(injection)) {\r\n                    injections.push(Promise.all(injection));\r\n                }\r\n                else {\r\n                    injections.push(injection);\r\n                }\r\n            }\r\n            return [2, Promise.all(injections)];\r\n        });\r\n    });\r\n}\r\nfunction _getInstanceAfterPostConstruct(constr, result) {\r\n    var postConstructResult = _postConstruct(constr, result);\r\n    if (isPromise(postConstructResult)) {\r\n        return postConstructResult.then(function () { return result; });\r\n    }\r\n    else {\r\n        return result;\r\n    }\r\n}\r\nfunction _postConstruct(constr, instance) {\r\n    var _a, _b;\r\n    if (Reflect.hasMetadata(METADATA_KEY.POST_CONSTRUCT, constr)) {\r\n        var data = Reflect.getMetadata(METADATA_KEY.POST_CONSTRUCT, constr);\r\n        try {\r\n            return (_b = (_a = instance)[data.value]) === null || _b === void 0 ? void 0 : _b.call(_a);\r\n        }\r\n        catch (e) {\r\n            if (e instanceof Error) {\r\n                throw new Error(POST_CONSTRUCT_ERROR(constr.name, e.message));\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction _validateInstanceResolution(binding, constr) {\r\n    if (binding.scope !== BindingScopeEnum.Singleton) {\r\n        _throwIfHandlingDeactivation(binding, constr);\r\n    }\r\n}\r\nfunction _throwIfHandlingDeactivation(binding, constr) {\r\n    var scopeErrorMessage = \"Class cannot be instantiated in \" + (binding.scope === BindingScopeEnum.Request ?\r\n        'request' :\r\n        'transient') + \" scope.\";\r\n    if (typeof binding.onDeactivation === 'function') {\r\n        throw new Error(ON_DEACTIVATION_ERROR(constr.name, scopeErrorMessage));\r\n    }\r\n    if (Reflect.hasMetadata(METADATA_KEY.PRE_DESTROY, constr)) {\r\n        throw new Error(PRE_DESTROY_ERROR(constr.name, scopeErrorMessage));\r\n    }\r\n}\r\nfunction resolveInstance(binding, constr, childRequests, resolveRequest) {\r\n    _validateInstanceResolution(binding, constr);\r\n    var result = _createInstance(constr, childRequests, resolveRequest);\r\n    if (isPromise(result)) {\r\n        return result.then(function (resolvedResult) { return _getInstanceAfterPostConstruct(constr, resolvedResult); });\r\n    }\r\n    else {\r\n        return _getInstanceAfterPostConstruct(constr, result);\r\n    }\r\n}\r\nexport { resolveInstance };\r\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nimport * as ERROR_MSGS from '../constants/error_msgs';\r\nimport { BindingTypeEnum } from '../constants/literal_types';\r\nimport { getBindingDictionary } from '../planning/planner';\r\nimport { saveToScope, tryGetFromScope } from '../scope/scope';\r\nimport { isPromise } from '../utils/async';\r\nimport { getFactoryDetails, ensureFullyBound } from '../utils/binding_utils';\r\nimport { tryAndThrowErrorIfStackOverflow } from '../utils/exceptions';\r\nimport { resolveInstance } from './instantiation';\r\nvar _resolveRequest = function (requestScope) {\r\n    return function (request) {\r\n        request.parentContext.setCurrentRequest(request);\r\n        var bindings = request.bindings;\r\n        var childRequests = request.childRequests;\r\n        var targetIsAnArray = request.target && request.target.isArray();\r\n        var targetParentIsNotAnArray = !request.parentRequest ||\r\n            !request.parentRequest.target ||\r\n            !request.target ||\r\n            !request.parentRequest.target.matchesArray(request.target.serviceIdentifier);\r\n        if (targetIsAnArray && targetParentIsNotAnArray) {\r\n            return childRequests.map(function (childRequest) {\r\n                var _f = _resolveRequest(requestScope);\r\n                return _f(childRequest);\r\n            });\r\n        }\r\n        else {\r\n            if (request.target.isOptional() && bindings.length === 0) {\r\n                return undefined;\r\n            }\r\n            var binding = bindings[0];\r\n            return _resolveBinding(requestScope, request, binding);\r\n        }\r\n    };\r\n};\r\nvar _resolveFactoryFromBinding = function (binding, context) {\r\n    var factoryDetails = getFactoryDetails(binding);\r\n    return tryAndThrowErrorIfStackOverflow(function () { return factoryDetails.factory.bind(binding)(context); }, function () { return new Error(ERROR_MSGS.CIRCULAR_DEPENDENCY_IN_FACTORY(factoryDetails.factoryType, context.currentRequest.serviceIdentifier.toString())); });\r\n};\r\nvar _getResolvedFromBinding = function (requestScope, request, binding) {\r\n    var result;\r\n    var childRequests = request.childRequests;\r\n    ensureFullyBound(binding);\r\n    switch (binding.type) {\r\n        case BindingTypeEnum.ConstantValue:\r\n        case BindingTypeEnum.Function:\r\n            result = binding.cache;\r\n            break;\r\n        case BindingTypeEnum.Constructor:\r\n            result = binding.implementationType;\r\n            break;\r\n        case BindingTypeEnum.Instance:\r\n            result = resolveInstance(binding, binding.implementationType, childRequests, _resolveRequest(requestScope));\r\n            break;\r\n        default:\r\n            result = _resolveFactoryFromBinding(binding, request.parentContext);\r\n    }\r\n    return result;\r\n};\r\nvar _resolveInScope = function (requestScope, binding, resolveFromBinding) {\r\n    var result = tryGetFromScope(requestScope, binding);\r\n    if (result !== null) {\r\n        return result;\r\n    }\r\n    result = resolveFromBinding();\r\n    saveToScope(requestScope, binding, result);\r\n    return result;\r\n};\r\nvar _resolveBinding = function (requestScope, request, binding) {\r\n    return _resolveInScope(requestScope, binding, function () {\r\n        var result = _getResolvedFromBinding(requestScope, request, binding);\r\n        if (isPromise(result)) {\r\n            result = result.then(function (resolved) { return _onActivation(request, binding, resolved); });\r\n        }\r\n        else {\r\n            result = _onActivation(request, binding, result);\r\n        }\r\n        return result;\r\n    });\r\n};\r\nfunction _onActivation(request, binding, resolved) {\r\n    var result = _bindingActivation(request.parentContext, binding, resolved);\r\n    var containersIterator = _getContainersIterator(request.parentContext.container);\r\n    var container;\r\n    var containersIteratorResult = containersIterator.next();\r\n    do {\r\n        container = containersIteratorResult.value;\r\n        var context_1 = request.parentContext;\r\n        var serviceIdentifier = request.serviceIdentifier;\r\n        var activationsIterator = _getContainerActivationsForService(container, serviceIdentifier);\r\n        if (isPromise(result)) {\r\n            result = _activateContainerAsync(activationsIterator, context_1, result);\r\n        }\r\n        else {\r\n            result = _activateContainer(activationsIterator, context_1, result);\r\n        }\r\n        containersIteratorResult = containersIterator.next();\r\n    } while (containersIteratorResult.done !== true && !getBindingDictionary(container).hasKey(request.serviceIdentifier));\r\n    return result;\r\n}\r\nvar _bindingActivation = function (context, binding, previousResult) {\r\n    var result;\r\n    if (typeof binding.onActivation === 'function') {\r\n        result = binding.onActivation(context, previousResult);\r\n    }\r\n    else {\r\n        result = previousResult;\r\n    }\r\n    return result;\r\n};\r\nvar _activateContainer = function (activationsIterator, context, result) {\r\n    var activation = activationsIterator.next();\r\n    while (!activation.done) {\r\n        result = activation.value(context, result);\r\n        if (isPromise(result)) {\r\n            return _activateContainerAsync(activationsIterator, context, result);\r\n        }\r\n        activation = activationsIterator.next();\r\n    }\r\n    return result;\r\n};\r\nvar _activateContainerAsync = function (activationsIterator, context, resultPromise) { return __awaiter(void 0, void 0, void 0, function () {\r\n    var result, activation;\r\n    return __generator(this, function (_a) {\r\n        switch (_a.label) {\r\n            case 0: return [4, resultPromise];\r\n            case 1:\r\n                result = _a.sent();\r\n                activation = activationsIterator.next();\r\n                _a.label = 2;\r\n            case 2:\r\n                if (!!activation.done) return [3, 4];\r\n                return [4, activation.value(context, result)];\r\n            case 3:\r\n                result = _a.sent();\r\n                activation = activationsIterator.next();\r\n                return [3, 2];\r\n            case 4: return [2, result];\r\n        }\r\n    });\r\n}); };\r\nvar _getContainerActivationsForService = function (container, serviceIdentifier) {\r\n    var activations = container._activations;\r\n    return activations.hasKey(serviceIdentifier) ? activations.get(serviceIdentifier).values() : [].values();\r\n};\r\nvar _getContainersIterator = function (container) {\r\n    var containersStack = [container];\r\n    var parent = container.parent;\r\n    while (parent !== null) {\r\n        containersStack.push(parent);\r\n        parent = parent.parent;\r\n    }\r\n    var getNextContainer = function () {\r\n        var nextContainer = containersStack.pop();\r\n        if (nextContainer !== undefined) {\r\n            return { done: false, value: nextContainer };\r\n        }\r\n        else {\r\n            return { done: true, value: undefined };\r\n        }\r\n    };\r\n    var containersIterator = {\r\n        next: getNextContainer,\r\n    };\r\n    return containersIterator;\r\n};\r\nfunction resolve(context) {\r\n    var _f = _resolveRequest(context.plan.rootRequest.requestScope);\r\n    return _f(context.plan.rootRequest);\r\n}\r\nexport { resolve };\r\n","import { getServiceIdentifierAsString } from '../utils/serialization';\r\nimport * as ERROR_MSGS from '../constants/error_msgs';\r\nimport { BindingTypeEnum } from '../constants/literal_types';\r\nimport { FactoryType } from './factory_type';\r\nexport var multiBindToService = function (container) {\r\n    return function (service) {\r\n        return function () {\r\n            var types = [];\r\n            for (var _i = 0; _i < arguments.length; _i++) {\r\n                types[_i] = arguments[_i];\r\n            }\r\n            return types.forEach(function (t) { return container.bind(t).toService(service); });\r\n        };\r\n    };\r\n};\r\nexport var ensureFullyBound = function (binding) {\r\n    var boundValue = null;\r\n    switch (binding.type) {\r\n        case BindingTypeEnum.ConstantValue:\r\n        case BindingTypeEnum.Function:\r\n            boundValue = binding.cache;\r\n            break;\r\n        case BindingTypeEnum.Constructor:\r\n        case BindingTypeEnum.Instance:\r\n            boundValue = binding.implementationType;\r\n            break;\r\n        case BindingTypeEnum.DynamicValue:\r\n            boundValue = binding.dynamicValue;\r\n            break;\r\n        case BindingTypeEnum.Provider:\r\n            boundValue = binding.provider;\r\n            break;\r\n        case BindingTypeEnum.Factory:\r\n            boundValue = binding.factory;\r\n            break;\r\n    }\r\n    if (boundValue === null) {\r\n        var serviceIdentifierAsString = getServiceIdentifierAsString(binding.serviceIdentifier);\r\n        throw new Error(ERROR_MSGS.INVALID_BINDING_TYPE + \" \" + serviceIdentifierAsString);\r\n    }\r\n};\r\nexport var getFactoryDetails = function (binding) {\r\n    switch (binding.type) {\r\n        case BindingTypeEnum.Factory:\r\n            return { factory: binding.factory, factoryType: FactoryType.Factory };\r\n        case BindingTypeEnum.Provider:\r\n            return { factory: binding.provider, factoryType: FactoryType.Provider };\r\n        case BindingTypeEnum.DynamicValue:\r\n            return { factory: binding.dynamicValue, factoryType: FactoryType.DynamicValue };\r\n        default:\r\n            throw new Error(\"Unexpected factory type \" + binding.type);\r\n    }\r\n};\r\n","import * as METADATA_KEY from '../constants/metadata_keys';\r\nimport { Metadata } from '../planning/metadata';\r\nvar traverseAncerstors = function (request, constraint) {\r\n    var parent = request.parentRequest;\r\n    if (parent !== null) {\r\n        return constraint(parent) ? true : traverseAncerstors(parent, constraint);\r\n    }\r\n    else {\r\n        return false;\r\n    }\r\n};\r\nvar taggedConstraint = function (key) { return function (value) {\r\n    var constraint = function (request) {\r\n        return request !== null && request.target !== null && request.target.matchesTag(key)(value);\r\n    };\r\n    constraint.metaData = new Metadata(key, value);\r\n    return constraint;\r\n}; };\r\nvar namedConstraint = taggedConstraint(METADATA_KEY.NAMED_TAG);\r\nvar typeConstraint = function (type) { return function (request) {\r\n    var binding = null;\r\n    if (request !== null) {\r\n        binding = request.bindings[0];\r\n        if (typeof type === 'string') {\r\n            var serviceIdentifier = binding.serviceIdentifier;\r\n            return serviceIdentifier === type;\r\n        }\r\n        else {\r\n            var constructor = request.bindings[0].implementationType;\r\n            return type === constructor;\r\n        }\r\n    }\r\n    return false;\r\n}; };\r\nexport { traverseAncerstors, taggedConstraint, namedConstraint, typeConstraint };\r\n","import { BindingOnSyntax } from './binding_on_syntax';\r\nimport { namedConstraint, taggedConstraint, traverseAncerstors, typeConstraint } from './constraint_helpers';\r\nvar BindingWhenSyntax = (function () {\r\n    function BindingWhenSyntax(binding) {\r\n        this._binding = binding;\r\n    }\r\n    BindingWhenSyntax.prototype.when = function (constraint) {\r\n        this._binding.constraint = constraint;\r\n        return new BindingOnSyntax(this._binding);\r\n    };\r\n    BindingWhenSyntax.prototype.whenTargetNamed = function (name) {\r\n        this._binding.constraint = namedConstraint(name);\r\n        return new BindingOnSyntax(this._binding);\r\n    };\r\n    BindingWhenSyntax.prototype.whenTargetIsDefault = function () {\r\n        this._binding.constraint = function (request) {\r\n            if (request === null) {\r\n                return false;\r\n            }\r\n            var targetIsDefault = (request.target !== null) &&\r\n                (!request.target.isNamed()) &&\r\n                (!request.target.isTagged());\r\n            return targetIsDefault;\r\n        };\r\n        return new BindingOnSyntax(this._binding);\r\n    };\r\n    BindingWhenSyntax.prototype.whenTargetTagged = function (tag, value) {\r\n        this._binding.constraint = taggedConstraint(tag)(value);\r\n        return new BindingOnSyntax(this._binding);\r\n    };\r\n    BindingWhenSyntax.prototype.whenInjectedInto = function (parent) {\r\n        this._binding.constraint = function (request) {\r\n            return request !== null && typeConstraint(parent)(request.parentRequest);\r\n        };\r\n        return new BindingOnSyntax(this._binding);\r\n    };\r\n    BindingWhenSyntax.prototype.whenParentNamed = function (name) {\r\n        this._binding.constraint = function (request) {\r\n            return request !== null && namedConstraint(name)(request.parentRequest);\r\n        };\r\n        return new BindingOnSyntax(this._binding);\r\n    };\r\n    BindingWhenSyntax.prototype.whenParentTagged = function (tag, value) {\r\n        this._binding.constraint = function (request) {\r\n            return request !== null && taggedConstraint(tag)(value)(request.parentRequest);\r\n        };\r\n        return new BindingOnSyntax(this._binding);\r\n    };\r\n    BindingWhenSyntax.prototype.whenAnyAncestorIs = function (ancestor) {\r\n        this._binding.constraint = function (request) {\r\n            return request !== null && traverseAncerstors(request, typeConstraint(ancestor));\r\n        };\r\n        return new BindingOnSyntax(this._binding);\r\n    };\r\n    BindingWhenSyntax.prototype.whenNoAncestorIs = function (ancestor) {\r\n        this._binding.constraint = function (request) {\r\n            return request !== null && !traverseAncerstors(request, typeConstraint(ancestor));\r\n        };\r\n        return new BindingOnSyntax(this._binding);\r\n    };\r\n    BindingWhenSyntax.prototype.whenAnyAncestorNamed = function (name) {\r\n        this._binding.constraint = function (request) {\r\n            return request !== null && traverseAncerstors(request, namedConstraint(name));\r\n        };\r\n        return new BindingOnSyntax(this._binding);\r\n    };\r\n    BindingWhenSyntax.prototype.whenNoAncestorNamed = function (name) {\r\n        this._binding.constraint = function (request) {\r\n            return request !== null && !traverseAncerstors(request, namedConstraint(name));\r\n        };\r\n        return new BindingOnSyntax(this._binding);\r\n    };\r\n    BindingWhenSyntax.prototype.whenAnyAncestorTagged = function (tag, value) {\r\n        this._binding.constraint = function (request) {\r\n            return request !== null && traverseAncerstors(request, taggedConstraint(tag)(value));\r\n        };\r\n        return new BindingOnSyntax(this._binding);\r\n    };\r\n    BindingWhenSyntax.prototype.whenNoAncestorTagged = function (tag, value) {\r\n        this._binding.constraint = function (request) {\r\n            return request !== null && !traverseAncerstors(request, taggedConstraint(tag)(value));\r\n        };\r\n        return new BindingOnSyntax(this._binding);\r\n    };\r\n    BindingWhenSyntax.prototype.whenAnyAncestorMatches = function (constraint) {\r\n        this._binding.constraint = function (request) {\r\n            return request !== null && traverseAncerstors(request, constraint);\r\n        };\r\n        return new BindingOnSyntax(this._binding);\r\n    };\r\n    BindingWhenSyntax.prototype.whenNoAncestorMatches = function (constraint) {\r\n        this._binding.constraint = function (request) {\r\n            return request !== null && !traverseAncerstors(request, constraint);\r\n        };\r\n        return new BindingOnSyntax(this._binding);\r\n    };\r\n    return BindingWhenSyntax;\r\n}());\r\nexport { BindingWhenSyntax };\r\n","import { BindingWhenSyntax } from './binding_when_syntax';\r\nvar BindingOnSyntax = (function () {\r\n    function BindingOnSyntax(binding) {\r\n        this._binding = binding;\r\n    }\r\n    BindingOnSyntax.prototype.onActivation = function (handler) {\r\n        this._binding.onActivation = handler;\r\n        return new BindingWhenSyntax(this._binding);\r\n    };\r\n    BindingOnSyntax.prototype.onDeactivation = function (handler) {\r\n        this._binding.onDeactivation = handler;\r\n        return new BindingWhenSyntax(this._binding);\r\n    };\r\n    return BindingOnSyntax;\r\n}());\r\nexport { BindingOnSyntax };\r\n","import { BindingOnSyntax } from './binding_on_syntax';\r\nimport { BindingWhenSyntax } from './binding_when_syntax';\r\nvar BindingWhenOnSyntax = (function () {\r\n    function BindingWhenOnSyntax(binding) {\r\n        this._binding = binding;\r\n        this._bindingWhenSyntax = new BindingWhenSyntax(this._binding);\r\n        this._bindingOnSyntax = new BindingOnSyntax(this._binding);\r\n    }\r\n    BindingWhenOnSyntax.prototype.when = function (constraint) {\r\n        return this._bindingWhenSyntax.when(constraint);\r\n    };\r\n    BindingWhenOnSyntax.prototype.whenTargetNamed = function (name) {\r\n        return this._bindingWhenSyntax.whenTargetNamed(name);\r\n    };\r\n    BindingWhenOnSyntax.prototype.whenTargetIsDefault = function () {\r\n        return this._bindingWhenSyntax.whenTargetIsDefault();\r\n    };\r\n    BindingWhenOnSyntax.prototype.whenTargetTagged = function (tag, value) {\r\n        return this._bindingWhenSyntax.whenTargetTagged(tag, value);\r\n    };\r\n    BindingWhenOnSyntax.prototype.whenInjectedInto = function (parent) {\r\n        return this._bindingWhenSyntax.whenInjectedInto(parent);\r\n    };\r\n    BindingWhenOnSyntax.prototype.whenParentNamed = function (name) {\r\n        return this._bindingWhenSyntax.whenParentNamed(name);\r\n    };\r\n    BindingWhenOnSyntax.prototype.whenParentTagged = function (tag, value) {\r\n        return this._bindingWhenSyntax.whenParentTagged(tag, value);\r\n    };\r\n    BindingWhenOnSyntax.prototype.whenAnyAncestorIs = function (ancestor) {\r\n        return this._bindingWhenSyntax.whenAnyAncestorIs(ancestor);\r\n    };\r\n    BindingWhenOnSyntax.prototype.whenNoAncestorIs = function (ancestor) {\r\n        return this._bindingWhenSyntax.whenNoAncestorIs(ancestor);\r\n    };\r\n    BindingWhenOnSyntax.prototype.whenAnyAncestorNamed = function (name) {\r\n        return this._bindingWhenSyntax.whenAnyAncestorNamed(name);\r\n    };\r\n    BindingWhenOnSyntax.prototype.whenAnyAncestorTagged = function (tag, value) {\r\n        return this._bindingWhenSyntax.whenAnyAncestorTagged(tag, value);\r\n    };\r\n    BindingWhenOnSyntax.prototype.whenNoAncestorNamed = function (name) {\r\n        return this._bindingWhenSyntax.whenNoAncestorNamed(name);\r\n    };\r\n    BindingWhenOnSyntax.prototype.whenNoAncestorTagged = function (tag, value) {\r\n        return this._bindingWhenSyntax.whenNoAncestorTagged(tag, value);\r\n    };\r\n    BindingWhenOnSyntax.prototype.whenAnyAncestorMatches = function (constraint) {\r\n        return this._bindingWhenSyntax.whenAnyAncestorMatches(constraint);\r\n    };\r\n    BindingWhenOnSyntax.prototype.whenNoAncestorMatches = function (constraint) {\r\n        return this._bindingWhenSyntax.whenNoAncestorMatches(constraint);\r\n    };\r\n    BindingWhenOnSyntax.prototype.onActivation = function (handler) {\r\n        return this._bindingOnSyntax.onActivation(handler);\r\n    };\r\n    BindingWhenOnSyntax.prototype.onDeactivation = function (handler) {\r\n        return this._bindingOnSyntax.onDeactivation(handler);\r\n    };\r\n    return BindingWhenOnSyntax;\r\n}());\r\nexport { BindingWhenOnSyntax };\r\n","import { BindingScopeEnum } from '../constants/literal_types';\r\nimport { BindingWhenOnSyntax } from './binding_when_on_syntax';\r\nvar BindingInSyntax = (function () {\r\n    function BindingInSyntax(binding) {\r\n        this._binding = binding;\r\n    }\r\n    BindingInSyntax.prototype.inRequestScope = function () {\r\n        this._binding.scope = BindingScopeEnum.Request;\r\n        return new BindingWhenOnSyntax(this._binding);\r\n    };\r\n    BindingInSyntax.prototype.inSingletonScope = function () {\r\n        this._binding.scope = BindingScopeEnum.Singleton;\r\n        return new BindingWhenOnSyntax(this._binding);\r\n    };\r\n    BindingInSyntax.prototype.inTransientScope = function () {\r\n        this._binding.scope = BindingScopeEnum.Transient;\r\n        return new BindingWhenOnSyntax(this._binding);\r\n    };\r\n    return BindingInSyntax;\r\n}());\r\nexport { BindingInSyntax };\r\n","import { BindingInSyntax } from './binding_in_syntax';\r\nimport { BindingOnSyntax } from './binding_on_syntax';\r\nimport { BindingWhenSyntax } from './binding_when_syntax';\r\nvar BindingInWhenOnSyntax = (function () {\r\n    function BindingInWhenOnSyntax(binding) {\r\n        this._binding = binding;\r\n        this._bindingWhenSyntax = new BindingWhenSyntax(this._binding);\r\n        this._bindingOnSyntax = new BindingOnSyntax(this._binding);\r\n        this._bindingInSyntax = new BindingInSyntax(binding);\r\n    }\r\n    BindingInWhenOnSyntax.prototype.inRequestScope = function () {\r\n        return this._bindingInSyntax.inRequestScope();\r\n    };\r\n    BindingInWhenOnSyntax.prototype.inSingletonScope = function () {\r\n        return this._bindingInSyntax.inSingletonScope();\r\n    };\r\n    BindingInWhenOnSyntax.prototype.inTransientScope = function () {\r\n        return this._bindingInSyntax.inTransientScope();\r\n    };\r\n    BindingInWhenOnSyntax.prototype.when = function (constraint) {\r\n        return this._bindingWhenSyntax.when(constraint);\r\n    };\r\n    BindingInWhenOnSyntax.prototype.whenTargetNamed = function (name) {\r\n        return this._bindingWhenSyntax.whenTargetNamed(name);\r\n    };\r\n    BindingInWhenOnSyntax.prototype.whenTargetIsDefault = function () {\r\n        return this._bindingWhenSyntax.whenTargetIsDefault();\r\n    };\r\n    BindingInWhenOnSyntax.prototype.whenTargetTagged = function (tag, value) {\r\n        return this._bindingWhenSyntax.whenTargetTagged(tag, value);\r\n    };\r\n    BindingInWhenOnSyntax.prototype.whenInjectedInto = function (parent) {\r\n        return this._bindingWhenSyntax.whenInjectedInto(parent);\r\n    };\r\n    BindingInWhenOnSyntax.prototype.whenParentNamed = function (name) {\r\n        return this._bindingWhenSyntax.whenParentNamed(name);\r\n    };\r\n    BindingInWhenOnSyntax.prototype.whenParentTagged = function (tag, value) {\r\n        return this._bindingWhenSyntax.whenParentTagged(tag, value);\r\n    };\r\n    BindingInWhenOnSyntax.prototype.whenAnyAncestorIs = function (ancestor) {\r\n        return this._bindingWhenSyntax.whenAnyAncestorIs(ancestor);\r\n    };\r\n    BindingInWhenOnSyntax.prototype.whenNoAncestorIs = function (ancestor) {\r\n        return this._bindingWhenSyntax.whenNoAncestorIs(ancestor);\r\n    };\r\n    BindingInWhenOnSyntax.prototype.whenAnyAncestorNamed = function (name) {\r\n        return this._bindingWhenSyntax.whenAnyAncestorNamed(name);\r\n    };\r\n    BindingInWhenOnSyntax.prototype.whenAnyAncestorTagged = function (tag, value) {\r\n        return this._bindingWhenSyntax.whenAnyAncestorTagged(tag, value);\r\n    };\r\n    BindingInWhenOnSyntax.prototype.whenNoAncestorNamed = function (name) {\r\n        return this._bindingWhenSyntax.whenNoAncestorNamed(name);\r\n    };\r\n    BindingInWhenOnSyntax.prototype.whenNoAncestorTagged = function (tag, value) {\r\n        return this._bindingWhenSyntax.whenNoAncestorTagged(tag, value);\r\n    };\r\n    BindingInWhenOnSyntax.prototype.whenAnyAncestorMatches = function (constraint) {\r\n        return this._bindingWhenSyntax.whenAnyAncestorMatches(constraint);\r\n    };\r\n    BindingInWhenOnSyntax.prototype.whenNoAncestorMatches = function (constraint) {\r\n        return this._bindingWhenSyntax.whenNoAncestorMatches(constraint);\r\n    };\r\n    BindingInWhenOnSyntax.prototype.onActivation = function (handler) {\r\n        return this._bindingOnSyntax.onActivation(handler);\r\n    };\r\n    BindingInWhenOnSyntax.prototype.onDeactivation = function (handler) {\r\n        return this._bindingOnSyntax.onDeactivation(handler);\r\n    };\r\n    return BindingInWhenOnSyntax;\r\n}());\r\nexport { BindingInWhenOnSyntax };\r\n","import * as ERROR_MSGS from \"../constants/error_msgs\";\r\nimport { BindingScopeEnum, BindingTypeEnum } from \"../constants/literal_types\";\r\nimport { BindingInWhenOnSyntax } from \"./binding_in_when_on_syntax\";\r\nimport { BindingWhenOnSyntax } from \"./binding_when_on_syntax\";\r\nvar BindingToSyntax = (function () {\r\n    function BindingToSyntax(binding) {\r\n        this._binding = binding;\r\n    }\r\n    BindingToSyntax.prototype.to = function (constructor) {\r\n        this._binding.type = BindingTypeEnum.Instance;\r\n        this._binding.implementationType = constructor;\r\n        return new BindingInWhenOnSyntax(this._binding);\r\n    };\r\n    BindingToSyntax.prototype.toSelf = function () {\r\n        if (typeof this._binding.serviceIdentifier !== \"function\") {\r\n            throw new Error(\"\" + ERROR_MSGS.INVALID_TO_SELF_VALUE);\r\n        }\r\n        var self = this._binding.serviceIdentifier;\r\n        return this.to(self);\r\n    };\r\n    BindingToSyntax.prototype.toConstantValue = function (value) {\r\n        this._binding.type = BindingTypeEnum.ConstantValue;\r\n        this._binding.cache = value;\r\n        this._binding.dynamicValue = null;\r\n        this._binding.implementationType = null;\r\n        this._binding.scope = BindingScopeEnum.Singleton;\r\n        return new BindingWhenOnSyntax(this._binding);\r\n    };\r\n    BindingToSyntax.prototype.toDynamicValue = function (func) {\r\n        this._binding.type = BindingTypeEnum.DynamicValue;\r\n        this._binding.cache = null;\r\n        this._binding.dynamicValue = func;\r\n        this._binding.implementationType = null;\r\n        return new BindingInWhenOnSyntax(this._binding);\r\n    };\r\n    BindingToSyntax.prototype.toConstructor = function (constructor) {\r\n        this._binding.type = BindingTypeEnum.Constructor;\r\n        this._binding.implementationType = constructor;\r\n        this._binding.scope = BindingScopeEnum.Singleton;\r\n        return new BindingWhenOnSyntax(this._binding);\r\n    };\r\n    BindingToSyntax.prototype.toFactory = function (factory) {\r\n        this._binding.type = BindingTypeEnum.Factory;\r\n        this._binding.factory = factory;\r\n        this._binding.scope = BindingScopeEnum.Singleton;\r\n        return new BindingWhenOnSyntax(this._binding);\r\n    };\r\n    BindingToSyntax.prototype.toFunction = function (func) {\r\n        if (typeof func !== \"function\") {\r\n            throw new Error(ERROR_MSGS.INVALID_FUNCTION_BINDING);\r\n        }\r\n        var bindingWhenOnSyntax = this.toConstantValue(func);\r\n        this._binding.type = BindingTypeEnum.Function;\r\n        this._binding.scope = BindingScopeEnum.Singleton;\r\n        return bindingWhenOnSyntax;\r\n    };\r\n    BindingToSyntax.prototype.toAutoFactory = function (serviceIdentifier) {\r\n        this._binding.type = BindingTypeEnum.Factory;\r\n        this._binding.factory = function (context) {\r\n            var autofactory = function () { return context.container.get(serviceIdentifier); };\r\n            return autofactory;\r\n        };\r\n        this._binding.scope = BindingScopeEnum.Singleton;\r\n        return new BindingWhenOnSyntax(this._binding);\r\n    };\r\n    BindingToSyntax.prototype.toAutoNamedFactory = function (serviceIdentifier) {\r\n        this._binding.type = BindingTypeEnum.Factory;\r\n        this._binding.factory = function (context) {\r\n            return function (named) { return context.container.getNamed(serviceIdentifier, named); };\r\n        };\r\n        return new BindingWhenOnSyntax(this._binding);\r\n    };\r\n    BindingToSyntax.prototype.toProvider = function (provider) {\r\n        this._binding.type = BindingTypeEnum.Provider;\r\n        this._binding.provider = provider;\r\n        this._binding.scope = BindingScopeEnum.Singleton;\r\n        return new BindingWhenOnSyntax(this._binding);\r\n    };\r\n    BindingToSyntax.prototype.toService = function (service) {\r\n        this.toDynamicValue(function (context) { return context.container.get(service); });\r\n    };\r\n    return BindingToSyntax;\r\n}());\r\nexport { BindingToSyntax };\r\n","var ContainerSnapshot = (function () {\r\n    function ContainerSnapshot() {\r\n    }\r\n    ContainerSnapshot.of = function (bindings, middleware, activations, deactivations, moduleActivationStore) {\r\n        var snapshot = new ContainerSnapshot();\r\n        snapshot.bindings = bindings;\r\n        snapshot.middleware = middleware;\r\n        snapshot.deactivations = deactivations;\r\n        snapshot.activations = activations;\r\n        snapshot.moduleActivationStore = moduleActivationStore;\r\n        return snapshot;\r\n    };\r\n    return ContainerSnapshot;\r\n}());\r\nexport { ContainerSnapshot };\r\n","import * as ERROR_MSGS from '../constants/error_msgs';\r\nimport { isClonable } from '../utils/clonable';\r\nvar Lookup = (function () {\r\n    function Lookup() {\r\n        this._map = new Map();\r\n    }\r\n    Lookup.prototype.getMap = function () {\r\n        return this._map;\r\n    };\r\n    Lookup.prototype.add = function (serviceIdentifier, value) {\r\n        if (serviceIdentifier === null || serviceIdentifier === undefined) {\r\n            throw new Error(ERROR_MSGS.NULL_ARGUMENT);\r\n        }\r\n        if (value === null || value === undefined) {\r\n            throw new Error(ERROR_MSGS.NULL_ARGUMENT);\r\n        }\r\n        var entry = this._map.get(serviceIdentifier);\r\n        if (entry !== undefined) {\r\n            entry.push(value);\r\n        }\r\n        else {\r\n            this._map.set(serviceIdentifier, [value]);\r\n        }\r\n    };\r\n    Lookup.prototype.get = function (serviceIdentifier) {\r\n        if (serviceIdentifier === null || serviceIdentifier === undefined) {\r\n            throw new Error(ERROR_MSGS.NULL_ARGUMENT);\r\n        }\r\n        var entry = this._map.get(serviceIdentifier);\r\n        if (entry !== undefined) {\r\n            return entry;\r\n        }\r\n        else {\r\n            throw new Error(ERROR_MSGS.KEY_NOT_FOUND);\r\n        }\r\n    };\r\n    Lookup.prototype.remove = function (serviceIdentifier) {\r\n        if (serviceIdentifier === null || serviceIdentifier === undefined) {\r\n            throw new Error(ERROR_MSGS.NULL_ARGUMENT);\r\n        }\r\n        if (!this._map.delete(serviceIdentifier)) {\r\n            throw new Error(ERROR_MSGS.KEY_NOT_FOUND);\r\n        }\r\n    };\r\n    Lookup.prototype.removeIntersection = function (lookup) {\r\n        var _this = this;\r\n        this.traverse(function (serviceIdentifier, value) {\r\n            var lookupActivations = lookup.hasKey(serviceIdentifier) ? lookup.get(serviceIdentifier) : undefined;\r\n            if (lookupActivations !== undefined) {\r\n                var filteredValues = value.filter(function (lookupValue) {\r\n                    return !lookupActivations.some(function (moduleActivation) { return lookupValue === moduleActivation; });\r\n                });\r\n                _this._setValue(serviceIdentifier, filteredValues);\r\n            }\r\n        });\r\n    };\r\n    Lookup.prototype.removeByCondition = function (condition) {\r\n        var _this = this;\r\n        var removals = [];\r\n        this._map.forEach(function (entries, key) {\r\n            var updatedEntries = [];\r\n            for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {\r\n                var entry = entries_1[_i];\r\n                var remove = condition(entry);\r\n                if (remove) {\r\n                    removals.push(entry);\r\n                }\r\n                else {\r\n                    updatedEntries.push(entry);\r\n                }\r\n            }\r\n            _this._setValue(key, updatedEntries);\r\n        });\r\n        return removals;\r\n    };\r\n    Lookup.prototype.hasKey = function (serviceIdentifier) {\r\n        if (serviceIdentifier === null || serviceIdentifier === undefined) {\r\n            throw new Error(ERROR_MSGS.NULL_ARGUMENT);\r\n        }\r\n        return this._map.has(serviceIdentifier);\r\n    };\r\n    Lookup.prototype.clone = function () {\r\n        var copy = new Lookup();\r\n        this._map.forEach(function (value, key) {\r\n            value.forEach(function (b) { return copy.add(key, isClonable(b) ? b.clone() : b); });\r\n        });\r\n        return copy;\r\n    };\r\n    Lookup.prototype.traverse = function (func) {\r\n        this._map.forEach(function (value, key) {\r\n            func(key, value);\r\n        });\r\n    };\r\n    Lookup.prototype._setValue = function (serviceIdentifier, value) {\r\n        if (value.length > 0) {\r\n            this._map.set(serviceIdentifier, value);\r\n        }\r\n        else {\r\n            this._map.delete(serviceIdentifier);\r\n        }\r\n    };\r\n    return Lookup;\r\n}());\r\nexport { Lookup };\r\n","function isClonable(obj) {\r\n    return (typeof obj === 'object')\r\n        && (obj !== null)\r\n        && ('clone' in obj)\r\n        && typeof obj.clone === 'function';\r\n}\r\nexport { isClonable };\r\n","import { Lookup } from './lookup';\r\nvar ModuleActivationStore = (function () {\r\n    function ModuleActivationStore() {\r\n        this._map = new Map();\r\n    }\r\n    ModuleActivationStore.prototype.remove = function (moduleId) {\r\n        if (this._map.has(moduleId)) {\r\n            var handlers = this._map.get(moduleId);\r\n            this._map.delete(moduleId);\r\n            return handlers;\r\n        }\r\n        return this._getEmptyHandlersStore();\r\n    };\r\n    ModuleActivationStore.prototype.addDeactivation = function (moduleId, serviceIdentifier, onDeactivation) {\r\n        this._getModuleActivationHandlers(moduleId)\r\n            .onDeactivations.add(serviceIdentifier, onDeactivation);\r\n    };\r\n    ModuleActivationStore.prototype.addActivation = function (moduleId, serviceIdentifier, onActivation) {\r\n        this._getModuleActivationHandlers(moduleId)\r\n            .onActivations.add(serviceIdentifier, onActivation);\r\n    };\r\n    ModuleActivationStore.prototype.clone = function () {\r\n        var clone = new ModuleActivationStore();\r\n        this._map.forEach(function (handlersStore, moduleId) {\r\n            clone._map.set(moduleId, {\r\n                onActivations: handlersStore.onActivations.clone(),\r\n                onDeactivations: handlersStore.onDeactivations.clone(),\r\n            });\r\n        });\r\n        return clone;\r\n    };\r\n    ModuleActivationStore.prototype._getModuleActivationHandlers = function (moduleId) {\r\n        var moduleActivationHandlers = this._map.get(moduleId);\r\n        if (moduleActivationHandlers === undefined) {\r\n            moduleActivationHandlers = this._getEmptyHandlersStore();\r\n            this._map.set(moduleId, moduleActivationHandlers);\r\n        }\r\n        return moduleActivationHandlers;\r\n    };\r\n    ModuleActivationStore.prototype._getEmptyHandlersStore = function () {\r\n        var handlersStore = {\r\n            onActivations: new Lookup(),\r\n            onDeactivations: new Lookup()\r\n        };\r\n        return handlersStore;\r\n    };\r\n    return ModuleActivationStore;\r\n}());\r\nexport { ModuleActivationStore };\r\n","var __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n};\r\nimport { Binding } from '../bindings/binding';\r\nimport * as ERROR_MSGS from '../constants/error_msgs';\r\nimport { BindingScopeEnum, TargetTypeEnum } from '../constants/literal_types';\r\nimport * as METADATA_KEY from '../constants/metadata_keys';\r\nimport { MetadataReader } from '../planning/metadata_reader';\r\nimport { createMockRequest, getBindingDictionary, plan } from '../planning/planner';\r\nimport { resolve } from '../resolution/resolver';\r\nimport { BindingToSyntax } from '../syntax/binding_to_syntax';\r\nimport { isPromise, isPromiseOrContainsPromise } from '../utils/async';\r\nimport { id } from '../utils/id';\r\nimport { getServiceIdentifierAsString } from '../utils/serialization';\r\nimport { ContainerSnapshot } from './container_snapshot';\r\nimport { Lookup } from './lookup';\r\nimport { ModuleActivationStore } from './module_activation_store';\r\nvar Container = (function () {\r\n    function Container(containerOptions) {\r\n        var options = containerOptions || {};\r\n        if (typeof options !== 'object') {\r\n            throw new Error(\"\" + ERROR_MSGS.CONTAINER_OPTIONS_MUST_BE_AN_OBJECT);\r\n        }\r\n        if (options.defaultScope === undefined) {\r\n            options.defaultScope = BindingScopeEnum.Transient;\r\n        }\r\n        else if (options.defaultScope !== BindingScopeEnum.Singleton &&\r\n            options.defaultScope !== BindingScopeEnum.Transient &&\r\n            options.defaultScope !== BindingScopeEnum.Request) {\r\n            throw new Error(\"\" + ERROR_MSGS.CONTAINER_OPTIONS_INVALID_DEFAULT_SCOPE);\r\n        }\r\n        if (options.autoBindInjectable === undefined) {\r\n            options.autoBindInjectable = false;\r\n        }\r\n        else if (typeof options.autoBindInjectable !== 'boolean') {\r\n            throw new Error(\"\" + ERROR_MSGS.CONTAINER_OPTIONS_INVALID_AUTO_BIND_INJECTABLE);\r\n        }\r\n        if (options.skipBaseClassChecks === undefined) {\r\n            options.skipBaseClassChecks = false;\r\n        }\r\n        else if (typeof options.skipBaseClassChecks !== 'boolean') {\r\n            throw new Error(\"\" + ERROR_MSGS.CONTAINER_OPTIONS_INVALID_SKIP_BASE_CHECK);\r\n        }\r\n        this.options = {\r\n            autoBindInjectable: options.autoBindInjectable,\r\n            defaultScope: options.defaultScope,\r\n            skipBaseClassChecks: options.skipBaseClassChecks\r\n        };\r\n        this.id = id();\r\n        this._bindingDictionary = new Lookup();\r\n        this._snapshots = [];\r\n        this._middleware = null;\r\n        this._activations = new Lookup();\r\n        this._deactivations = new Lookup();\r\n        this.parent = null;\r\n        this._metadataReader = new MetadataReader();\r\n        this._moduleActivationStore = new ModuleActivationStore();\r\n    }\r\n    Container.merge = function (container1, container2) {\r\n        var containers = [];\r\n        for (var _i = 2; _i < arguments.length; _i++) {\r\n            containers[_i - 2] = arguments[_i];\r\n        }\r\n        var container = new Container();\r\n        var targetContainers = __spreadArray([container1, container2], containers, true).map(function (targetContainer) { return getBindingDictionary(targetContainer); });\r\n        var bindingDictionary = getBindingDictionary(container);\r\n        function copyDictionary(origin, destination) {\r\n            origin.traverse(function (_key, value) {\r\n                value.forEach(function (binding) {\r\n                    destination.add(binding.serviceIdentifier, binding.clone());\r\n                });\r\n            });\r\n        }\r\n        targetContainers.forEach(function (targetBindingDictionary) {\r\n            copyDictionary(targetBindingDictionary, bindingDictionary);\r\n        });\r\n        return container;\r\n    };\r\n    Container.prototype.load = function () {\r\n        var modules = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            modules[_i] = arguments[_i];\r\n        }\r\n        var getHelpers = this._getContainerModuleHelpersFactory();\r\n        for (var _a = 0, modules_1 = modules; _a < modules_1.length; _a++) {\r\n            var currentModule = modules_1[_a];\r\n            var containerModuleHelpers = getHelpers(currentModule.id);\r\n            currentModule.registry(containerModuleHelpers.bindFunction, containerModuleHelpers.unbindFunction, containerModuleHelpers.isboundFunction, containerModuleHelpers.rebindFunction, containerModuleHelpers.unbindAsyncFunction, containerModuleHelpers.onActivationFunction, containerModuleHelpers.onDeactivationFunction);\r\n        }\r\n    };\r\n    Container.prototype.loadAsync = function () {\r\n        var modules = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            modules[_i] = arguments[_i];\r\n        }\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var getHelpers, _a, modules_2, currentModule, containerModuleHelpers;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        getHelpers = this._getContainerModuleHelpersFactory();\r\n                        _a = 0, modules_2 = modules;\r\n                        _b.label = 1;\r\n                    case 1:\r\n                        if (!(_a < modules_2.length)) return [3, 4];\r\n                        currentModule = modules_2[_a];\r\n                        containerModuleHelpers = getHelpers(currentModule.id);\r\n                        return [4, currentModule.registry(containerModuleHelpers.bindFunction, containerModuleHelpers.unbindFunction, containerModuleHelpers.isboundFunction, containerModuleHelpers.rebindFunction, containerModuleHelpers.unbindAsyncFunction, containerModuleHelpers.onActivationFunction, containerModuleHelpers.onDeactivationFunction)];\r\n                    case 2:\r\n                        _b.sent();\r\n                        _b.label = 3;\r\n                    case 3:\r\n                        _a++;\r\n                        return [3, 1];\r\n                    case 4: return [2];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    Container.prototype.unload = function () {\r\n        var _this = this;\r\n        var modules = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            modules[_i] = arguments[_i];\r\n        }\r\n        modules.forEach(function (module) {\r\n            var deactivations = _this._removeModuleBindings(module.id);\r\n            _this._deactivateSingletons(deactivations);\r\n            _this._removeModuleHandlers(module.id);\r\n        });\r\n    };\r\n    Container.prototype.unloadAsync = function () {\r\n        var modules = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            modules[_i] = arguments[_i];\r\n        }\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var _a, modules_3, module_1, deactivations;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        _a = 0, modules_3 = modules;\r\n                        _b.label = 1;\r\n                    case 1:\r\n                        if (!(_a < modules_3.length)) return [3, 4];\r\n                        module_1 = modules_3[_a];\r\n                        deactivations = this._removeModuleBindings(module_1.id);\r\n                        return [4, this._deactivateSingletonsAsync(deactivations)];\r\n                    case 2:\r\n                        _b.sent();\r\n                        this._removeModuleHandlers(module_1.id);\r\n                        _b.label = 3;\r\n                    case 3:\r\n                        _a++;\r\n                        return [3, 1];\r\n                    case 4: return [2];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    Container.prototype.bind = function (serviceIdentifier) {\r\n        var scope = this.options.defaultScope || BindingScopeEnum.Transient;\r\n        var binding = new Binding(serviceIdentifier, scope);\r\n        this._bindingDictionary.add(serviceIdentifier, binding);\r\n        return new BindingToSyntax(binding);\r\n    };\r\n    Container.prototype.rebind = function (serviceIdentifier) {\r\n        this.unbind(serviceIdentifier);\r\n        return this.bind(serviceIdentifier);\r\n    };\r\n    Container.prototype.rebindAsync = function (serviceIdentifier) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, this.unbindAsync(serviceIdentifier)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [2, this.bind(serviceIdentifier)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    Container.prototype.unbind = function (serviceIdentifier) {\r\n        if (this._bindingDictionary.hasKey(serviceIdentifier)) {\r\n            var bindings = this._bindingDictionary.get(serviceIdentifier);\r\n            this._deactivateSingletons(bindings);\r\n        }\r\n        this._removeServiceFromDictionary(serviceIdentifier);\r\n    };\r\n    Container.prototype.unbindAsync = function (serviceIdentifier) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var bindings;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (!this._bindingDictionary.hasKey(serviceIdentifier)) return [3, 2];\r\n                        bindings = this._bindingDictionary.get(serviceIdentifier);\r\n                        return [4, this._deactivateSingletonsAsync(bindings)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        _a.label = 2;\r\n                    case 2:\r\n                        this._removeServiceFromDictionary(serviceIdentifier);\r\n                        return [2];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    Container.prototype.unbindAll = function () {\r\n        var _this = this;\r\n        this._bindingDictionary.traverse(function (_key, value) {\r\n            _this._deactivateSingletons(value);\r\n        });\r\n        this._bindingDictionary = new Lookup();\r\n    };\r\n    Container.prototype.unbindAllAsync = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var promises;\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        promises = [];\r\n                        this._bindingDictionary.traverse(function (_key, value) {\r\n                            promises.push(_this._deactivateSingletonsAsync(value));\r\n                        });\r\n                        return [4, Promise.all(promises)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        this._bindingDictionary = new Lookup();\r\n                        return [2];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    Container.prototype.onActivation = function (serviceIdentifier, onActivation) {\r\n        this._activations.add(serviceIdentifier, onActivation);\r\n    };\r\n    Container.prototype.onDeactivation = function (serviceIdentifier, onDeactivation) {\r\n        this._deactivations.add(serviceIdentifier, onDeactivation);\r\n    };\r\n    Container.prototype.isBound = function (serviceIdentifier) {\r\n        var bound = this._bindingDictionary.hasKey(serviceIdentifier);\r\n        if (!bound && this.parent) {\r\n            bound = this.parent.isBound(serviceIdentifier);\r\n        }\r\n        return bound;\r\n    };\r\n    Container.prototype.isCurrentBound = function (serviceIdentifier) {\r\n        return this._bindingDictionary.hasKey(serviceIdentifier);\r\n    };\r\n    Container.prototype.isBoundNamed = function (serviceIdentifier, named) {\r\n        return this.isBoundTagged(serviceIdentifier, METADATA_KEY.NAMED_TAG, named);\r\n    };\r\n    Container.prototype.isBoundTagged = function (serviceIdentifier, key, value) {\r\n        var bound = false;\r\n        if (this._bindingDictionary.hasKey(serviceIdentifier)) {\r\n            var bindings = this._bindingDictionary.get(serviceIdentifier);\r\n            var request_1 = createMockRequest(this, serviceIdentifier, key, value);\r\n            bound = bindings.some(function (b) { return b.constraint(request_1); });\r\n        }\r\n        if (!bound && this.parent) {\r\n            bound = this.parent.isBoundTagged(serviceIdentifier, key, value);\r\n        }\r\n        return bound;\r\n    };\r\n    Container.prototype.snapshot = function () {\r\n        this._snapshots.push(ContainerSnapshot.of(this._bindingDictionary.clone(), this._middleware, this._activations.clone(), this._deactivations.clone(), this._moduleActivationStore.clone()));\r\n    };\r\n    Container.prototype.restore = function () {\r\n        var snapshot = this._snapshots.pop();\r\n        if (snapshot === undefined) {\r\n            throw new Error(ERROR_MSGS.NO_MORE_SNAPSHOTS_AVAILABLE);\r\n        }\r\n        this._bindingDictionary = snapshot.bindings;\r\n        this._activations = snapshot.activations;\r\n        this._deactivations = snapshot.deactivations;\r\n        this._middleware = snapshot.middleware;\r\n        this._moduleActivationStore = snapshot.moduleActivationStore;\r\n    };\r\n    Container.prototype.createChild = function (containerOptions) {\r\n        var child = new Container(containerOptions || this.options);\r\n        child.parent = this;\r\n        return child;\r\n    };\r\n    Container.prototype.applyMiddleware = function () {\r\n        var middlewares = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            middlewares[_i] = arguments[_i];\r\n        }\r\n        var initial = (this._middleware) ? this._middleware : this._planAndResolve();\r\n        this._middleware = middlewares.reduce(function (prev, curr) { return curr(prev); }, initial);\r\n    };\r\n    Container.prototype.applyCustomMetadataReader = function (metadataReader) {\r\n        this._metadataReader = metadataReader;\r\n    };\r\n    Container.prototype.get = function (serviceIdentifier) {\r\n        var getArgs = this._getNotAllArgs(serviceIdentifier, false);\r\n        return this._getButThrowIfAsync(getArgs);\r\n    };\r\n    Container.prototype.getAsync = function (serviceIdentifier) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var getArgs;\r\n            return __generator(this, function (_a) {\r\n                getArgs = this._getNotAllArgs(serviceIdentifier, false);\r\n                return [2, this._get(getArgs)];\r\n            });\r\n        });\r\n    };\r\n    Container.prototype.getTagged = function (serviceIdentifier, key, value) {\r\n        var getArgs = this._getNotAllArgs(serviceIdentifier, false, key, value);\r\n        return this._getButThrowIfAsync(getArgs);\r\n    };\r\n    Container.prototype.getTaggedAsync = function (serviceIdentifier, key, value) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var getArgs;\r\n            return __generator(this, function (_a) {\r\n                getArgs = this._getNotAllArgs(serviceIdentifier, false, key, value);\r\n                return [2, this._get(getArgs)];\r\n            });\r\n        });\r\n    };\r\n    Container.prototype.getNamed = function (serviceIdentifier, named) {\r\n        return this.getTagged(serviceIdentifier, METADATA_KEY.NAMED_TAG, named);\r\n    };\r\n    Container.prototype.getNamedAsync = function (serviceIdentifier, named) {\r\n        return this.getTaggedAsync(serviceIdentifier, METADATA_KEY.NAMED_TAG, named);\r\n    };\r\n    Container.prototype.getAll = function (serviceIdentifier) {\r\n        var getArgs = this._getAllArgs(serviceIdentifier);\r\n        return this._getButThrowIfAsync(getArgs);\r\n    };\r\n    Container.prototype.getAllAsync = function (serviceIdentifier) {\r\n        var getArgs = this._getAllArgs(serviceIdentifier);\r\n        return this._getAll(getArgs);\r\n    };\r\n    Container.prototype.getAllTagged = function (serviceIdentifier, key, value) {\r\n        var getArgs = this._getNotAllArgs(serviceIdentifier, true, key, value);\r\n        return this._getButThrowIfAsync(getArgs);\r\n    };\r\n    Container.prototype.getAllTaggedAsync = function (serviceIdentifier, key, value) {\r\n        var getArgs = this._getNotAllArgs(serviceIdentifier, true, key, value);\r\n        return this._getAll(getArgs);\r\n    };\r\n    Container.prototype.getAllNamed = function (serviceIdentifier, named) {\r\n        return this.getAllTagged(serviceIdentifier, METADATA_KEY.NAMED_TAG, named);\r\n    };\r\n    Container.prototype.getAllNamedAsync = function (serviceIdentifier, named) {\r\n        return this.getAllTaggedAsync(serviceIdentifier, METADATA_KEY.NAMED_TAG, named);\r\n    };\r\n    Container.prototype.resolve = function (constructorFunction) {\r\n        var isBound = this.isBound(constructorFunction);\r\n        if (!isBound) {\r\n            this.bind(constructorFunction).toSelf();\r\n        }\r\n        var resolved = this.get(constructorFunction);\r\n        if (!isBound) {\r\n            this.unbind(constructorFunction);\r\n        }\r\n        return resolved;\r\n    };\r\n    Container.prototype._preDestroy = function (constructor, instance) {\r\n        var _a, _b;\r\n        if (Reflect.hasMetadata(METADATA_KEY.PRE_DESTROY, constructor)) {\r\n            var data = Reflect.getMetadata(METADATA_KEY.PRE_DESTROY, constructor);\r\n            return (_b = (_a = instance)[data.value]) === null || _b === void 0 ? void 0 : _b.call(_a);\r\n        }\r\n    };\r\n    Container.prototype._removeModuleHandlers = function (moduleId) {\r\n        var moduleActivationsHandlers = this._moduleActivationStore.remove(moduleId);\r\n        this._activations.removeIntersection(moduleActivationsHandlers.onActivations);\r\n        this._deactivations.removeIntersection(moduleActivationsHandlers.onDeactivations);\r\n    };\r\n    Container.prototype._removeModuleBindings = function (moduleId) {\r\n        return this._bindingDictionary.removeByCondition(function (binding) { return binding.moduleId === moduleId; });\r\n    };\r\n    Container.prototype._deactivate = function (binding, instance) {\r\n        var _this = this;\r\n        var constructor = Object.getPrototypeOf(instance).constructor;\r\n        try {\r\n            if (this._deactivations.hasKey(binding.serviceIdentifier)) {\r\n                var result = this._deactivateContainer(instance, this._deactivations.get(binding.serviceIdentifier).values());\r\n                if (isPromise(result)) {\r\n                    return this._handleDeactivationError(result.then(function () { return _this._propagateContainerDeactivationThenBindingAndPreDestroyAsync(binding, instance, constructor); }), constructor);\r\n                }\r\n            }\r\n            var propagateDeactivationResult = this._propagateContainerDeactivationThenBindingAndPreDestroy(binding, instance, constructor);\r\n            if (isPromise(propagateDeactivationResult)) {\r\n                return this._handleDeactivationError(propagateDeactivationResult, constructor);\r\n            }\r\n        }\r\n        catch (ex) {\r\n            if (ex instanceof Error) {\r\n                throw new Error(ERROR_MSGS.ON_DEACTIVATION_ERROR(constructor.name, ex.message));\r\n            }\r\n        }\r\n    };\r\n    Container.prototype._handleDeactivationError = function (asyncResult, constructor) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var ex_1;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        _a.trys.push([0, 2, , 3]);\r\n                        return [4, asyncResult];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [3, 3];\r\n                    case 2:\r\n                        ex_1 = _a.sent();\r\n                        if (ex_1 instanceof Error) {\r\n                            throw new Error(ERROR_MSGS.ON_DEACTIVATION_ERROR(constructor.name, ex_1.message));\r\n                        }\r\n                        return [3, 3];\r\n                    case 3: return [2];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    Container.prototype._deactivateContainer = function (instance, deactivationsIterator) {\r\n        var _this = this;\r\n        var deactivation = deactivationsIterator.next();\r\n        while (deactivation.value) {\r\n            var result = deactivation.value(instance);\r\n            if (isPromise(result)) {\r\n                return result.then(function () {\r\n                    return _this._deactivateContainerAsync(instance, deactivationsIterator);\r\n                });\r\n            }\r\n            deactivation = deactivationsIterator.next();\r\n        }\r\n    };\r\n    Container.prototype._deactivateContainerAsync = function (instance, deactivationsIterator) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var deactivation;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        deactivation = deactivationsIterator.next();\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        if (!deactivation.value) return [3, 3];\r\n                        return [4, deactivation.value(instance)];\r\n                    case 2:\r\n                        _a.sent();\r\n                        deactivation = deactivationsIterator.next();\r\n                        return [3, 1];\r\n                    case 3: return [2];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    Container.prototype._getContainerModuleHelpersFactory = function () {\r\n        var _this = this;\r\n        var setModuleId = function (bindingToSyntax, moduleId) {\r\n            bindingToSyntax._binding.moduleId = moduleId;\r\n        };\r\n        var getBindFunction = function (moduleId) {\r\n            return function (serviceIdentifier) {\r\n                var bindingToSyntax = _this.bind(serviceIdentifier);\r\n                setModuleId(bindingToSyntax, moduleId);\r\n                return bindingToSyntax;\r\n            };\r\n        };\r\n        var getUnbindFunction = function () {\r\n            return function (serviceIdentifier) {\r\n                return _this.unbind(serviceIdentifier);\r\n            };\r\n        };\r\n        var getUnbindAsyncFunction = function () {\r\n            return function (serviceIdentifier) {\r\n                return _this.unbindAsync(serviceIdentifier);\r\n            };\r\n        };\r\n        var getIsboundFunction = function () {\r\n            return function (serviceIdentifier) {\r\n                return _this.isBound(serviceIdentifier);\r\n            };\r\n        };\r\n        var getRebindFunction = function (moduleId) {\r\n            return function (serviceIdentifier) {\r\n                var bindingToSyntax = _this.rebind(serviceIdentifier);\r\n                setModuleId(bindingToSyntax, moduleId);\r\n                return bindingToSyntax;\r\n            };\r\n        };\r\n        var getOnActivationFunction = function (moduleId) {\r\n            return function (serviceIdentifier, onActivation) {\r\n                _this._moduleActivationStore.addActivation(moduleId, serviceIdentifier, onActivation);\r\n                _this.onActivation(serviceIdentifier, onActivation);\r\n            };\r\n        };\r\n        var getOnDeactivationFunction = function (moduleId) {\r\n            return function (serviceIdentifier, onDeactivation) {\r\n                _this._moduleActivationStore.addDeactivation(moduleId, serviceIdentifier, onDeactivation);\r\n                _this.onDeactivation(serviceIdentifier, onDeactivation);\r\n            };\r\n        };\r\n        return function (mId) { return ({\r\n            bindFunction: getBindFunction(mId),\r\n            isboundFunction: getIsboundFunction(),\r\n            onActivationFunction: getOnActivationFunction(mId),\r\n            onDeactivationFunction: getOnDeactivationFunction(mId),\r\n            rebindFunction: getRebindFunction(mId),\r\n            unbindFunction: getUnbindFunction(),\r\n            unbindAsyncFunction: getUnbindAsyncFunction()\r\n        }); };\r\n    };\r\n    Container.prototype._getAll = function (getArgs) {\r\n        return Promise.all(this._get(getArgs));\r\n    };\r\n    Container.prototype._get = function (getArgs) {\r\n        var planAndResolveArgs = __assign(__assign({}, getArgs), { contextInterceptor: function (context) { return context; }, targetType: TargetTypeEnum.Variable });\r\n        if (this._middleware) {\r\n            var middlewareResult = this._middleware(planAndResolveArgs);\r\n            if (middlewareResult === undefined || middlewareResult === null) {\r\n                throw new Error(ERROR_MSGS.INVALID_MIDDLEWARE_RETURN);\r\n            }\r\n            return middlewareResult;\r\n        }\r\n        return this._planAndResolve()(planAndResolveArgs);\r\n    };\r\n    Container.prototype._getButThrowIfAsync = function (getArgs) {\r\n        var result = this._get(getArgs);\r\n        if (isPromiseOrContainsPromise(result)) {\r\n            throw new Error(ERROR_MSGS.LAZY_IN_SYNC(getArgs.serviceIdentifier));\r\n        }\r\n        return result;\r\n    };\r\n    Container.prototype._getAllArgs = function (serviceIdentifier) {\r\n        var getAllArgs = {\r\n            avoidConstraints: true,\r\n            isMultiInject: true,\r\n            serviceIdentifier: serviceIdentifier,\r\n        };\r\n        return getAllArgs;\r\n    };\r\n    Container.prototype._getNotAllArgs = function (serviceIdentifier, isMultiInject, key, value) {\r\n        var getNotAllArgs = {\r\n            avoidConstraints: false,\r\n            isMultiInject: isMultiInject,\r\n            serviceIdentifier: serviceIdentifier,\r\n            key: key,\r\n            value: value,\r\n        };\r\n        return getNotAllArgs;\r\n    };\r\n    Container.prototype._planAndResolve = function () {\r\n        var _this = this;\r\n        return function (args) {\r\n            var context = plan(_this._metadataReader, _this, args.isMultiInject, args.targetType, args.serviceIdentifier, args.key, args.value, args.avoidConstraints);\r\n            context = args.contextInterceptor(context);\r\n            var result = resolve(context);\r\n            return result;\r\n        };\r\n    };\r\n    Container.prototype._deactivateIfSingleton = function (binding) {\r\n        var _this = this;\r\n        if (!binding.activated) {\r\n            return;\r\n        }\r\n        if (isPromise(binding.cache)) {\r\n            return binding.cache.then(function (resolved) { return _this._deactivate(binding, resolved); });\r\n        }\r\n        return this._deactivate(binding, binding.cache);\r\n    };\r\n    Container.prototype._deactivateSingletons = function (bindings) {\r\n        for (var _i = 0, bindings_1 = bindings; _i < bindings_1.length; _i++) {\r\n            var binding = bindings_1[_i];\r\n            var result = this._deactivateIfSingleton(binding);\r\n            if (isPromise(result)) {\r\n                throw new Error(ERROR_MSGS.ASYNC_UNBIND_REQUIRED);\r\n            }\r\n        }\r\n    };\r\n    Container.prototype._deactivateSingletonsAsync = function (bindings) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, Promise.all(bindings.map(function (b) { return _this._deactivateIfSingleton(b); }))];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [2];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    Container.prototype._propagateContainerDeactivationThenBindingAndPreDestroy = function (binding, instance, constructor) {\r\n        if (this.parent) {\r\n            return this._deactivate.bind(this.parent)(binding, instance);\r\n        }\r\n        else {\r\n            return this._bindingDeactivationAndPreDestroy(binding, instance, constructor);\r\n        }\r\n    };\r\n    Container.prototype._propagateContainerDeactivationThenBindingAndPreDestroyAsync = function (binding, instance, constructor) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (!this.parent) return [3, 2];\r\n                        return [4, this._deactivate.bind(this.parent)(binding, instance)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [3, 4];\r\n                    case 2: return [4, this._bindingDeactivationAndPreDestroyAsync(binding, instance, constructor)];\r\n                    case 3:\r\n                        _a.sent();\r\n                        _a.label = 4;\r\n                    case 4: return [2];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    Container.prototype._removeServiceFromDictionary = function (serviceIdentifier) {\r\n        try {\r\n            this._bindingDictionary.remove(serviceIdentifier);\r\n        }\r\n        catch (e) {\r\n            throw new Error(ERROR_MSGS.CANNOT_UNBIND + \" \" + getServiceIdentifierAsString(serviceIdentifier));\r\n        }\r\n    };\r\n    Container.prototype._bindingDeactivationAndPreDestroy = function (binding, instance, constructor) {\r\n        var _this = this;\r\n        if (typeof binding.onDeactivation === 'function') {\r\n            var result = binding.onDeactivation(instance);\r\n            if (isPromise(result)) {\r\n                return result.then(function () { return _this._preDestroy(constructor, instance); });\r\n            }\r\n        }\r\n        return this._preDestroy(constructor, instance);\r\n    };\r\n    Container.prototype._bindingDeactivationAndPreDestroyAsync = function (binding, instance, constructor) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (!(typeof binding.onDeactivation === 'function')) return [3, 2];\r\n                        return [4, binding.onDeactivation(instance)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        _a.label = 2;\r\n                    case 2: return [4, this._preDestroy(constructor, instance)];\r\n                    case 3:\r\n                        _a.sent();\r\n                        return [2];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return Container;\r\n}());\r\nexport { Container };\r\n","import * as ERRORS_MSGS from '../constants/error_msgs';\r\nimport * as METADATA_KEY from '../constants/metadata_keys';\r\nfunction injectable() {\r\n    return function (target) {\r\n        if (Reflect.hasOwnMetadata(METADATA_KEY.PARAM_TYPES, target)) {\r\n            throw new Error(ERRORS_MSGS.DUPLICATED_INJECTABLE_DECORATOR);\r\n        }\r\n        var types = Reflect.getMetadata(METADATA_KEY.DESIGN_PARAM_TYPES, target) || [];\r\n        Reflect.defineMetadata(METADATA_KEY.PARAM_TYPES, types, target);\r\n        return target;\r\n    };\r\n}\r\nexport { injectable };\r\n","import { Container, injectable } from 'inversify';\nimport { LoginFormController, LoginFormModel } from '../../components/LoginForm';\n\nconst container = new Container();\n\n@injectable()\nexport class DefaultUserLoginFormModal implements LoginFormModel {\n  public getDefaultUser(): string {\n    return 'admin@test.com';\n  }\n}\n\n@injectable()\nexport class DefaultUserLoginFormController implements LoginFormController {\n  public login() {\n    console.log('Login in as default user');\n  }\n}\n\ncontainer.bind<LoginFormModel>('LoginFormModel').to(DefaultUserLoginFormModal);\ncontainer.bind<LoginFormController>('LoginFormController').to(DefaultUserLoginFormController);\n\nexport { container };\n","import { Button, Field, Input } from '@grafana/ui';\nimport React from 'react';\n\nexport interface LoginFormModel {\n  getDefaultUser(): string;\n}\n\nexport interface LoginFormController {\n  login(): void;\n}\n\ninterface LoginFormProps {\n  readonly model: LoginFormModel;\n  readonly controller: LoginFormController;\n}\nexport function LoginForm(props: LoginFormProps) {\n  const { model, controller } = props;\n  const { getDefaultUser } = model;\n  const { login } = controller;\n  const user = getDefaultUser();\n\n  return (\n    <>\n      <Field label=\"Email\" error=\"Name is required\">\n        <Input required placeholder=\"Roger Waters\" defaultValue={user} type=\"email\" />\n      </Field>\n      <Field label=\"password\" error=\"Password is required\">\n        <Input required type=\"password\" />\n      </Field>\n      <Button onClick={login}>Login</Button>\n    </>\n  );\n}\n","import React from 'react';\nimport { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { container } from 'ioc';\nimport { useStyles2 } from '@grafana/ui';\nimport { PluginPage } from '@grafana/runtime';\nimport { LoginForm } from '../components/LoginForm';\nexport function PageIOC() {\n  const s = useStyles2(getStyles);\n\n  return (\n    <PluginPage>\n      <div>\n        Login\n        <div className={s.marginTop}>\n          <LoginForm model={container.get('LoginFormModel')} controller={container.get('LoginFormController')} />\n        </div>\n      </div>\n    </PluginPage>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  marginTop: css`\n    margin-top: ${theme.spacing(2)};\n  `,\n});\n","import React, { ChangeEvent, useState } from 'react';\nimport { lastValueFrom } from 'rxjs';\nimport { css } from '@emotion/css';\nimport { AppPluginMeta, GrafanaTheme2, PluginConfigPageProps, PluginMeta } from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { Button, Field, FieldSet, Input, SecretInput, useStyles2 } from '@grafana/ui';\nimport { testIds } from '../testIds';\n\nexport type AppPluginSettings = {\n  apiUrl?: string;\n};\n\ntype State = {\n  // The URL to reach our custom API.\n  apiUrl: string;\n  // Tells us if the API key secret is set.\n  isApiKeySet: boolean;\n  // A secret key for our custom API.\n  apiKey: string;\n};\n\nexport interface AppConfigProps extends PluginConfigPageProps<AppPluginMeta<AppPluginSettings>> {}\n\nexport const AppConfig = ({ plugin }: AppConfigProps) => {\n  const s = useStyles2(getStyles);\n  const { enabled, pinned, jsonData, secureJsonFields } = plugin.meta;\n  const [state, setState] = useState<State>({\n    apiUrl: jsonData?.apiUrl || '',\n    apiKey: '',\n    isApiKeySet: Boolean(secureJsonFields?.apiKey),\n  });\n\n  const onResetApiKey = () =>\n    setState({\n      ...state,\n      apiKey: '',\n      isApiKeySet: false,\n    });\n\n  const onChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setState({\n      ...state,\n      [event.target.name]: event.target.value.trim(),\n    });\n  };\n\n  return (\n    <div data-testid={testIds.appConfig.container}>\n      <FieldSet label=\"API Settings\">\n        <Field label=\"API Key\" description=\"A secret key for authenticating to our custom API\">\n          <SecretInput\n            width={60}\n            data-testid={testIds.appConfig.apiKey}\n            name=\"apiKey\"\n            value={state.apiKey}\n            isConfigured={state.isApiKeySet}\n            placeholder={'Your secret API key'}\n            onChange={onChange}\n            onReset={onResetApiKey}\n          />\n        </Field>\n\n        <Field label=\"API Url\" description=\"\" className={s.marginTop}>\n          <Input\n            width={60}\n            name=\"apiUrl\"\n            data-testid={testIds.appConfig.apiUrl}\n            value={state.apiUrl}\n            placeholder={`E.g.: http://mywebsite.com/api/v1`}\n            onChange={onChange}\n          />\n        </Field>\n\n        <div className={s.marginTop}>\n          <Button\n            type=\"submit\"\n            data-testid={testIds.appConfig.submit}\n            onClick={() =>\n              updatePluginAndReload(plugin.meta.id, {\n                enabled,\n                pinned,\n                jsonData: {\n                  apiUrl: state.apiUrl,\n                },\n                // This cannot be queried later by the frontend.\n                // We don't want to override it in case it was set previously and left untouched now.\n                secureJsonData: state.isApiKeySet\n                  ? undefined\n                  : {\n                      apiKey: state.apiKey,\n                    },\n              })\n            }\n            disabled={Boolean(!state.apiUrl || (!state.isApiKeySet && !state.apiKey))}\n          >\n            Save API settings\n          </Button>\n        </div>\n      </FieldSet>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  colorWeak: css`\n    color: ${theme.colors.text.secondary};\n  `,\n  marginTop: css`\n    margin-top: ${theme.spacing(3)};\n  `,\n});\n\nconst updatePluginAndReload = async (pluginId: string, data: Partial<PluginMeta<AppPluginSettings>>) => {\n  try {\n    await updatePlugin(pluginId, data);\n\n    // Reloading the page as the changes made here wouldn't be propagated to the actual plugin otherwise.\n    // This is not ideal, however unfortunately currently there is no supported way for updating the plugin state.\n    window.location.reload();\n  } catch (e) {\n    console.error('Error while updating the plugin', e);\n  }\n};\n\nexport const updatePlugin = async (pluginId: string, data: Partial<PluginMeta>) => {\n  const response = await getBackendSrv().fetch({\n    url: `/api/plugins/${pluginId}/settings`,\n    method: 'POST',\n    data,\n  });\n\n  return lastValueFrom(response);\n};\n","import { AppPlugin } from '@grafana/data';\nimport { App } from './components/App';\nimport { AppConfig } from './components/AppConfig';\n\nexport const plugin = new AppPlugin<{}>().setRootPage(App).addConfigPage({\n  title: 'Configuration',\n  icon: 'cog',\n  body: AppConfig,\n  id: 'configuration',\n});\n","import React from 'react';\nimport { Route, Routes } from 'react-router-dom';\nimport { AppRootProps } from '@grafana/data';\nimport { ROUTES } from '../../constants';\nimport { PageFour, PageOne, PageThree, PageTwo, PageIOC } from '../../pages';\n\nexport function App(props: AppRootProps) {\n  return (\n    <Routes>\n      <Route path={ROUTES.Two} element={<PageTwo />} />\n      <Route path={`${ROUTES.Three}/:id?`} element={<PageThree />} />\n      <Route path={ROUTES.IOC} element={<PageIOC />} />\n\n      {/* Full-width page (this page will have no side navigation) */}\n      <Route path={ROUTES.Four} element={<PageFour />} />\n\n      {/* Default page */}\n      <Route path=\"*\" element={<PageOne />} />\n    </Routes>\n  );\n}\n"],"names":["module","exports","__WEBPACK_EXTERNAL_MODULE__696__","__WEBPACK_EXTERNAL_MODULE__744__","__WEBPACK_EXTERNAL_MODULE__622__","__WEBPACK_EXTERNAL_MODULE__187__","__WEBPACK_EXTERNAL_MODULE__10__","__WEBPACK_EXTERNAL_MODULE__528__","__WEBPACK_EXTERNAL_MODULE__64__","__WEBPACK_EXTERNAL_MODULE__464__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","PLUGIN_BASE_URL","concat","pluginJson","ROUTES","prefixRoute","route","testIds","container","apiKey","apiUrl","submit","navigateToFour","navigateBack","PageFour","s","useStyles2","getStyles","React","PluginPage","layout","PageLayoutType","Canvas","div","className","page","data-testid","LinkButton","icon","href","One","content","theme","css","spacing","colors","background","secondary","PageOne","marginTop","Four","Action","ResultType","Set","Error","validMutationMethodsArr","validRequestMethodsArr","_extends","assign","bind","target","i","arguments","length","source","apply","this","_excluded","window","__reactRouterVersion","e","Map","ReactDOM","DataRouterHook","DataRouterStateHook","isBrowser","document","createElement","ABSOLUTE_URL_REGEX","Link","_ref7","ref","absoluteHref","onClick","relative","reloadDocument","replace","state","to","preventScrollReset","unstable_viewTransition","rest","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","UNSAFE_NavigationContext","basename","isExternal","test","currentUrl","URL","location","targetUrl","startsWith","protocol","path","pathname","toLowerCase","startIndex","endsWith","nextChar","charAt","slice","stripBasename","origin","search","hash","useHref","internalOnClick","_temp","navigate","useNavigate","useLocation","useResolvedPath","event","button","metaKey","altKey","ctrlKey","shiftKey","isModifiedEvent","shouldProcessLinkClick","preventDefault","replaceProp","createPath","useLinkClickHandler","defaultPrevented","PageThree","id","useParams","br","strong","link","Three","text","PageTwo","p","BindingScopeEnum","BindingTypeEnum","ConstantValue","Constructor","DynamicValue","Factory","Function","Instance","Invalid","Provider","TargetTypeEnum","ClassProperty","ConstructorArgument","Variable","idCounter","Binding","serviceIdentifier","scope","activated","type","constraint","request","implementationType","cache","factory","provider","onActivation","onDeactivation","dynamicValue","clone","NULL_ARGUMENT","KEY_NOT_FOUND","AMBIGUOUS_MATCH","NOT_REGISTERED","MISSING_INJECTABLE_ANNOTATION","MISSING_INJECT_ANNOTATION","CIRCULAR_DEPENDENCY","ARGUMENTS_LENGTH_MISMATCH","values","_i","ON_DEACTIVATION_ERROR","clazz","errorMessage","STACK_OVERFLOW","NAMED_TAG","NAME_TAG","UNMANAGED_TAG","OPTIONAL_TAG","INJECT_TAG","MULTI_INJECT_TAG","PARAM_TYPES","POST_CONSTRUCT","PRE_DESTROY","NON_CUSTOM_TAG_KEYS","MetadataReader","getConstructorMetadata","constructorFunc","compilerGeneratedMetadata","Reflect","getMetadata","METADATA_KEY","userGeneratedMetadata","getPropertiesMetadata","BindingCount","MultipleBindingsAvailable","NoBindingsAvailable","OnlyOneBindingAvailable","isStackOverflowExeption","error","RangeError","message","ERROR_MSGS","getServiceIdentifierAsString","name","toString","listRegisteredBindingsForServiceIdentifier","getBindings","registeredBindingsList","registeredBindings","forEach","binding","getFunctionName","metaData","alreadyDependencyChain","parentRequest","circularDependencyToException","childRequests","childRequest","services","_createStringArr","req","result","push","reverse","join","dependencyChainToString","func","name_1","match","Context","addPlan","plan","setCurrentRequest","currentRequest","Metadata","String","Plan","parentContext","rootRequest","LazyServiceIdentifier","cb","_cb","unwrap","QueryableString","str","searchString","reverseString","reverseSearchString","split","contains","equals","compareString","Target","identifier","namedOrTagged","queryableName","metadata","Array","metadataItem","hasTag","_a","isArray","matchesArray","matchesTag","isNamed","isTagged","some","every","isOptional","getNamedTag","filter","m","getCustomTags","matchesNamedTag","_this","__spreadArray","from","pack","ar","l","getTargets","metadataReader","constructorName","isBaseClass","serviceIdentifiers","constructorArgsMetadata","hasUserDeclaredUnknownInjections","hasOptionalParameters","constructorTargets","iterations","targets","getConstructorArgsAsTarget","getConstructorArgsAsTargets","propertyTargets","getClassPropsAsTargets","index","targetMetadata","formatTargetMetadata","isManaged","unmanaged","inject","multiInject","targetName","_getServiceIdentifierForProperty","propertyName","msg","classPropsMetadata","symbolKeys","getOwnPropertySymbols","keys_1","baseConstructor","getPrototypeOf","constructor","baseTargets","getBaseClassDependencyCount","map","t","unmanagedCount","dependencyCount","targetMetadataMap","Request","bindings","requestScope","addChildRequest","child","getBindingDictionary","cntnr","_bindingDictionary","_getActiveBindings","avoidConstraints","context","activeBindings","options","autoBindInjectable","toSelf","serviceIdentifierString","m_1","namedTag","otherTags","tag","listMetadataForTarget","_validateActiveBindingCount","_createSubRequests","thePlan","subChildRequest","dependencies","getDependencies","skipBaseClassChecks","baseClassDependencyCount","dependency","bindingDictionary","hasKey","parent","isPromise","object","then","isPromiseOrContainsPromise","FactoryType","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","rejected","done","_saveAsyncResultToSingletonScope","asyncResult","ex_1","body","f","y","g","_","label","sent","trys","ops","verb","iterator","v","op","TypeError","pop","__generator","__assign","createInstanceWithInjections","args","instance","constr","constructorInjections","propertyRequests","property","injection","propertyInjections","possiblyWaitInjections","possiblePromiseinjections","injections","possiblePromiseinjections_1","all","_getInstanceAfterPostConstruct","postConstructResult","_b","hasMetadata","data","_postConstruct","_resolveRequest","targetIsAnArray","targetParentIsNotAnArray","_f","_resolveBinding","_resolveFactoryFromBinding","factoryDetails","factoryType","getFactoryDetails","fn","errorCallback","tryAndThrowErrorIfStackOverflow","_getResolvedFromBinding","boundValue","serviceIdentifierAsString","ensureFullyBound","resolveRequest","scopeErrorMessage","_throwIfHandlingDeactivation","_validateInstanceResolution","resolved","reduce","resolvedRequests","isAsync","_resolveRequests","createInstanceWithInjectionsArg","createInstanceWithInjectionsAsync","_createInstance","resolvedResult","resolveInstance","_resolveInScope","resolveFromBinding","has","tryGetFromScope","_saveToSingletonScope","set","_saveToRequestScope","saveToScope","_onActivation","_bindingActivation","containersIterator","_getContainersIterator","containersIteratorResult","context_1","activationsIterator","_getContainerActivationsForService","_activateContainerAsync","_activateContainer","previousResult","activation","resultPromise","activations","_activations","containersStack","nextContainer","traverseAncerstors","taggedConstraint","namedConstraint","typeConstraint","BindingWhenSyntax","_binding","when","BindingOnSyntax","whenTargetNamed","whenTargetIsDefault","whenTargetTagged","whenInjectedInto","whenParentNamed","whenParentTagged","whenAnyAncestorIs","ancestor","whenNoAncestorIs","whenAnyAncestorNamed","whenNoAncestorNamed","whenAnyAncestorTagged","whenNoAncestorTagged","whenAnyAncestorMatches","whenNoAncestorMatches","handler","BindingWhenOnSyntax","_bindingWhenSyntax","_bindingOnSyntax","BindingInSyntax","inRequestScope","inSingletonScope","inTransientScope","BindingInWhenOnSyntax","_bindingInSyntax","BindingToSyntax","self","toConstantValue","toDynamicValue","toConstructor","toFactory","toFunction","bindingWhenOnSyntax","toAutoFactory","toAutoNamedFactory","named","getNamed","toProvider","toService","service","ContainerSnapshot","of","middleware","deactivations","moduleActivationStore","snapshot","Lookup","_map","getMap","add","entry","remove","delete","removeIntersection","lookup","traverse","lookupActivations","filteredValues","lookupValue","moduleActivation","_setValue","removeByCondition","condition","removals","entries","updatedEntries","entries_1","copy","b","ModuleActivationStore","handlers","_getEmptyHandlersStore","addDeactivation","_getModuleActivationHandlers","onDeactivations","addActivation","onActivations","handlersStore","moduleActivationHandlers","Container","containerOptions","defaultScope","_snapshots","_middleware","_deactivations","_metadataReader","_moduleActivationStore","merge","container1","container2","containers","targetContainers","targetContainer","targetBindingDictionary","destination","_key","load","modules","getHelpers","_getContainerModuleHelpersFactory","modules_1","currentModule","containerModuleHelpers","registry","bindFunction","unbindFunction","isboundFunction","rebindFunction","unbindAsyncFunction","onActivationFunction","onDeactivationFunction","loadAsync","modules_2","unload","_removeModuleBindings","_deactivateSingletons","_removeModuleHandlers","unloadAsync","modules_3","module_1","_deactivateSingletonsAsync","rebind","unbind","rebindAsync","unbindAsync","_removeServiceFromDictionary","unbindAll","unbindAllAsync","promises","isBound","bound","isCurrentBound","isBoundNamed","isBoundTagged","request_1","createMockRequest","restore","createChild","applyMiddleware","middlewares","initial","_planAndResolve","prev","curr","applyCustomMetadataReader","getArgs","_getNotAllArgs","_getButThrowIfAsync","getAsync","_get","getTagged","getTaggedAsync","getNamedAsync","getAll","_getAllArgs","getAllAsync","_getAll","getAllTagged","getAllTaggedAsync","getAllNamed","getAllNamedAsync","constructorFunction","_preDestroy","moduleActivationsHandlers","_deactivate","_deactivateContainer","_handleDeactivationError","_propagateContainerDeactivationThenBindingAndPreDestroyAsync","propagateDeactivationResult","_propagateContainerDeactivationThenBindingAndPreDestroy","ex","deactivationsIterator","deactivation","_deactivateContainerAsync","setModuleId","bindingToSyntax","getRebindFunction","getOnActivationFunction","getOnDeactivationFunction","mId","planAndResolveArgs","contextInterceptor","targetType","middlewareResult","isMultiInject","injectMetadata","tagMetadata","_createTarget","_deactivateIfSingleton","bindings_1","_bindingDeactivationAndPreDestroy","_bindingDeactivationAndPreDestroyAsync","injectable","hasOwnMetadata","types","defineMetadata","DefaultUserLoginFormModal","getDefaultUser","DefaultUserLoginFormController","login","console","log","LoginForm","props","model","controller","user","Field","Input","required","placeholder","defaultValue","Button","PageIOC","colorWeak","updatePluginAndReload","_async_to_generator","pluginId","updatePlugin","_state","reload","response","getBackendSrv","fetch","url","method","lastValueFrom","plugin","AppPlugin","setRootPage","Routes","Route","Two","element","IOC","addConfigPage","title","param","meta","enabled","pinned","jsonData","secureJsonFields","useState","isApiKeySet","Boolean","setState","onChange","_object_spread_props","_object_spread","_define_property","trim","FieldSet","description","SecretInput","width","isConfigured","onReset","secureJsonData","disabled"],"sourceRoot":""}